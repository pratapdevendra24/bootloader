
bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004744  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  080048d4  080048d4  000148d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004b30  08004b30  00014b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004b38  08004b38  00014b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004b3c  08004b3c  00014b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000070  20000000  08004b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000220  20000070  08004bb0  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000290  08004bb0  00020290  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d525  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fee  00000000  00000000  0002d5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000b60  00000000  00000000  0002f5b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000a58  00000000  00000000  00030118  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00005187  00000000  00000000  00030b70  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00003fde  00000000  00000000  00035cf7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  00039cd5  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00003094  00000000  00000000  00039d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080048bc 	.word	0x080048bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080048bc 	.word	0x080048bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b97a 	b.w	800058c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	468c      	mov	ip, r1
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	9e08      	ldr	r6, [sp, #32]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d151      	bne.n	8000364 <__udivmoddi4+0xb4>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d96d      	bls.n	80003a2 <__udivmoddi4+0xf2>
 80002c6:	fab2 fe82 	clz	lr, r2
 80002ca:	f1be 0f00 	cmp.w	lr, #0
 80002ce:	d00b      	beq.n	80002e8 <__udivmoddi4+0x38>
 80002d0:	f1ce 0c20 	rsb	ip, lr, #32
 80002d4:	fa01 f50e 	lsl.w	r5, r1, lr
 80002d8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002dc:	fa02 f70e 	lsl.w	r7, r2, lr
 80002e0:	ea4c 0c05 	orr.w	ip, ip, r5
 80002e4:	fa00 f40e 	lsl.w	r4, r0, lr
 80002e8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 80002ec:	0c25      	lsrs	r5, r4, #16
 80002ee:	fbbc f8fa 	udiv	r8, ip, sl
 80002f2:	fa1f f987 	uxth.w	r9, r7
 80002f6:	fb0a cc18 	mls	ip, sl, r8, ip
 80002fa:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80002fe:	fb08 f309 	mul.w	r3, r8, r9
 8000302:	42ab      	cmp	r3, r5
 8000304:	d90a      	bls.n	800031c <__udivmoddi4+0x6c>
 8000306:	19ed      	adds	r5, r5, r7
 8000308:	f108 32ff 	add.w	r2, r8, #4294967295
 800030c:	f080 8123 	bcs.w	8000556 <__udivmoddi4+0x2a6>
 8000310:	42ab      	cmp	r3, r5
 8000312:	f240 8120 	bls.w	8000556 <__udivmoddi4+0x2a6>
 8000316:	f1a8 0802 	sub.w	r8, r8, #2
 800031a:	443d      	add	r5, r7
 800031c:	1aed      	subs	r5, r5, r3
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb5 f0fa 	udiv	r0, r5, sl
 8000324:	fb0a 5510 	mls	r5, sl, r0, r5
 8000328:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800032c:	fb00 f909 	mul.w	r9, r0, r9
 8000330:	45a1      	cmp	r9, r4
 8000332:	d909      	bls.n	8000348 <__udivmoddi4+0x98>
 8000334:	19e4      	adds	r4, r4, r7
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	f080 810a 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800033e:	45a1      	cmp	r9, r4
 8000340:	f240 8107 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000344:	3802      	subs	r0, #2
 8000346:	443c      	add	r4, r7
 8000348:	eba4 0409 	sub.w	r4, r4, r9
 800034c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000350:	2100      	movs	r1, #0
 8000352:	2e00      	cmp	r6, #0
 8000354:	d061      	beq.n	800041a <__udivmoddi4+0x16a>
 8000356:	fa24 f40e 	lsr.w	r4, r4, lr
 800035a:	2300      	movs	r3, #0
 800035c:	6034      	str	r4, [r6, #0]
 800035e:	6073      	str	r3, [r6, #4]
 8000360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000364:	428b      	cmp	r3, r1
 8000366:	d907      	bls.n	8000378 <__udivmoddi4+0xc8>
 8000368:	2e00      	cmp	r6, #0
 800036a:	d054      	beq.n	8000416 <__udivmoddi4+0x166>
 800036c:	2100      	movs	r1, #0
 800036e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000372:	4608      	mov	r0, r1
 8000374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000378:	fab3 f183 	clz	r1, r3
 800037c:	2900      	cmp	r1, #0
 800037e:	f040 808e 	bne.w	800049e <__udivmoddi4+0x1ee>
 8000382:	42ab      	cmp	r3, r5
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xdc>
 8000386:	4282      	cmp	r2, r0
 8000388:	f200 80fa 	bhi.w	8000580 <__udivmoddi4+0x2d0>
 800038c:	1a84      	subs	r4, r0, r2
 800038e:	eb65 0503 	sbc.w	r5, r5, r3
 8000392:	2001      	movs	r0, #1
 8000394:	46ac      	mov	ip, r5
 8000396:	2e00      	cmp	r6, #0
 8000398:	d03f      	beq.n	800041a <__udivmoddi4+0x16a>
 800039a:	e886 1010 	stmia.w	r6, {r4, ip}
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	b912      	cbnz	r2, 80003aa <__udivmoddi4+0xfa>
 80003a4:	2701      	movs	r7, #1
 80003a6:	fbb7 f7f2 	udiv	r7, r7, r2
 80003aa:	fab7 fe87 	clz	lr, r7
 80003ae:	f1be 0f00 	cmp.w	lr, #0
 80003b2:	d134      	bne.n	800041e <__udivmoddi4+0x16e>
 80003b4:	1beb      	subs	r3, r5, r7
 80003b6:	0c3a      	lsrs	r2, r7, #16
 80003b8:	fa1f fc87 	uxth.w	ip, r7
 80003bc:	2101      	movs	r1, #1
 80003be:	fbb3 f8f2 	udiv	r8, r3, r2
 80003c2:	0c25      	lsrs	r5, r4, #16
 80003c4:	fb02 3318 	mls	r3, r2, r8, r3
 80003c8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003cc:	fb0c f308 	mul.w	r3, ip, r8
 80003d0:	42ab      	cmp	r3, r5
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x134>
 80003d4:	19ed      	adds	r5, r5, r7
 80003d6:	f108 30ff 	add.w	r0, r8, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x132>
 80003dc:	42ab      	cmp	r3, r5
 80003de:	f200 80d1 	bhi.w	8000584 <__udivmoddi4+0x2d4>
 80003e2:	4680      	mov	r8, r0
 80003e4:	1aed      	subs	r5, r5, r3
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb5 f0f2 	udiv	r0, r5, r2
 80003ec:	fb02 5510 	mls	r5, r2, r0, r5
 80003f0:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 80003f4:	fb0c fc00 	mul.w	ip, ip, r0
 80003f8:	45a4      	cmp	ip, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x15c>
 80003fc:	19e4      	adds	r4, r4, r7
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x15a>
 8000404:	45a4      	cmp	ip, r4
 8000406:	f200 80b8 	bhi.w	800057a <__udivmoddi4+0x2ca>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 040c 	sub.w	r4, r4, ip
 8000410:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000414:	e79d      	b.n	8000352 <__udivmoddi4+0xa2>
 8000416:	4631      	mov	r1, r6
 8000418:	4630      	mov	r0, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1ce 0420 	rsb	r4, lr, #32
 8000422:	fa05 f30e 	lsl.w	r3, r5, lr
 8000426:	fa07 f70e 	lsl.w	r7, r7, lr
 800042a:	fa20 f804 	lsr.w	r8, r0, r4
 800042e:	0c3a      	lsrs	r2, r7, #16
 8000430:	fa25 f404 	lsr.w	r4, r5, r4
 8000434:	ea48 0803 	orr.w	r8, r8, r3
 8000438:	fbb4 f1f2 	udiv	r1, r4, r2
 800043c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000440:	fb02 4411 	mls	r4, r2, r1, r4
 8000444:	fa1f fc87 	uxth.w	ip, r7
 8000448:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 800044c:	fb01 f30c 	mul.w	r3, r1, ip
 8000450:	42ab      	cmp	r3, r5
 8000452:	fa00 f40e 	lsl.w	r4, r0, lr
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x1bc>
 8000458:	19ed      	adds	r5, r5, r7
 800045a:	f101 30ff 	add.w	r0, r1, #4294967295
 800045e:	f080 808a 	bcs.w	8000576 <__udivmoddi4+0x2c6>
 8000462:	42ab      	cmp	r3, r5
 8000464:	f240 8087 	bls.w	8000576 <__udivmoddi4+0x2c6>
 8000468:	3902      	subs	r1, #2
 800046a:	443d      	add	r5, r7
 800046c:	1aeb      	subs	r3, r5, r3
 800046e:	fa1f f588 	uxth.w	r5, r8
 8000472:	fbb3 f0f2 	udiv	r0, r3, r2
 8000476:	fb02 3310 	mls	r3, r2, r0, r3
 800047a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 800047e:	fb00 f30c 	mul.w	r3, r0, ip
 8000482:	42ab      	cmp	r3, r5
 8000484:	d907      	bls.n	8000496 <__udivmoddi4+0x1e6>
 8000486:	19ed      	adds	r5, r5, r7
 8000488:	f100 38ff 	add.w	r8, r0, #4294967295
 800048c:	d26f      	bcs.n	800056e <__udivmoddi4+0x2be>
 800048e:	42ab      	cmp	r3, r5
 8000490:	d96d      	bls.n	800056e <__udivmoddi4+0x2be>
 8000492:	3802      	subs	r0, #2
 8000494:	443d      	add	r5, r7
 8000496:	1aeb      	subs	r3, r5, r3
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	e78f      	b.n	80003be <__udivmoddi4+0x10e>
 800049e:	f1c1 0720 	rsb	r7, r1, #32
 80004a2:	fa22 f807 	lsr.w	r8, r2, r7
 80004a6:	408b      	lsls	r3, r1
 80004a8:	fa05 f401 	lsl.w	r4, r5, r1
 80004ac:	ea48 0303 	orr.w	r3, r8, r3
 80004b0:	fa20 fe07 	lsr.w	lr, r0, r7
 80004b4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 80004b8:	40fd      	lsrs	r5, r7
 80004ba:	ea4e 0e04 	orr.w	lr, lr, r4
 80004be:	fbb5 f9fc 	udiv	r9, r5, ip
 80004c2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 80004c6:	fb0c 5519 	mls	r5, ip, r9, r5
 80004ca:	fa1f f883 	uxth.w	r8, r3
 80004ce:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 80004d2:	fb09 f408 	mul.w	r4, r9, r8
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	fa02 f201 	lsl.w	r2, r2, r1
 80004dc:	fa00 fa01 	lsl.w	sl, r0, r1
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x244>
 80004e2:	18ed      	adds	r5, r5, r3
 80004e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e8:	d243      	bcs.n	8000572 <__udivmoddi4+0x2c2>
 80004ea:	42ac      	cmp	r4, r5
 80004ec:	d941      	bls.n	8000572 <__udivmoddi4+0x2c2>
 80004ee:	f1a9 0902 	sub.w	r9, r9, #2
 80004f2:	441d      	add	r5, r3
 80004f4:	1b2d      	subs	r5, r5, r4
 80004f6:	fa1f fe8e 	uxth.w	lr, lr
 80004fa:	fbb5 f0fc 	udiv	r0, r5, ip
 80004fe:	fb0c 5510 	mls	r5, ip, r0, r5
 8000502:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000506:	fb00 f808 	mul.w	r8, r0, r8
 800050a:	45a0      	cmp	r8, r4
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x26e>
 800050e:	18e4      	adds	r4, r4, r3
 8000510:	f100 35ff 	add.w	r5, r0, #4294967295
 8000514:	d229      	bcs.n	800056a <__udivmoddi4+0x2ba>
 8000516:	45a0      	cmp	r8, r4
 8000518:	d927      	bls.n	800056a <__udivmoddi4+0x2ba>
 800051a:	3802      	subs	r0, #2
 800051c:	441c      	add	r4, r3
 800051e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000522:	eba4 0408 	sub.w	r4, r4, r8
 8000526:	fba0 8902 	umull	r8, r9, r0, r2
 800052a:	454c      	cmp	r4, r9
 800052c:	46c6      	mov	lr, r8
 800052e:	464d      	mov	r5, r9
 8000530:	d315      	bcc.n	800055e <__udivmoddi4+0x2ae>
 8000532:	d012      	beq.n	800055a <__udivmoddi4+0x2aa>
 8000534:	b156      	cbz	r6, 800054c <__udivmoddi4+0x29c>
 8000536:	ebba 030e 	subs.w	r3, sl, lr
 800053a:	eb64 0405 	sbc.w	r4, r4, r5
 800053e:	fa04 f707 	lsl.w	r7, r4, r7
 8000542:	40cb      	lsrs	r3, r1
 8000544:	431f      	orrs	r7, r3
 8000546:	40cc      	lsrs	r4, r1
 8000548:	6037      	str	r7, [r6, #0]
 800054a:	6074      	str	r4, [r6, #4]
 800054c:	2100      	movs	r1, #0
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	4618      	mov	r0, r3
 8000554:	e6f8      	b.n	8000348 <__udivmoddi4+0x98>
 8000556:	4690      	mov	r8, r2
 8000558:	e6e0      	b.n	800031c <__udivmoddi4+0x6c>
 800055a:	45c2      	cmp	sl, r8
 800055c:	d2ea      	bcs.n	8000534 <__udivmoddi4+0x284>
 800055e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000562:	eb69 0503 	sbc.w	r5, r9, r3
 8000566:	3801      	subs	r0, #1
 8000568:	e7e4      	b.n	8000534 <__udivmoddi4+0x284>
 800056a:	4628      	mov	r0, r5
 800056c:	e7d7      	b.n	800051e <__udivmoddi4+0x26e>
 800056e:	4640      	mov	r0, r8
 8000570:	e791      	b.n	8000496 <__udivmoddi4+0x1e6>
 8000572:	4681      	mov	r9, r0
 8000574:	e7be      	b.n	80004f4 <__udivmoddi4+0x244>
 8000576:	4601      	mov	r1, r0
 8000578:	e778      	b.n	800046c <__udivmoddi4+0x1bc>
 800057a:	3802      	subs	r0, #2
 800057c:	443c      	add	r4, r7
 800057e:	e745      	b.n	800040c <__udivmoddi4+0x15c>
 8000580:	4608      	mov	r0, r1
 8000582:	e708      	b.n	8000396 <__udivmoddi4+0xe6>
 8000584:	f1a8 0802 	sub.w	r8, r8, #2
 8000588:	443d      	add	r5, r7
 800058a:	e72b      	b.n	80003e4 <__udivmoddi4+0x134>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t i = 10;
 8000596:	230a      	movs	r3, #10
 8000598:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059a:	f000 fd07 	bl	8000fac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800059e:	f000 f82b 	bl	80005f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a2:	f000 f923 	bl	80007ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005a6:	f000 f8c1 	bl	800072c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80005aa:	f000 f8ef 	bl	800078c <MX_USART3_UART_Init>
  MX_CRC_Init();
 80005ae:	f000 f89b 	bl	80006e8 <MX_CRC_Init>
  /* USER CODE BEGIN 2 */
 do
 {
	  if(start_bootloader_flag == 1)
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <main+0x5c>)
 80005b4:	781b      	ldrb	r3, [r3, #0]
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	2b01      	cmp	r3, #1
 80005ba:	d107      	bne.n	80005cc <main+0x3c>
	  {
		  printmsg("BL_DEBUG_MSG : Button is pressed..., Going to Bootloader Mode \r\n");
 80005bc:	480c      	ldr	r0, [pc, #48]	; (80005f0 <main+0x60>)
 80005be:	f000 f985 	bl	80008cc <printmsg>
		  bootloader_uart_readData();
 80005c2:	f000 f9a9 	bl	8000918 <bootloader_uart_readData>
		  start_bootloader_flag =0;
 80005c6:	4b09      	ldr	r3, [pc, #36]	; (80005ec <main+0x5c>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	701a      	strb	r2, [r3, #0]
	  }
	  HAL_Delay(6000);
 80005cc:	f241 7070 	movw	r0, #6000	; 0x1770
 80005d0:	f000 fd68 	bl	80010a4 <HAL_Delay>
	  i--;
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]
  }while(i);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1e8      	bne.n	80005b2 <main+0x22>


	  printmsg("BL_DEBUG_MSG: Button is not pressed ..., Jumping to User applications \r\n");
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <main+0x64>)
 80005e2:	f000 f973 	bl	80008cc <printmsg>
	  bootloader_jump_UserApp();
 80005e6:	f000 fa0f 	bl	8000a08 <bootloader_jump_UserApp>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005ea:	e7fe      	b.n	80005ea <main+0x5a>
 80005ec:	2000008c 	.word	0x2000008c
 80005f0:	080048d4 	.word	0x080048d4
 80005f4:	08004918 	.word	0x08004918

080005f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b0b8      	sub	sp, #224	; 0xe0
 80005fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005fe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000602:	2244      	movs	r2, #68	; 0x44
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fd34 	bl	8004074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800060c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000610:	2200      	movs	r2, #0
 8000612:	601a      	str	r2, [r3, #0]
 8000614:	605a      	str	r2, [r3, #4]
 8000616:	609a      	str	r2, [r3, #8]
 8000618:	60da      	str	r2, [r3, #12]
 800061a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800061c:	463b      	mov	r3, r7
 800061e:	2288      	movs	r2, #136	; 0x88
 8000620:	2100      	movs	r1, #0
 8000622:	4618      	mov	r0, r3
 8000624:	f003 fd26 	bl	8004074 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000632:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000636:	2310      	movs	r3, #16
 8000638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800063c:	2302      	movs	r3, #2
 800063e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000642:	2302      	movs	r3, #2
 8000644:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000648:	2301      	movs	r3, #1
 800064a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 800064e:	230a      	movs	r3, #10
 8000650:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000654:	2307      	movs	r3, #7
 8000656:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800065a:	2302      	movs	r3, #2
 800065c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000660:	2302      	movs	r3, #2
 8000662:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000666:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800066a:	4618      	mov	r0, r3
 800066c:	f001 faca 	bl	8001c04 <HAL_RCC_OscConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000676:	f000 fb1d 	bl	8000cb4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800067a:	230f      	movs	r3, #15
 800067c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000680:	2303      	movs	r3, #3
 8000682:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000686:	2300      	movs	r3, #0
 8000688:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800068c:	2300      	movs	r3, #0
 800068e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000698:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800069c:	2104      	movs	r1, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fe96 	bl	80023d0 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80006aa:	f000 fb03 	bl	8000cb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_USART3;
 80006ae:	2306      	movs	r3, #6
 80006b0:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006b2:	2300      	movs	r3, #0
 80006b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80006b6:	2300      	movs	r3, #0
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4618      	mov	r0, r3
 80006be:	f002 f88b 	bl	80027d8 <HAL_RCCEx_PeriphCLKConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006c8:	f000 faf4 	bl	8000cb4 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006cc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006d0:	f001 fa42 	bl	8001b58 <HAL_PWREx_ControlVoltageScaling>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006da:	f000 faeb 	bl	8000cb4 <Error_Handler>
  }
}
 80006de:	bf00      	nop
 80006e0:	37e0      	adds	r7, #224	; 0xe0
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
	...

080006e8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <MX_CRC_Init+0x3c>)
 80006ee:	4a0e      	ldr	r2, [pc, #56]	; (8000728 <MX_CRC_Init+0x40>)
 80006f0:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_CRC_Init+0x3c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <MX_CRC_Init+0x3c>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_CRC_Init+0x3c>)
 8000700:	2200      	movs	r2, #0
 8000702:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <MX_CRC_Init+0x3c>)
 8000706:	2200      	movs	r2, #0
 8000708:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <MX_CRC_Init+0x3c>)
 800070c:	2201      	movs	r2, #1
 800070e:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000710:	4804      	ldr	r0, [pc, #16]	; (8000724 <MX_CRC_Init+0x3c>)
 8000712:	f000 fdf9 	bl	8001308 <HAL_CRC_Init>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 800071c:	f000 faca 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000720:	bf00      	nop
 8000722:	bd80      	pop	{r7, pc}
 8000724:	2000011c 	.word	0x2000011c
 8000728:	40023000 	.word	0x40023000

0800072c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000730:	4b14      	ldr	r3, [pc, #80]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000732:	4a15      	ldr	r2, [pc, #84]	; (8000788 <MX_USART2_UART_Init+0x5c>)
 8000734:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000736:	4b13      	ldr	r3, [pc, #76]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000738:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800073c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800073e:	4b11      	ldr	r3, [pc, #68]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000744:	4b0f      	ldr	r3, [pc, #60]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800074a:	4b0e      	ldr	r3, [pc, #56]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800074c:	2200      	movs	r2, #0
 800074e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000752:	220c      	movs	r2, #12
 8000754:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000756:	4b0b      	ldr	r3, [pc, #44]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000758:	2200      	movs	r2, #0
 800075a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800075e:	2200      	movs	r2, #0
 8000760:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000762:	4b08      	ldr	r3, [pc, #32]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000764:	2200      	movs	r2, #0
 8000766:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <MX_USART2_UART_Init+0x58>)
 800076a:	2200      	movs	r2, #0
 800076c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800076e:	4805      	ldr	r0, [pc, #20]	; (8000784 <MX_USART2_UART_Init+0x58>)
 8000770:	f002 fce2 	bl	8003138 <HAL_UART_Init>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800077a:	f000 fa9b 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	20000140 	.word	0x20000140
 8000788:	40004400 	.word	0x40004400

0800078c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000790:	4b14      	ldr	r3, [pc, #80]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 8000792:	4a15      	ldr	r2, [pc, #84]	; (80007e8 <MX_USART3_UART_Init+0x5c>)
 8000794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000796:	4b13      	ldr	r3, [pc, #76]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 8000798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800079c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800079e:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007a4:	4b0f      	ldr	r3, [pc, #60]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007b0:	4b0c      	ldr	r3, [pc, #48]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007b2:	220c      	movs	r2, #12
 80007b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b6:	4b0b      	ldr	r3, [pc, #44]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007bc:	4b09      	ldr	r3, [pc, #36]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007be:	2200      	movs	r2, #0
 80007c0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c2:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b06      	ldr	r3, [pc, #24]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007ce:	4805      	ldr	r0, [pc, #20]	; (80007e4 <MX_USART3_UART_Init+0x58>)
 80007d0:	f002 fcb2 	bl	8003138 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007da:	f000 fa6b 	bl	8000cb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007de:	bf00      	nop
 80007e0:	bd80      	pop	{r7, pc}
 80007e2:	bf00      	nop
 80007e4:	2000009c 	.word	0x2000009c
 80007e8:	40004800 	.word	0x40004800

080007ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b08a      	sub	sp, #40	; 0x28
 80007f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f2:	f107 0314 	add.w	r3, r7, #20
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000802:	4a2f      	ldr	r2, [pc, #188]	; (80008c0 <MX_GPIO_Init+0xd4>)
 8000804:	4b2e      	ldr	r3, [pc, #184]	; (80008c0 <MX_GPIO_Init+0xd4>)
 8000806:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000808:	f043 0304 	orr.w	r3, r3, #4
 800080c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800080e:	4b2c      	ldr	r3, [pc, #176]	; (80008c0 <MX_GPIO_Init+0xd4>)
 8000810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000812:	f003 0304 	and.w	r3, r3, #4
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800081a:	4a29      	ldr	r2, [pc, #164]	; (80008c0 <MX_GPIO_Init+0xd4>)
 800081c:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <MX_GPIO_Init+0xd4>)
 800081e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000820:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000826:	4b26      	ldr	r3, [pc, #152]	; (80008c0 <MX_GPIO_Init+0xd4>)
 8000828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	4a23      	ldr	r2, [pc, #140]	; (80008c0 <MX_GPIO_Init+0xd4>)
 8000834:	4b22      	ldr	r3, [pc, #136]	; (80008c0 <MX_GPIO_Init+0xd4>)
 8000836:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000838:	f043 0301 	orr.w	r3, r3, #1
 800083c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800083e:	4b20      	ldr	r3, [pc, #128]	; (80008c0 <MX_GPIO_Init+0xd4>)
 8000840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4a1d      	ldr	r2, [pc, #116]	; (80008c0 <MX_GPIO_Init+0xd4>)
 800084c:	4b1c      	ldr	r3, [pc, #112]	; (80008c0 <MX_GPIO_Init+0xd4>)
 800084e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000850:	f043 0302 	orr.w	r3, r3, #2
 8000854:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <MX_GPIO_Init+0xd4>)
 8000858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085a:	f003 0302 	and.w	r3, r3, #2
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2120      	movs	r1, #32
 8000866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800086a:	f001 f92b 	bl	8001ac4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800086e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000874:	4b13      	ldr	r3, [pc, #76]	; (80008c4 <MX_GPIO_Init+0xd8>)
 8000876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4619      	mov	r1, r3
 8000882:	4811      	ldr	r0, [pc, #68]	; (80008c8 <MX_GPIO_Init+0xdc>)
 8000884:	f000 ff76 	bl	8001774 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000888:	2320      	movs	r3, #32
 800088a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800088c:	2301      	movs	r3, #1
 800088e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000898:	f107 0314 	add.w	r3, r7, #20
 800089c:	4619      	mov	r1, r3
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f000 ff67 	bl	8001774 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2028      	movs	r0, #40	; 0x28
 80008ac:	f000 fcf5 	bl	800129a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008b0:	2028      	movs	r0, #40	; 0x28
 80008b2:	f000 fd0e 	bl	80012d2 <HAL_NVIC_EnableIRQ>

}
 80008b6:	bf00      	nop
 80008b8:	3728      	adds	r7, #40	; 0x28
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40021000 	.word	0x40021000
 80008c4:	10210000 	.word	0x10210000
 80008c8:	48000800 	.word	0x48000800

080008cc <printmsg>:

/* USER CODE BEGIN 4 */

/* prints formatted string to console over UART */
 void printmsg(char *format,...)
 {
 80008cc:	b40f      	push	{r0, r1, r2, r3}
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b096      	sub	sp, #88	; 0x58
 80008d2:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];

	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 80008d4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008d8:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	687a      	ldr	r2, [r7, #4]
 80008e0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80008e2:	4618      	mov	r0, r3
 80008e4:	f003 fbe6 	bl	80040b4 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 80008e8:	f107 0308 	add.w	r3, r7, #8
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fc6f 	bl	80001d0 <strlen>
 80008f2:	4603      	mov	r3, r0
 80008f4:	b29a      	uxth	r2, r3
 80008f6:	f107 0108 	add.w	r1, r7, #8
 80008fa:	f04f 33ff 	mov.w	r3, #4294967295
 80008fe:	4805      	ldr	r0, [pc, #20]	; (8000914 <printmsg+0x48>)
 8000900:	f002 fc68 	bl	80031d4 <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000904:	bf00      	nop
 8000906:	3758      	adds	r7, #88	; 0x58
 8000908:	46bd      	mov	sp, r7
 800090a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800090e:	b004      	add	sp, #16
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	2000009c 	.word	0x2000009c

08000918 <bootloader_uart_readData>:

void  bootloader_uart_readData()
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b082      	sub	sp, #8
 800091c:	af00      	add	r7, sp, #0
	uint8_t rcv_len =0;
 800091e:	2300      	movs	r3, #0
 8000920:	71fb      	strb	r3, [r7, #7]

	while(1)
	{
		memset(bl_rx_buffer, 0, 200);
 8000922:	22c8      	movs	r2, #200	; 0xc8
 8000924:	2100      	movs	r1, #0
 8000926:	4835      	ldr	r0, [pc, #212]	; (80009fc <bootloader_uart_readData+0xe4>)
 8000928:	f003 fba4 	bl	8004074 <memset>
		//here we will read and decode the commands coming from host
		//first read only one byte from the host, which is the "length" field of the command packet
		HAL_UART_Receive(C_UART, bl_rx_buffer,1, HAL_MAX_DELAY);
 800092c:	f04f 33ff 	mov.w	r3, #4294967295
 8000930:	2201      	movs	r2, #1
 8000932:	4932      	ldr	r1, [pc, #200]	; (80009fc <bootloader_uart_readData+0xe4>)
 8000934:	4832      	ldr	r0, [pc, #200]	; (8000a00 <bootloader_uart_readData+0xe8>)
 8000936:	f002 fce0 	bl	80032fa <HAL_UART_Receive>
		rcv_len = bl_rx_buffer[0];
 800093a:	4b30      	ldr	r3, [pc, #192]	; (80009fc <bootloader_uart_readData+0xe4>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	71fb      	strb	r3, [r7, #7]
		HAL_UART_Receive(C_UART, (uint8_t *) &bl_rx_buffer,rcv_len,HAL_MAX_DELAY);
 8000940:	79fb      	ldrb	r3, [r7, #7]
 8000942:	b29a      	uxth	r2, r3
 8000944:	f04f 33ff 	mov.w	r3, #4294967295
 8000948:	492c      	ldr	r1, [pc, #176]	; (80009fc <bootloader_uart_readData+0xe4>)
 800094a:	482d      	ldr	r0, [pc, #180]	; (8000a00 <bootloader_uart_readData+0xe8>)
 800094c:	f002 fcd5 	bl	80032fa <HAL_UART_Receive>

		switch(bl_rx_buffer[1])
 8000950:	4b2a      	ldr	r3, [pc, #168]	; (80009fc <bootloader_uart_readData+0xe4>)
 8000952:	785b      	ldrb	r3, [r3, #1]
 8000954:	3b51      	subs	r3, #81	; 0x51
 8000956:	2b0b      	cmp	r3, #11
 8000958:	d84a      	bhi.n	80009f0 <bootloader_uart_readData+0xd8>
 800095a:	a201      	add	r2, pc, #4	; (adr r2, 8000960 <bootloader_uart_readData+0x48>)
 800095c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000960:	08000991 	.word	0x08000991
 8000964:	08000999 	.word	0x08000999
 8000968:	080009a1 	.word	0x080009a1
 800096c:	080009a9 	.word	0x080009a9
 8000970:	080009b1 	.word	0x080009b1
 8000974:	080009b9 	.word	0x080009b9
 8000978:	080009c1 	.word	0x080009c1
 800097c:	080009c9 	.word	0x080009c9
 8000980:	080009d1 	.word	0x080009d1
 8000984:	080009d9 	.word	0x080009d9
 8000988:	080009e1 	.word	0x080009e1
 800098c:	080009e9 	.word	0x080009e9
		{
		case BL_GET_VER:
			bootloader_handle_getver_cmd(bl_rx_buffer);
 8000990:	481a      	ldr	r0, [pc, #104]	; (80009fc <bootloader_uart_readData+0xe4>)
 8000992:	f000 f891 	bl	8000ab8 <bootloader_handle_getver_cmd>
			break;
 8000996:	e02f      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		case BL_GET_HELP:
			bootloader_handle_gethelp_cmd(bl_rx_buffer);
 8000998:	4818      	ldr	r0, [pc, #96]	; (80009fc <bootloader_uart_readData+0xe4>)
 800099a:	f000 f8d5 	bl	8000b48 <bootloader_handle_gethelp_cmd>
			break;
 800099e:	e02b      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		case BL_GET_CID:
			bootloader_handle_getcid_cmd(bl_rx_buffer);
 80009a0:	4816      	ldr	r0, [pc, #88]	; (80009fc <bootloader_uart_readData+0xe4>)
 80009a2:	f000 f8db 	bl	8000b5c <bootloader_handle_getcid_cmd>
			break;
 80009a6:	e027      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		case BL_GET_RDP_STATUS:
			bootloader_handle_getrdp_cmd(bl_rx_buffer);
 80009a8:	4814      	ldr	r0, [pc, #80]	; (80009fc <bootloader_uart_readData+0xe4>)
 80009aa:	f000 f8e1 	bl	8000b70 <bootloader_handle_getrdp_cmd>
			break;
 80009ae:	e023      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		case BL_GO_TO_ADDR:
			bootloader_handle_go_cmd(bl_rx_buffer);
 80009b0:	4812      	ldr	r0, [pc, #72]	; (80009fc <bootloader_uart_readData+0xe4>)
 80009b2:	f000 f8e7 	bl	8000b84 <bootloader_handle_go_cmd>
			break;
 80009b6:	e01f      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		case BL_FLASH_ERASE:
			bootloader_handle_flash_erase_cmd(bl_rx_buffer);
 80009b8:	4810      	ldr	r0, [pc, #64]	; (80009fc <bootloader_uart_readData+0xe4>)
 80009ba:	f000 f8ed 	bl	8000b98 <bootloader_handle_flash_erase_cmd>
			break;
 80009be:	e01b      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		case BL_MEM_WRITE:
			bootloader_handle_flash_write_cmd(bl_rx_buffer);
 80009c0:	480e      	ldr	r0, [pc, #56]	; (80009fc <bootloader_uart_readData+0xe4>)
 80009c2:	f000 f8f3 	bl	8000bac <bootloader_handle_flash_write_cmd>
			break;
 80009c6:	e017      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		case BL_EN_RW_PROTECT:
			bootloader_handle_en_rw_protect(bl_rx_buffer);
 80009c8:	480c      	ldr	r0, [pc, #48]	; (80009fc <bootloader_uart_readData+0xe4>)
 80009ca:	f000 f903 	bl	8000bd4 <bootloader_handle_en_rw_protect>
			break;
 80009ce:	e013      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		case BL_MEM_READ:
			bootloader_handle_flash_read(bl_rx_buffer);
 80009d0:	480a      	ldr	r0, [pc, #40]	; (80009fc <bootloader_uart_readData+0xe4>)
 80009d2:	f000 f8f5 	bl	8000bc0 <bootloader_handle_flash_read>
			break;
 80009d6:	e00f      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		case BL_READ_SECTOR_P_STATUS:
			bootloader_handle_read_sector_status(bl_rx_buffer);
 80009d8:	4808      	ldr	r0, [pc, #32]	; (80009fc <bootloader_uart_readData+0xe4>)
 80009da:	f000 f905 	bl	8000be8 <bootloader_handle_read_sector_status>
			break;
 80009de:	e00b      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		case BL_OTP_READ:
			bootloader_handle_read_otp(bl_rx_buffer);
 80009e0:	4806      	ldr	r0, [pc, #24]	; (80009fc <bootloader_uart_readData+0xe4>)
 80009e2:	f000 f90b 	bl	8000bfc <bootloader_handle_read_otp>
			break;
 80009e6:	e007      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		case BL_DIS_R_W_PROTECT:
			 bootloader_handle_dis_rw_protect(bl_rx_buffer);
 80009e8:	4804      	ldr	r0, [pc, #16]	; (80009fc <bootloader_uart_readData+0xe4>)
 80009ea:	f000 f911 	bl	8000c10 <bootloader_handle_dis_rw_protect>
			break;
 80009ee:	e003      	b.n	80009f8 <bootloader_uart_readData+0xe0>
		default:
			printmsg("BL_DEBUG_MSG:Invalid command code received from host \n");
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <bootloader_uart_readData+0xec>)
 80009f2:	f7ff ff6b 	bl	80008cc <printmsg>
			break;
 80009f6:	bf00      	nop
		memset(bl_rx_buffer, 0, 200);
 80009f8:	e793      	b.n	8000922 <bootloader_uart_readData+0xa>
 80009fa:	bf00      	nop
 80009fc:	200001c0 	.word	0x200001c0
 8000a00:	20000140 	.word	0x20000140
 8000a04:	08004964 	.word	0x08004964

08000a08 <bootloader_jump_UserApp>:
	}

}

void bootloader_jump_UserApp()
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0

	//just a function pointer address to hold the address of the reset handler of the user app
	void (*app_reset_handler)();

	printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");
 8000a0e:	480f      	ldr	r0, [pc, #60]	; (8000a4c <bootloader_jump_UserApp+0x44>)
 8000a10:	f7ff ff5c 	bl	80008cc <printmsg>

	 // 1. configure the MSP by reading the value from the base address of the sector 16
	int32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR2_BASE_ADDRESS;
 8000a14:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <bootloader_jump_UserApp+0x48>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	60fb      	str	r3, [r7, #12]
	printmsg("BL_DEBUG_MSG:MSP value : %#x\n",msp_value);
 8000a1a:	68f9      	ldr	r1, [r7, #12]
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <bootloader_jump_UserApp+0x4c>)
 8000a1e:	f7ff ff55 	bl	80008cc <printmsg>


	//This function comes from CMSIS.
	__set_MSP(msp_value);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f383 8808 	msr	MSP, r3
	//SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR2_BASE_ADDRESS + 4);
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <bootloader_jump_UserApp+0x50>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*) resethandler_address;
 8000a32:	68bb      	ldr	r3, [r7, #8]
 8000a34:	607b      	str	r3, [r7, #4]

	printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);
 8000a36:	6879      	ldr	r1, [r7, #4]
 8000a38:	4808      	ldr	r0, [pc, #32]	; (8000a5c <bootloader_jump_UserApp+0x54>)
 8000a3a:	f7ff ff47 	bl	80008cc <printmsg>

	//3. jump to reset handler of the user application
	app_reset_handler();
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4798      	blx	r3

}
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	0800499c 	.word	0x0800499c
 8000a50:	08008000 	.word	0x08008000
 8000a54:	080049c8 	.word	0x080049c8
 8000a58:	08008004 	.word	0x08008004
 8000a5c:	080049e8 	.word	0x080049e8

08000a60 <bootloader_send_nack>:


void bootloader_send_nack(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
	uint8_t nack = BL_NACK;
 8000a66:	237f      	movs	r3, #127	; 0x7f
 8000a68:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(C_UART,&nack, 1 , HAL_MAX_DELAY );
 8000a6a:	1df9      	adds	r1, r7, #7
 8000a6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000a70:	2201      	movs	r2, #1
 8000a72:	4803      	ldr	r0, [pc, #12]	; (8000a80 <bootloader_send_nack+0x20>)
 8000a74:	f002 fbae 	bl	80031d4 <HAL_UART_Transmit>

}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	20000140 	.word	0x20000140

08000a84 <bootloader_send_ack>:

void bootloader_send_ack(uint8_t command_code, uint8_t follow_len)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b084      	sub	sp, #16
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	460a      	mov	r2, r1
 8000a8e:	71fb      	strb	r3, [r7, #7]
 8000a90:	4613      	mov	r3, r2
 8000a92:	71bb      	strb	r3, [r7, #6]
  //here we send 2byte.. first is ack and the second byte is len value
	uint8_t ack_buf[2];

	ack_buf[0] = BL_ACK;
 8000a94:	23a5      	movs	r3, #165	; 0xa5
 8000a96:	733b      	strb	r3, [r7, #12]
	ack_buf[1] = follow_len;
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	737b      	strb	r3, [r7, #13]
	HAL_UART_Transmit(C_UART, ack_buf, 2, HAL_MAX_DELAY);
 8000a9c:	f107 010c 	add.w	r1, r7, #12
 8000aa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	4803      	ldr	r0, [pc, #12]	; (8000ab4 <bootloader_send_ack+0x30>)
 8000aa8:	f002 fb94 	bl	80031d4 <HAL_UART_Transmit>

}
 8000aac:	bf00      	nop
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	20000140 	.word	0x20000140

08000ab8 <bootloader_handle_getver_cmd>:

/*Helper functions to handle BL_GET_VER command */
void bootloader_handle_getver_cmd(uint8_t *bl_rx_buffer)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	uint8_t bl_version;
	uint32_t host_crc;

	//1) Verify the checksum
	printmsg("BL_DEBUG_MSG:bootloader handle_getver_cmd \r\n");
 8000ac0:	481d      	ldr	r0, [pc, #116]	; (8000b38 <bootloader_handle_getver_cmd+0x80>)
 8000ac2:	f7ff ff03 	bl	80008cc <printmsg>

	//Total lenghth of the command packet
	uint32_t command_packet_len = bl_rx_buffer[0]+1;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	3301      	adds	r3, #1
 8000acc:	617b      	str	r3, [r7, #20]

	//extract the crc32 sent by the host
	 host_crc = *((uint32_t *) (bl_rx_buffer+command_packet_len-4));
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	3b04      	subs	r3, #4
 8000ad2:	687a      	ldr	r2, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	613b      	str	r3, [r7, #16]

	if(!bootloader_verify_crc(&bl_rx_buffer[0],command_packet_len-4, host_crc ))
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	3b04      	subs	r3, #4
 8000ade:	693a      	ldr	r2, [r7, #16]
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	6878      	ldr	r0, [r7, #4]
 8000ae4:	f000 f89e 	bl	8000c24 <bootloader_verify_crc>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d11a      	bne.n	8000b24 <bootloader_handle_getver_cmd+0x6c>
	{
		printmsg("BL_DEBUG_MSG : Checksum success !! \r\n");
 8000aee:	4813      	ldr	r0, [pc, #76]	; (8000b3c <bootloader_handle_getver_cmd+0x84>)
 8000af0:	f7ff feec 	bl	80008cc <printmsg>
		//checksum is correct
		bootloader_send_ack(bl_rx_buffer[0],1);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	2101      	movs	r1, #1
 8000afa:	4618      	mov	r0, r3
 8000afc:	f7ff ffc2 	bl	8000a84 <bootloader_send_ack>
		bl_version = get_bootloader_version();
 8000b00:	f000 f8bc 	bl	8000c7c <get_bootloader_version>
 8000b04:	4603      	mov	r3, r0
 8000b06:	73fb      	strb	r3, [r7, #15]
		printmsg("BL_DEBUG_MSG: BL_ver : %d %#x \r\n", bl_version, bl_version);
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	7bfb      	ldrb	r3, [r7, #15]
 8000b0e:	461a      	mov	r2, r3
 8000b10:	480b      	ldr	r0, [pc, #44]	; (8000b40 <bootloader_handle_getver_cmd+0x88>)
 8000b12:	f7ff fedb 	bl	80008cc <printmsg>
		bootloader_uart_write_data(&bl_version,1);
 8000b16:	f107 030f 	add.w	r3, r7, #15
 8000b1a:	2101      	movs	r1, #1
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 f8b5 	bl	8000c8c <bootloader_uart_write_data>
		printmsg("BL_DEBUG_MSG: Checksum Fail !! \r\n");
		//checksum is wrong & send nack to host
		bootloader_send_nack();
	}

}
 8000b22:	e004      	b.n	8000b2e <bootloader_handle_getver_cmd+0x76>
		printmsg("BL_DEBUG_MSG: Checksum Fail !! \r\n");
 8000b24:	4807      	ldr	r0, [pc, #28]	; (8000b44 <bootloader_handle_getver_cmd+0x8c>)
 8000b26:	f7ff fed1 	bl	80008cc <printmsg>
		bootloader_send_nack();
 8000b2a:	f7ff ff99 	bl	8000a60 <bootloader_send_nack>
}
 8000b2e:	bf00      	nop
 8000b30:	3718      	adds	r7, #24
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	08004a14 	.word	0x08004a14
 8000b3c:	08004a44 	.word	0x08004a44
 8000b40:	08004a6c 	.word	0x08004a6c
 8000b44:	08004a90 	.word	0x08004a90

08000b48 <bootloader_handle_gethelp_cmd>:

/*Helper functions to handle BL_GET_HELP command */
void bootloader_handle_gethelp_cmd(uint8_t *pbuffer)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <bootloader_handle_getcid_cmd>:

/*Helper functions to handle BL_GET_CID command */
void bootloader_handle_getcid_cmd(uint8_t *pbuffer)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]

}
 8000b64:	bf00      	nop
 8000b66:	370c      	adds	r7, #12
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6e:	4770      	bx	lr

08000b70 <bootloader_handle_getrdp_cmd>:
void bootloader_handle_getrdp_cmd(uint8_t *pbuffer)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b083      	sub	sp, #12
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

}
 8000b78:	bf00      	nop
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr

08000b84 <bootloader_handle_go_cmd>:
void bootloader_handle_go_cmd(uint8_t *pbuffer)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]

}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr

08000b98 <bootloader_handle_flash_erase_cmd>:
void bootloader_handle_flash_erase_cmd(uint8_t *pbuffer)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]

}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <bootloader_handle_flash_write_cmd>:
void bootloader_handle_flash_write_cmd(uint8_t *pbuffer)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]

}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <bootloader_handle_flash_read>:

void bootloader_handle_flash_read(uint8_t *pbuffer)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]

}
 8000bc8:	bf00      	nop
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <bootloader_handle_en_rw_protect>:

void bootloader_handle_en_rw_protect(uint8_t *pbuffer)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

}
 8000bdc:	bf00      	nop
 8000bde:	370c      	adds	r7, #12
 8000be0:	46bd      	mov	sp, r7
 8000be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be6:	4770      	bx	lr

08000be8 <bootloader_handle_read_sector_status>:
void bootloader_handle_read_sector_status(uint8_t *pbuffer)
{
 8000be8:	b480      	push	{r7}
 8000bea:	b083      	sub	sp, #12
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]

}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <bootloader_handle_read_otp>:

void bootloader_handle_read_otp(uint8_t *pbuffer)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]

}
 8000c04:	bf00      	nop
 8000c06:	370c      	adds	r7, #12
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <bootloader_handle_dis_rw_protect>:

void bootloader_handle_dis_rw_protect(uint8_t *pBuffer)
{
 8000c10:	b480      	push	{r7}
 8000c12:	b083      	sub	sp, #12
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]

}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr

08000c24 <bootloader_verify_crc>:

uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len,uint32_t crc_host)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xff;
 8000c30:	23ff      	movs	r3, #255	; 0xff
 8000c32:	61fb      	str	r3, [r7, #28]
	uint32_t i, i_data;

	for(i=0; i < len ;i++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	61bb      	str	r3, [r7, #24]
 8000c38:	e00f      	b.n	8000c5a <bootloader_verify_crc+0x36>
	{
		i_data = pData[i] ;
 8000c3a:	68fa      	ldr	r2, [r7, #12]
 8000c3c:	69bb      	ldr	r3, [r7, #24]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000c44:	f107 0314 	add.w	r3, r7, #20
 8000c48:	2201      	movs	r2, #1
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480a      	ldr	r0, [pc, #40]	; (8000c78 <bootloader_verify_crc+0x54>)
 8000c4e:	f000 fbbf 	bl	80013d0 <HAL_CRC_Accumulate>
 8000c52:	61f8      	str	r0, [r7, #28]
	for(i=0; i < len ;i++)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	3301      	adds	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	69ba      	ldr	r2, [r7, #24]
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	429a      	cmp	r2, r3
 8000c60:	d3eb      	bcc.n	8000c3a <bootloader_verify_crc+0x16>
	}

	if(uwCRCValue == crc_host)
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d101      	bne.n	8000c6e <bootloader_verify_crc+0x4a>
	{
		return VERIFY_CRC_SUCCESS;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <bootloader_verify_crc+0x4c>
	}

	return VERIFY_CRC_FAIL;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000011c 	.word	0x2000011c

08000c7c <get_bootloader_version>:

uint8_t get_bootloader_version(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
	return (uint8_t)BL_VERSION;
 8000c80:	2310      	movs	r3, #16

}
 8000c82:	4618      	mov	r0, r3
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <bootloader_uart_write_data>:

//This functions writes data in to UART */
void bootloader_uart_write_data(uint8_t *pBuffer,uint32_t len)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
	/* you can replace the below ST's USART driver API call with our MCU Driver */
	HAL_UART_Transmit(C_UART, pBuffer,len, HAL_MAX_DELAY);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <bootloader_uart_write_data+0x24>)
 8000ca2:	f002 fa97 	bl	80031d4 <HAL_UART_Transmit>

}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000140 	.word	0x20000140

08000cb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cb8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cba:	e7fe      	b.n	8000cba <Error_Handler+0x6>

08000cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc2:	4a0f      	ldr	r2, [pc, #60]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc4:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_MspInit+0x44>)
 8000cc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <HAL_MspInit+0x44>)
 8000cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cd2:	f003 0301 	and.w	r3, r3, #1
 8000cd6:	607b      	str	r3, [r7, #4]
 8000cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cda:	4a09      	ldr	r2, [pc, #36]	; (8000d00 <HAL_MspInit+0x44>)
 8000cdc:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_MspInit+0x44>)
 8000cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ce6:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_MspInit+0x44>)
 8000ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	; (8000d3c <HAL_CRC_MspInit+0x38>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d10b      	bne.n	8000d2e <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_CRC_MspInit+0x3c>)
 8000d18:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_CRC_MspInit+0x3c>)
 8000d1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d20:	6493      	str	r3, [r2, #72]	; 0x48
 8000d22:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <HAL_CRC_MspInit+0x3c>)
 8000d24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d2e:	bf00      	nop
 8000d30:	3714      	adds	r7, #20
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40023000 	.word	0x40023000
 8000d40:	40021000 	.word	0x40021000

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08c      	sub	sp, #48	; 0x30
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 031c 	add.w	r3, r7, #28
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a37      	ldr	r2, [pc, #220]	; (8000e40 <HAL_UART_MspInit+0xfc>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d131      	bne.n	8000dca <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d66:	4a37      	ldr	r2, [pc, #220]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000d68:	4b36      	ldr	r3, [pc, #216]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d70:	6593      	str	r3, [r2, #88]	; 0x58
 8000d72:	4b34      	ldr	r3, [pc, #208]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d7a:	61bb      	str	r3, [r7, #24]
 8000d7c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7e:	4a31      	ldr	r2, [pc, #196]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000d80:	4b30      	ldr	r3, [pc, #192]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000d82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d84:	f043 0301 	orr.w	r3, r3, #1
 8000d88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d8a:	4b2e      	ldr	r3, [pc, #184]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d8e:	f003 0301 	and.w	r3, r3, #1
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d96:	230c      	movs	r3, #12
 8000d98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da2:	2303      	movs	r3, #3
 8000da4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000da6:	2307      	movs	r3, #7
 8000da8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000daa:	f107 031c 	add.w	r3, r7, #28
 8000dae:	4619      	mov	r1, r3
 8000db0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db4:	f000 fcde 	bl	8001774 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	2026      	movs	r0, #38	; 0x26
 8000dbe:	f000 fa6c 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000dc2:	2026      	movs	r0, #38	; 0x26
 8000dc4:	f000 fa85 	bl	80012d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dc8:	e035      	b.n	8000e36 <HAL_UART_MspInit+0xf2>
  else if(huart->Instance==USART3)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4a1e      	ldr	r2, [pc, #120]	; (8000e48 <HAL_UART_MspInit+0x104>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d130      	bne.n	8000e36 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dd4:	4a1b      	ldr	r2, [pc, #108]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000dd6:	4b1b      	ldr	r3, [pc, #108]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dda:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000dde:	6593      	str	r3, [r2, #88]	; 0x58
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dec:	4a15      	ldr	r2, [pc, #84]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000dee:	4b15      	ldr	r3, [pc, #84]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df2:	f043 0304 	orr.w	r3, r3, #4
 8000df6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_UART_MspInit+0x100>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Debug_uart_tx_Pin|Debug_uart_rx_Pin;
 8000e04:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e16:	2307      	movs	r3, #7
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1a:	f107 031c 	add.w	r3, r7, #28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480a      	ldr	r0, [pc, #40]	; (8000e4c <HAL_UART_MspInit+0x108>)
 8000e22:	f000 fca7 	bl	8001774 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2100      	movs	r1, #0
 8000e2a:	2027      	movs	r0, #39	; 0x27
 8000e2c:	f000 fa35 	bl	800129a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000e30:	2027      	movs	r0, #39	; 0x27
 8000e32:	f000 fa4e 	bl	80012d2 <HAL_NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3730      	adds	r7, #48	; 0x30
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	40004400 	.word	0x40004400
 8000e44:	40021000 	.word	0x40021000
 8000e48:	40004800 	.word	0x40004800
 8000e4c:	48000800 	.word	0x48000800

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 f8e2 	bl	8001064 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <USART2_IRQHandler+0x10>)
 8000eaa:	f002 faf3 	bl	8003494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000140 	.word	0x20000140

08000eb8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ebc:	4802      	ldr	r0, [pc, #8]	; (8000ec8 <USART3_IRQHandler+0x10>)
 8000ebe:	f002 fae9 	bl	8003494 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	bd80      	pop	{r7, pc}
 8000ec6:	bf00      	nop
 8000ec8:	2000009c 	.word	0x2000009c

08000ecc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	start_bootloader_flag =1;
 8000ed0:	4b04      	ldr	r3, [pc, #16]	; (8000ee4 <EXTI15_10_IRQHandler+0x18>)
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000ed6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000eda:	f000 fe0b 	bl	8001af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2000008c 	.word	0x2000008c

08000ee8 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b084      	sub	sp, #16
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000ef0:	4b11      	ldr	r3, [pc, #68]	; (8000f38 <_sbrk+0x50>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d102      	bne.n	8000efe <_sbrk+0x16>
		heap_end = &end;
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	; (8000f38 <_sbrk+0x50>)
 8000efa:	4a10      	ldr	r2, [pc, #64]	; (8000f3c <_sbrk+0x54>)
 8000efc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <_sbrk+0x50>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f04:	4b0c      	ldr	r3, [pc, #48]	; (8000f38 <_sbrk+0x50>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4413      	add	r3, r2
 8000f0c:	466a      	mov	r2, sp
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d907      	bls.n	8000f22 <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8000f12:	f003 f885 	bl	8004020 <__errno>
 8000f16:	4602      	mov	r2, r0
 8000f18:	230c      	movs	r3, #12
 8000f1a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f20:	e006      	b.n	8000f30 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f22:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <_sbrk+0x50>)
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	4a03      	ldr	r2, [pc, #12]	; (8000f38 <_sbrk+0x50>)
 8000f2c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f2e:	68fb      	ldr	r3, [r7, #12]
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	20000090 	.word	0x20000090
 8000f3c:	20000290 	.word	0x20000290

08000f40 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f44:	4a17      	ldr	r2, [pc, #92]	; (8000fa4 <SystemInit+0x64>)
 8000f46:	4b17      	ldr	r3, [pc, #92]	; (8000fa4 <SystemInit+0x64>)
 8000f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000f54:	4a14      	ldr	r2, [pc, #80]	; (8000fa8 <SystemInit+0x68>)
 8000f56:	4b14      	ldr	r3, [pc, #80]	; (8000fa8 <SystemInit+0x68>)
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f043 0301 	orr.w	r3, r3, #1
 8000f5e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <SystemInit+0x68>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <SystemInit+0x68>)
 8000f68:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <SystemInit+0x68>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000f70:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000f74:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000f76:	4b0c      	ldr	r3, [pc, #48]	; (8000fa8 <SystemInit+0x68>)
 8000f78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f7c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000f7e:	4a0a      	ldr	r2, [pc, #40]	; (8000fa8 <SystemInit+0x68>)
 8000f80:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <SystemInit+0x68>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f88:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000f8a:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <SystemInit+0x68>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f90:	4b04      	ldr	r3, [pc, #16]	; (8000fa4 <SystemInit+0x64>)
 8000f92:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f96:	609a      	str	r2, [r3, #8]
#endif
}
 8000f98:	bf00      	nop
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000ed00 	.word	0xe000ed00
 8000fa8:	40021000 	.word	0x40021000

08000fac <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb6:	4a0c      	ldr	r2, [pc, #48]	; (8000fe8 <HAL_Init+0x3c>)
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_Init+0x3c>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fc0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc2:	2003      	movs	r0, #3
 8000fc4:	f000 f95e 	bl	8001284 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fc8:	2000      	movs	r0, #0
 8000fca:	f000 f80f 	bl	8000fec <HAL_InitTick>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	71fb      	strb	r3, [r7, #7]
 8000fd8:	e001      	b.n	8000fde <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000fda:	f7ff fe6f 	bl	8000cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fde:	79fb      	ldrb	r3, [r7, #7]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3708      	adds	r7, #8
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40022000 	.word	0x40022000

08000fec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000ff8:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_InitTick+0x6c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d023      	beq.n	8001048 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <HAL_InitTick+0x70>)
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	4b14      	ldr	r3, [pc, #80]	; (8001058 <HAL_InitTick+0x6c>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	4619      	mov	r1, r3
 800100a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800100e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001012:	fbb2 f3f3 	udiv	r3, r2, r3
 8001016:	4618      	mov	r0, r3
 8001018:	f000 f969 	bl	80012ee <HAL_SYSTICK_Config>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10f      	bne.n	8001042 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2b0f      	cmp	r3, #15
 8001026:	d809      	bhi.n	800103c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001028:	2200      	movs	r2, #0
 800102a:	6879      	ldr	r1, [r7, #4]
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	f000 f933 	bl	800129a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001034:	4a0a      	ldr	r2, [pc, #40]	; (8001060 <HAL_InitTick+0x74>)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e007      	b.n	800104c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	73fb      	strb	r3, [r7, #15]
 8001040:	e004      	b.n	800104c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001042:	2301      	movs	r3, #1
 8001044:	73fb      	strb	r3, [r7, #15]
 8001046:	e001      	b.n	800104c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800104c:	7bfb      	ldrb	r3, [r7, #15]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	20000008 	.word	0x20000008
 800105c:	20000000 	.word	0x20000000
 8001060:	20000004 	.word	0x20000004

08001064 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001068:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x20>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	461a      	mov	r2, r3
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_IncTick+0x24>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4413      	add	r3, r2
 8001074:	4a04      	ldr	r2, [pc, #16]	; (8001088 <HAL_IncTick+0x24>)
 8001076:	6013      	str	r3, [r2, #0]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	20000008 	.word	0x20000008
 8001088:	20000288 	.word	0x20000288

0800108c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <HAL_GetTick+0x14>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	4618      	mov	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000288 	.word	0x20000288

080010a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b084      	sub	sp, #16
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010ac:	f7ff ffee 	bl	800108c <HAL_GetTick>
 80010b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b6:	68fb      	ldr	r3, [r7, #12]
 80010b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010bc:	d005      	beq.n	80010ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80010be:	4b09      	ldr	r3, [pc, #36]	; (80010e4 <HAL_Delay+0x40>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	461a      	mov	r2, r3
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4413      	add	r3, r2
 80010c8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010ca:	bf00      	nop
 80010cc:	f7ff ffde 	bl	800108c <HAL_GetTick>
 80010d0:	4602      	mov	r2, r0
 80010d2:	68bb      	ldr	r3, [r7, #8]
 80010d4:	1ad2      	subs	r2, r2, r3
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d3f7      	bcc.n	80010cc <HAL_Delay+0x28>
  {
  }
}
 80010dc:	bf00      	nop
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	20000008 	.word	0x20000008

080010e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010fe:	68ba      	ldr	r2, [r7, #8]
 8001100:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001104:	4013      	ands	r3, r2
 8001106:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800110c:	68bb      	ldr	r3, [r7, #8]
 800110e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001110:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	; (800112c <__NVIC_SetPriorityGrouping+0x44>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001134:	4b04      	ldr	r3, [pc, #16]	; (8001148 <__NVIC_GetPriorityGrouping+0x18>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	0a1b      	lsrs	r3, r3, #8
 800113a:	f003 0307 	and.w	r3, r3, #7
}
 800113e:	4618      	mov	r0, r3
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	2b00      	cmp	r3, #0
 800115c:	db0b      	blt.n	8001176 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800115e:	4909      	ldr	r1, [pc, #36]	; (8001184 <__NVIC_EnableIRQ+0x38>)
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	095b      	lsrs	r3, r3, #5
 8001166:	79fa      	ldrb	r2, [r7, #7]
 8001168:	f002 021f 	and.w	r2, r2, #31
 800116c:	2001      	movs	r0, #1
 800116e:	fa00 f202 	lsl.w	r2, r0, r2
 8001172:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	e000e100 	.word	0xe000e100

08001188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001198:	2b00      	cmp	r3, #0
 800119a:	db0a      	blt.n	80011b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800119c:	490d      	ldr	r1, [pc, #52]	; (80011d4 <__NVIC_SetPriority+0x4c>)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	b2d2      	uxtb	r2, r2
 80011a6:	0112      	lsls	r2, r2, #4
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	440b      	add	r3, r1
 80011ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b0:	e00a      	b.n	80011c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b2:	4909      	ldr	r1, [pc, #36]	; (80011d8 <__NVIC_SetPriority+0x50>)
 80011b4:	79fb      	ldrb	r3, [r7, #7]
 80011b6:	f003 030f 	and.w	r3, r3, #15
 80011ba:	3b04      	subs	r3, #4
 80011bc:	683a      	ldr	r2, [r7, #0]
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	0112      	lsls	r2, r2, #4
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	440b      	add	r3, r1
 80011c6:	761a      	strb	r2, [r3, #24]
}
 80011c8:	bf00      	nop
 80011ca:	370c      	adds	r7, #12
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr
 80011d4:	e000e100 	.word	0xe000e100
 80011d8:	e000ed00 	.word	0xe000ed00

080011dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b089      	sub	sp, #36	; 0x24
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	60f8      	str	r0, [r7, #12]
 80011e4:	60b9      	str	r1, [r7, #8]
 80011e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	f1c3 0307 	rsb	r3, r3, #7
 80011f6:	2b04      	cmp	r3, #4
 80011f8:	bf28      	it	cs
 80011fa:	2304      	movcs	r3, #4
 80011fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	3304      	adds	r3, #4
 8001202:	2b06      	cmp	r3, #6
 8001204:	d902      	bls.n	800120c <NVIC_EncodePriority+0x30>
 8001206:	69fb      	ldr	r3, [r7, #28]
 8001208:	3b03      	subs	r3, #3
 800120a:	e000      	b.n	800120e <NVIC_EncodePriority+0x32>
 800120c:	2300      	movs	r3, #0
 800120e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001210:	2201      	movs	r2, #1
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	fa02 f303 	lsl.w	r3, r2, r3
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	401a      	ands	r2, r3
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001222:	2101      	movs	r1, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa01 f303 	lsl.w	r3, r1, r3
 800122a:	1e59      	subs	r1, r3, #1
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001230:	4313      	orrs	r3, r2
         );
}
 8001232:	4618      	mov	r0, r3
 8001234:	3724      	adds	r7, #36	; 0x24
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
	...

08001240 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	3b01      	subs	r3, #1
 800124c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001250:	d301      	bcc.n	8001256 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001252:	2301      	movs	r3, #1
 8001254:	e00f      	b.n	8001276 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001256:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <SysTick_Config+0x40>)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	3b01      	subs	r3, #1
 800125c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800125e:	210f      	movs	r1, #15
 8001260:	f04f 30ff 	mov.w	r0, #4294967295
 8001264:	f7ff ff90 	bl	8001188 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <SysTick_Config+0x40>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800126e:	4b04      	ldr	r3, [pc, #16]	; (8001280 <SysTick_Config+0x40>)
 8001270:	2207      	movs	r2, #7
 8001272:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001274:	2300      	movs	r3, #0
}
 8001276:	4618      	mov	r0, r3
 8001278:	3708      	adds	r7, #8
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
 800127e:	bf00      	nop
 8001280:	e000e010 	.word	0xe000e010

08001284 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f7ff ff2b 	bl	80010e8 <__NVIC_SetPriorityGrouping>
}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}

0800129a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800129a:	b580      	push	{r7, lr}
 800129c:	b086      	sub	sp, #24
 800129e:	af00      	add	r7, sp, #0
 80012a0:	4603      	mov	r3, r0
 80012a2:	60b9      	str	r1, [r7, #8]
 80012a4:	607a      	str	r2, [r7, #4]
 80012a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012ac:	f7ff ff40 	bl	8001130 <__NVIC_GetPriorityGrouping>
 80012b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	68b9      	ldr	r1, [r7, #8]
 80012b6:	6978      	ldr	r0, [r7, #20]
 80012b8:	f7ff ff90 	bl	80011dc <NVIC_EncodePriority>
 80012bc:	4602      	mov	r2, r0
 80012be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012c2:	4611      	mov	r1, r2
 80012c4:	4618      	mov	r0, r3
 80012c6:	f7ff ff5f 	bl	8001188 <__NVIC_SetPriority>
}
 80012ca:	bf00      	nop
 80012cc:	3718      	adds	r7, #24
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b082      	sub	sp, #8
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	4603      	mov	r3, r0
 80012da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff ff33 	bl	800114c <__NVIC_EnableIRQ>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b082      	sub	sp, #8
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f7ff ffa2 	bl	8001240 <SysTick_Config>
 80012fc:	4603      	mov	r3, r0
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
	...

08001308 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e054      	b.n	80013c4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	7f5b      	ldrb	r3, [r3, #29]
 800131e:	b2db      	uxtb	r3, r3
 8001320:	2b00      	cmp	r3, #0
 8001322:	d105      	bne.n	8001330 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff fcea 	bl	8000d04 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2202      	movs	r2, #2
 8001334:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10c      	bne.n	8001358 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a22      	ldr	r2, [pc, #136]	; (80013cc <HAL_CRC_Init+0xc4>)
 8001344:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	687a      	ldr	r2, [r7, #4]
 800134c:	6812      	ldr	r2, [r2, #0]
 800134e:	6892      	ldr	r2, [r2, #8]
 8001350:	f022 0218 	bic.w	r2, r2, #24
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	e00c      	b.n	8001372 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6899      	ldr	r1, [r3, #8]
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	461a      	mov	r2, r3
 8001362:	6878      	ldr	r0, [r7, #4]
 8001364:	f000 f93e 	bl	80015e4 <HAL_CRCEx_Polynomial_Set>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 800136e:	2301      	movs	r3, #1
 8001370:	e028      	b.n	80013c4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	795b      	ldrb	r3, [r3, #5]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d105      	bne.n	8001386 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f04f 32ff 	mov.w	r2, #4294967295
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	e004      	b.n	8001390 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	687a      	ldr	r2, [r7, #4]
 800138c:	6912      	ldr	r2, [r2, #16]
 800138e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	687a      	ldr	r2, [r7, #4]
 8001396:	6812      	ldr	r2, [r2, #0]
 8001398:	6892      	ldr	r2, [r2, #8]
 800139a:	f022 0160 	bic.w	r1, r2, #96	; 0x60
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	6952      	ldr	r2, [r2, #20]
 80013a2:	430a      	orrs	r2, r1
 80013a4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	687a      	ldr	r2, [r7, #4]
 80013ac:	6812      	ldr	r2, [r2, #0]
 80013ae:	6892      	ldr	r2, [r2, #8]
 80013b0:	f022 0180 	bic.w	r1, r2, #128	; 0x80
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	6992      	ldr	r2, [r2, #24]
 80013b8:	430a      	orrs	r2, r1
 80013ba:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2201      	movs	r2, #1
 80013c0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80013c2:	2300      	movs	r3, #0
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	04c11db7 	.word	0x04c11db7

080013d0 <HAL_CRC_Accumulate>:
  *        and the API will internally adjust its input data processing based on the
  *        handle field hcrc->InputDataFormat.
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80013dc:	2300      	movs	r3, #0
 80013de:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	2202      	movs	r2, #2
 80013e4:	775a      	strb	r2, [r3, #29]

  switch (hcrc->InputDataFormat)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6a1b      	ldr	r3, [r3, #32]
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d022      	beq.n	8001434 <HAL_CRC_Accumulate+0x64>
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	d002      	beq.n	80013f8 <HAL_CRC_Accumulate+0x28>
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d017      	beq.n	8001426 <HAL_CRC_Accumulate+0x56>

    case CRC_INPUTDATA_FORMAT_HALFWORDS:
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
      break;
    default:
      break;
 80013f6:	e024      	b.n	8001442 <HAL_CRC_Accumulate+0x72>
      for (index = 0U; index < BufferLength; index++)
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
 80013fc:	e00a      	b.n	8001414 <HAL_CRC_Accumulate+0x44>
        hcrc->Instance->DR = pBuffer[index];
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	0092      	lsls	r2, r2, #2
 8001406:	68b9      	ldr	r1, [r7, #8]
 8001408:	440a      	add	r2, r1
 800140a:	6812      	ldr	r2, [r2, #0]
 800140c:	601a      	str	r2, [r3, #0]
      for (index = 0U; index < BufferLength; index++)
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3301      	adds	r3, #1
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697a      	ldr	r2, [r7, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	429a      	cmp	r2, r3
 800141a:	d3f0      	bcc.n	80013fe <HAL_CRC_Accumulate+0x2e>
      temp = hcrc->Instance->DR;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	613b      	str	r3, [r7, #16]
      break;
 8001424:	e00d      	b.n	8001442 <HAL_CRC_Accumulate+0x72>
      temp = CRC_Handle_8(hcrc, (uint8_t *)pBuffer, BufferLength);
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 f811 	bl	8001452 <CRC_Handle_8>
 8001430:	6138      	str	r0, [r7, #16]
      break;
 8001432:	e006      	b.n	8001442 <HAL_CRC_Accumulate+0x72>
      temp = CRC_Handle_16(hcrc, (uint16_t *)(void *)pBuffer, BufferLength);    /* Derogation MisraC2012 R.11.5 */
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	68f8      	ldr	r0, [r7, #12]
 800143a:	f000 f899 	bl	8001570 <CRC_Handle_16>
 800143e:	6138      	str	r0, [r7, #16]
      break;
 8001440:	bf00      	nop
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2201      	movs	r2, #1
 8001446:	775a      	strb	r2, [r3, #29]

  /* Return the CRC computed value */
  return temp;
 8001448:	693b      	ldr	r3, [r7, #16]
}
 800144a:	4618      	mov	r0, r3
 800144c:	3718      	adds	r7, #24
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}

08001452 <CRC_Handle_8>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_8(CRC_HandleTypeDef *hcrc, uint8_t pBuffer[], uint32_t BufferLength)
{
 8001452:	b480      	push	{r7}
 8001454:	b089      	sub	sp, #36	; 0x24
 8001456:	af00      	add	r7, sp, #0
 8001458:	60f8      	str	r0, [r7, #12]
 800145a:	60b9      	str	r1, [r7, #8]
 800145c:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 4 bytes are entered in a row with a single word write,
   * last bytes must be carefully fed to the CRC calculator to ensure a correct type
   * handling by the peripheral */
  for (i = 0U; i < (BufferLength / 4U); i++)
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
 8001462:	e022      	b.n	80014aa <CRC_Handle_8+0x58>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	69fa      	ldr	r2, [r7, #28]
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	68b9      	ldr	r1, [r7, #8]
 800146e:	440a      	add	r2, r1
 8001470:	7812      	ldrb	r2, [r2, #0]
 8001472:	0611      	lsls	r1, r2, #24
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	0092      	lsls	r2, r2, #2
 8001478:	3201      	adds	r2, #1
 800147a:	68b8      	ldr	r0, [r7, #8]
 800147c:	4402      	add	r2, r0
 800147e:	7812      	ldrb	r2, [r2, #0]
 8001480:	0412      	lsls	r2, r2, #16
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 8001482:	4311      	orrs	r1, r2
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 8001484:	69fa      	ldr	r2, [r7, #28]
 8001486:	0092      	lsls	r2, r2, #2
 8001488:	3202      	adds	r2, #2
 800148a:	68b8      	ldr	r0, [r7, #8]
 800148c:	4402      	add	r2, r0
 800148e:	7812      	ldrb	r2, [r2, #0]
 8001490:	0212      	lsls	r2, r2, #8
                         ((uint32_t)pBuffer[(4U * i) + 1U] << 16U) | \
 8001492:	430a      	orrs	r2, r1
                         (uint32_t)pBuffer[(4U * i) + 3U];
 8001494:	69f9      	ldr	r1, [r7, #28]
 8001496:	0089      	lsls	r1, r1, #2
 8001498:	3103      	adds	r1, #3
 800149a:	68b8      	ldr	r0, [r7, #8]
 800149c:	4401      	add	r1, r0
 800149e:	7809      	ldrb	r1, [r1, #0]
                         ((uint32_t)pBuffer[(4U * i) + 2U] << 8U)  | \
 80014a0:	430a      	orrs	r2, r1
    hcrc->Instance->DR = ((uint32_t)pBuffer[4U * i] << 24U) | \
 80014a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 4U); i++)
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	3301      	adds	r3, #1
 80014a8:	61fb      	str	r3, [r7, #28]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	089a      	lsrs	r2, r3, #2
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	429a      	cmp	r2, r3
 80014b2:	d8d7      	bhi.n	8001464 <CRC_Handle_8+0x12>
  }
  /* last bytes specific handling */
  if ((BufferLength % 4U) != 0U)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0303 	and.w	r3, r3, #3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d04f      	beq.n	800155e <CRC_Handle_8+0x10c>
  {
    if ((BufferLength % 4U) == 1U)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f003 0303 	and.w	r3, r3, #3
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d108      	bne.n	80014da <CRC_Handle_8+0x88>
    {
      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[4U * i];         /* Derogation MisraC2012 R.11.5 */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	4619      	mov	r1, r3
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	68ba      	ldr	r2, [r7, #8]
 80014d4:	4413      	add	r3, r2
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	700b      	strb	r3, [r1, #0]
    }
    if ((BufferLength % 4U) == 2U)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f003 0303 	and.w	r3, r3, #3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d116      	bne.n	8001512 <CRC_Handle_8+0xc0>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 80014e4:	69fb      	ldr	r3, [r7, #28]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	68ba      	ldr	r2, [r7, #8]
 80014ea:	4413      	add	r3, r2
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	021b      	lsls	r3, r3, #8
 80014f0:	b21a      	sxth	r2, r3
 80014f2:	69fb      	ldr	r3, [r7, #28]
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	3301      	adds	r3, #1
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	440b      	add	r3, r1
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	4313      	orrs	r3, r2
 8001502:	b21b      	sxth	r3, r3
 8001504:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	617b      	str	r3, [r7, #20]
      *pReg = data;
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	8b7a      	ldrh	r2, [r7, #26]
 8001510:	801a      	strh	r2, [r3, #0]
    }
    if ((BufferLength % 4U) == 3U)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f003 0303 	and.w	r3, r3, #3
 8001518:	2b03      	cmp	r3, #3
 800151a:	d120      	bne.n	800155e <CRC_Handle_8+0x10c>
    {
      data = ((uint16_t)(pBuffer[4U * i]) << 8U) | (uint16_t)pBuffer[(4U * i) + 1U];
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	4413      	add	r3, r2
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b21a      	sxth	r2, r3
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	3301      	adds	r3, #1
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	440b      	add	r3, r1
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	b21b      	sxth	r3, r3
 8001538:	4313      	orrs	r3, r2
 800153a:	b21b      	sxth	r3, r3
 800153c:	837b      	strh	r3, [r7, #26]
      pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                    /* Derogation MisraC2012 R.11.5 */
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	617b      	str	r3, [r7, #20]
      *pReg = data;
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	8b7a      	ldrh	r2, [r7, #26]
 8001548:	801a      	strh	r2, [r3, #0]

      *(__IO uint8_t *)(__IO void *)(&hcrc->Instance->DR) = pBuffer[(4U * i) + 2U];  /* Derogation MisraC2012 R.11.5 */
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4619      	mov	r1, r3
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	009b      	lsls	r3, r3, #2
 8001554:	3302      	adds	r3, #2
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	4413      	add	r3, r2
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	700b      	strb	r3, [r1, #0]
    }
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3724      	adds	r7, #36	; 0x24
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr

08001570 <CRC_Handle_16>:
  * @param  pBuffer pointer to the input data buffer
  * @param  BufferLength input data buffer length
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
static uint32_t CRC_Handle_16(CRC_HandleTypeDef *hcrc, uint16_t pBuffer[], uint32_t BufferLength)
{
 8001570:	b480      	push	{r7}
 8001572:	b087      	sub	sp, #28
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  __IO uint16_t *pReg;

  /* Processing time optimization: 2 HalfWords are entered in a row with a single word write,
   * in case of odd length, last HalfWord must be carefully fed to the CRC calculator to ensure
   * a correct type handling by the peripheral */
  for (i = 0U; i < (BufferLength / 2U); i++)
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	e012      	b.n	80015a8 <CRC_Handle_16+0x38>
  {
    hcrc->Instance->DR = ((uint32_t)pBuffer[2U * i] << 16U) | (uint32_t)pBuffer[(2U * i) + 1U];
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	697a      	ldr	r2, [r7, #20]
 8001588:	0092      	lsls	r2, r2, #2
 800158a:	68b9      	ldr	r1, [r7, #8]
 800158c:	440a      	add	r2, r1
 800158e:	8812      	ldrh	r2, [r2, #0]
 8001590:	0412      	lsls	r2, r2, #16
 8001592:	6979      	ldr	r1, [r7, #20]
 8001594:	0089      	lsls	r1, r1, #2
 8001596:	3102      	adds	r1, #2
 8001598:	68b8      	ldr	r0, [r7, #8]
 800159a:	4401      	add	r1, r0
 800159c:	8809      	ldrh	r1, [r1, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < (BufferLength / 2U); i++)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	3301      	adds	r3, #1
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	085a      	lsrs	r2, r3, #1
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	429a      	cmp	r2, r3
 80015b0:	d8e7      	bhi.n	8001582 <CRC_Handle_16+0x12>
  }
  if ((BufferLength % 2U) != 0U)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d009      	beq.n	80015d0 <CRC_Handle_16+0x60>
  {
    pReg = (__IO uint16_t *)(__IO void *)(&hcrc->Instance->DR);                 /* Derogation MisraC2012 R.11.5 */
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	613b      	str	r3, [r7, #16]
    *pReg = pBuffer[2U * i];
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	68ba      	ldr	r2, [r7, #8]
 80015c8:	4413      	add	r3, r2
 80015ca:	881a      	ldrh	r2, [r3, #0]
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	801a      	strh	r2, [r3, #0]
  }

  /* Return the CRC computed value */
  return hcrc->Instance->DR;
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b087      	sub	sp, #28
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	60f8      	str	r0, [r7, #12]
 80015ec:	60b9      	str	r1, [r7, #8]
 80015ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015f0:	2300      	movs	r3, #0
 80015f2:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80015f4:	231f      	movs	r3, #31
 80015f6:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80015f8:	bf00      	nop
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1e5a      	subs	r2, r3, #1
 80015fe:	613a      	str	r2, [r7, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d009      	beq.n	8001618 <HAL_CRCEx_Polynomial_Set+0x34>
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	f003 031f 	and.w	r3, r3, #31
 800160a:	68ba      	ldr	r2, [r7, #8]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0f0      	beq.n	80015fa <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2b18      	cmp	r3, #24
 800161c:	d846      	bhi.n	80016ac <HAL_CRCEx_Polynomial_Set+0xc8>
 800161e:	a201      	add	r2, pc, #4	; (adr r2, 8001624 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001624:	080016b3 	.word	0x080016b3
 8001628:	080016ad 	.word	0x080016ad
 800162c:	080016ad 	.word	0x080016ad
 8001630:	080016ad 	.word	0x080016ad
 8001634:	080016ad 	.word	0x080016ad
 8001638:	080016ad 	.word	0x080016ad
 800163c:	080016ad 	.word	0x080016ad
 8001640:	080016ad 	.word	0x080016ad
 8001644:	080016a1 	.word	0x080016a1
 8001648:	080016ad 	.word	0x080016ad
 800164c:	080016ad 	.word	0x080016ad
 8001650:	080016ad 	.word	0x080016ad
 8001654:	080016ad 	.word	0x080016ad
 8001658:	080016ad 	.word	0x080016ad
 800165c:	080016ad 	.word	0x080016ad
 8001660:	080016ad 	.word	0x080016ad
 8001664:	08001695 	.word	0x08001695
 8001668:	080016ad 	.word	0x080016ad
 800166c:	080016ad 	.word	0x080016ad
 8001670:	080016ad 	.word	0x080016ad
 8001674:	080016ad 	.word	0x080016ad
 8001678:	080016ad 	.word	0x080016ad
 800167c:	080016ad 	.word	0x080016ad
 8001680:	080016ad 	.word	0x080016ad
 8001684:	08001689 	.word	0x08001689
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2b06      	cmp	r3, #6
 800168c:	d913      	bls.n	80016b6 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800168e:	2301      	movs	r3, #1
 8001690:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001692:	e010      	b.n	80016b6 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	2b07      	cmp	r3, #7
 8001698:	d90f      	bls.n	80016ba <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800169a:	2301      	movs	r3, #1
 800169c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800169e:	e00c      	b.n	80016ba <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	2b0f      	cmp	r3, #15
 80016a4:	d90b      	bls.n	80016be <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80016aa:	e008      	b.n	80016be <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	75fb      	strb	r3, [r7, #23]
      break;
 80016b0:	e006      	b.n	80016c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016b2:	bf00      	nop
 80016b4:	e004      	b.n	80016c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016b6:	bf00      	nop
 80016b8:	e002      	b.n	80016c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016ba:	bf00      	nop
 80016bc:	e000      	b.n	80016c0 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80016be:	bf00      	nop
  }
  if (status == HAL_OK)
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10d      	bne.n	80016e2 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	68ba      	ldr	r2, [r7, #8]
 80016cc:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	6812      	ldr	r2, [r2, #0]
 80016d6:	6892      	ldr	r2, [r2, #8]
 80016d8:	f022 0118 	bic.w	r1, r2, #24
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	430a      	orrs	r2, r1
 80016e0:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80016e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80016e4:	4618      	mov	r0, r3
 80016e6:	371c      	adds	r7, #28
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016f8:	2300      	movs	r3, #0
 80016fa:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d005      	beq.n	8001714 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2204      	movs	r2, #4
 800170c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800170e:	2301      	movs	r3, #1
 8001710:	73fb      	strb	r3, [r7, #15]
 8001712:	e029      	b.n	8001768 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	687a      	ldr	r2, [r7, #4]
 800171a:	6812      	ldr	r2, [r2, #0]
 800171c:	6812      	ldr	r2, [r2, #0]
 800171e:	f022 020e 	bic.w	r2, r2, #14
 8001722:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	687a      	ldr	r2, [r7, #4]
 800172a:	6812      	ldr	r2, [r2, #0]
 800172c:	6812      	ldr	r2, [r2, #0]
 800172e:	f022 0201 	bic.w	r2, r2, #1
 8001732:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	687a      	ldr	r2, [r7, #4]
 800173a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800173c:	f002 021c 	and.w	r2, r2, #28
 8001740:	2101      	movs	r1, #1
 8001742:	fa01 f202 	lsl.w	r2, r1, r2
 8001746:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2201      	movs	r2, #1
 800174c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	4798      	blx	r3
    }
  }
  return status;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
	...

08001774 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
 800177c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001782:	e17f      	b.n	8001a84 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681a      	ldr	r2, [r3, #0]
 8001788:	2101      	movs	r1, #1
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	fa01 f303 	lsl.w	r3, r1, r3
 8001790:	4013      	ands	r3, r2
 8001792:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 8171 	beq.w	8001a7e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d00b      	beq.n	80017bc <HAL_GPIO_Init+0x48>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d007      	beq.n	80017bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017b0:	2b11      	cmp	r3, #17
 80017b2:	d003      	beq.n	80017bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	2b12      	cmp	r3, #18
 80017ba:	d130      	bne.n	800181e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	689b      	ldr	r3, [r3, #8]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	2203      	movs	r2, #3
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	43db      	mvns	r3, r3
 80017ce:	693a      	ldr	r2, [r7, #16]
 80017d0:	4013      	ands	r3, r2
 80017d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	693a      	ldr	r2, [r7, #16]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	693a      	ldr	r2, [r7, #16]
 80017ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f2:	2201      	movs	r2, #1
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43db      	mvns	r3, r3
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	4013      	ands	r3, r2
 8001800:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	091b      	lsrs	r3, r3, #4
 8001808:	f003 0201 	and.w	r2, r3, #1
 800180c:	697b      	ldr	r3, [r7, #20]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4313      	orrs	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	693a      	ldr	r2, [r7, #16]
 800181c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b03      	cmp	r3, #3
 8001828:	d118      	bne.n	800185c <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800182e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	08db      	lsrs	r3, r3, #3
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	005b      	lsls	r3, r3, #1
 8001866:	2203      	movs	r2, #3
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	43db      	mvns	r3, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4013      	ands	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	005b      	lsls	r3, r3, #1
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4313      	orrs	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	2b02      	cmp	r3, #2
 8001892:	d003      	beq.n	800189c <HAL_GPIO_Init+0x128>
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	2b12      	cmp	r3, #18
 800189a:	d123      	bne.n	80018e4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	08da      	lsrs	r2, r3, #3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	3208      	adds	r2, #8
 80018a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018a8:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f003 0307 	and.w	r3, r3, #7
 80018b0:	009b      	lsls	r3, r3, #2
 80018b2:	220f      	movs	r2, #15
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	f003 0307 	and.w	r3, r3, #7
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	693a      	ldr	r2, [r7, #16]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3208      	adds	r2, #8
 80018de:	6939      	ldr	r1, [r7, #16]
 80018e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	005b      	lsls	r3, r3, #1
 80018ee:	2203      	movs	r2, #3
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	43db      	mvns	r3, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4013      	ands	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f003 0203 	and.w	r2, r3, #3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	fa02 f303 	lsl.w	r3, r2, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80ac 	beq.w	8001a7e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4a5e      	ldr	r2, [pc, #376]	; (8001aa0 <HAL_GPIO_Init+0x32c>)
 8001928:	4b5d      	ldr	r3, [pc, #372]	; (8001aa0 <HAL_GPIO_Init+0x32c>)
 800192a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6613      	str	r3, [r2, #96]	; 0x60
 8001932:	4b5b      	ldr	r3, [pc, #364]	; (8001aa0 <HAL_GPIO_Init+0x32c>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	60bb      	str	r3, [r7, #8]
 800193c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800193e:	4a59      	ldr	r2, [pc, #356]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	089b      	lsrs	r3, r3, #2
 8001944:	3302      	adds	r3, #2
 8001946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800194a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	220f      	movs	r2, #15
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	43db      	mvns	r3, r3
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4013      	ands	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001968:	d025      	beq.n	80019b6 <HAL_GPIO_Init+0x242>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4e      	ldr	r2, [pc, #312]	; (8001aa8 <HAL_GPIO_Init+0x334>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01f      	beq.n	80019b2 <HAL_GPIO_Init+0x23e>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a4d      	ldr	r2, [pc, #308]	; (8001aac <HAL_GPIO_Init+0x338>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d019      	beq.n	80019ae <HAL_GPIO_Init+0x23a>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a4c      	ldr	r2, [pc, #304]	; (8001ab0 <HAL_GPIO_Init+0x33c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d013      	beq.n	80019aa <HAL_GPIO_Init+0x236>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a4b      	ldr	r2, [pc, #300]	; (8001ab4 <HAL_GPIO_Init+0x340>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d00d      	beq.n	80019a6 <HAL_GPIO_Init+0x232>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a4a      	ldr	r2, [pc, #296]	; (8001ab8 <HAL_GPIO_Init+0x344>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d007      	beq.n	80019a2 <HAL_GPIO_Init+0x22e>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a49      	ldr	r2, [pc, #292]	; (8001abc <HAL_GPIO_Init+0x348>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d101      	bne.n	800199e <HAL_GPIO_Init+0x22a>
 800199a:	2306      	movs	r3, #6
 800199c:	e00c      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 800199e:	2307      	movs	r3, #7
 80019a0:	e00a      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019a2:	2305      	movs	r3, #5
 80019a4:	e008      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019a6:	2304      	movs	r3, #4
 80019a8:	e006      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019aa:	2303      	movs	r3, #3
 80019ac:	e004      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e002      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019b2:	2301      	movs	r3, #1
 80019b4:	e000      	b.n	80019b8 <HAL_GPIO_Init+0x244>
 80019b6:	2300      	movs	r3, #0
 80019b8:	697a      	ldr	r2, [r7, #20]
 80019ba:	f002 0203 	and.w	r2, r2, #3
 80019be:	0092      	lsls	r2, r2, #2
 80019c0:	4093      	lsls	r3, r2
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019c8:	4936      	ldr	r1, [pc, #216]	; (8001aa4 <HAL_GPIO_Init+0x330>)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	089b      	lsrs	r3, r3, #2
 80019ce:	3302      	adds	r3, #2
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019d6:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	43db      	mvns	r3, r3
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	4013      	ands	r3, r2
 80019e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d003      	beq.n	80019fa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019fa:	4a31      	ldr	r2, [pc, #196]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001a00:	4b2f      	ldr	r3, [pc, #188]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d003      	beq.n	8001a24 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a24:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a2a:	4b25      	ldr	r3, [pc, #148]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d003      	beq.n	8001a4e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a4e:	4a1c      	ldr	r2, [pc, #112]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a54:	4b1a      	ldr	r3, [pc, #104]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 8001a56:	68db      	ldr	r3, [r3, #12]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	43db      	mvns	r3, r3
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4013      	ands	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a78:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <HAL_GPIO_Init+0x34c>)
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	3301      	adds	r3, #1
 8001a82:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f47f ae78 	bne.w	8001784 <HAL_GPIO_Init+0x10>
  }
}
 8001a94:	bf00      	nop
 8001a96:	371c      	adds	r7, #28
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40021000 	.word	0x40021000
 8001aa4:	40010000 	.word	0x40010000
 8001aa8:	48000400 	.word	0x48000400
 8001aac:	48000800 	.word	0x48000800
 8001ab0:	48000c00 	.word	0x48000c00
 8001ab4:	48001000 	.word	0x48001000
 8001ab8:	48001400 	.word	0x48001400
 8001abc:	48001800 	.word	0x48001800
 8001ac0:	40010400 	.word	0x40010400

08001ac4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	460b      	mov	r3, r1
 8001ace:	807b      	strh	r3, [r7, #2]
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad4:	787b      	ldrb	r3, [r7, #1]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d003      	beq.n	8001ae2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ae0:	e002      	b.n	8001ae8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ae8:	bf00      	nop
 8001aea:	370c      	adds	r7, #12
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001afe:	4b08      	ldr	r3, [pc, #32]	; (8001b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b00:	695a      	ldr	r2, [r3, #20]
 8001b02:	88fb      	ldrh	r3, [r7, #6]
 8001b04:	4013      	ands	r3, r2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d006      	beq.n	8001b18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b0a:	4a05      	ldr	r2, [pc, #20]	; (8001b20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b0c:	88fb      	ldrh	r3, [r7, #6]
 8001b0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b10:	88fb      	ldrh	r3, [r7, #6]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f806 	bl	8001b24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b18:	bf00      	nop
 8001b1a:	3708      	adds	r7, #8
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40010400 	.word	0x40010400

08001b24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr
	...

08001b3c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b40:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr
 8001b52:	bf00      	nop
 8001b54:	40007000 	.word	0x40007000

08001b58 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b66:	d130      	bne.n	8001bca <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b68:	4b23      	ldr	r3, [pc, #140]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b74:	d038      	beq.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b76:	4a20      	ldr	r2, [pc, #128]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b78:	4b1f      	ldr	r3, [pc, #124]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b80:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b84:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b86:	4b1d      	ldr	r3, [pc, #116]	; (8001bfc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2232      	movs	r2, #50	; 0x32
 8001b8c:	fb02 f303 	mul.w	r3, r2, r3
 8001b90:	4a1b      	ldr	r2, [pc, #108]	; (8001c00 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b92:	fba2 2303 	umull	r2, r3, r2, r3
 8001b96:	0c9b      	lsrs	r3, r3, #18
 8001b98:	3301      	adds	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9c:	e002      	b.n	8001ba4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ba4:	4b14      	ldr	r3, [pc, #80]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba6:	695b      	ldr	r3, [r3, #20]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb0:	d102      	bne.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f2      	bne.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bb8:	4b0f      	ldr	r3, [pc, #60]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc4:	d110      	bne.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e00f      	b.n	8001bea <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bca:	4b0b      	ldr	r3, [pc, #44]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bd6:	d007      	beq.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd8:	4a07      	ldr	r2, [pc, #28]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bda:	4b07      	ldr	r3, [pc, #28]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001be6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3714      	adds	r7, #20
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	40007000 	.word	0x40007000
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	431bde83 	.word	0x431bde83

08001c04 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b088      	sub	sp, #32
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d101      	bne.n	8001c16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e3d4      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c16:	4ba1      	ldr	r3, [pc, #644]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c20:	4b9e      	ldr	r3, [pc, #632]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f003 0303 	and.w	r3, r3, #3
 8001c28:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0310 	and.w	r3, r3, #16
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 80e4 	beq.w	8001e00 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d007      	beq.n	8001c4e <HAL_RCC_OscConfig+0x4a>
 8001c3e:	69bb      	ldr	r3, [r7, #24]
 8001c40:	2b0c      	cmp	r3, #12
 8001c42:	f040 808b 	bne.w	8001d5c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	f040 8087 	bne.w	8001d5c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c4e:	4b93      	ldr	r3, [pc, #588]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d005      	beq.n	8001c66 <HAL_RCC_OscConfig+0x62>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e3ac      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1a      	ldr	r2, [r3, #32]
 8001c6a:	4b8c      	ldr	r3, [pc, #560]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d004      	beq.n	8001c80 <HAL_RCC_OscConfig+0x7c>
 8001c76:	4b89      	ldr	r3, [pc, #548]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c7e:	e005      	b.n	8001c8c <HAL_RCC_OscConfig+0x88>
 8001c80:	4b86      	ldr	r3, [pc, #536]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c86:	091b      	lsrs	r3, r3, #4
 8001c88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d923      	bls.n	8001cd8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a1b      	ldr	r3, [r3, #32]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f000 fd3f 	bl	8002718 <RCC_SetFlashLatencyFromMSIRange>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e38d      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ca4:	4a7d      	ldr	r2, [pc, #500]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001ca6:	4b7d      	ldr	r3, [pc, #500]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f043 0308 	orr.w	r3, r3, #8
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	497a      	ldr	r1, [pc, #488]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001cb2:	4b7a      	ldr	r3, [pc, #488]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a1b      	ldr	r3, [r3, #32]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cc2:	4976      	ldr	r1, [pc, #472]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001cc4:	4b75      	ldr	r3, [pc, #468]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	69db      	ldr	r3, [r3, #28]
 8001cd0:	021b      	lsls	r3, r3, #8
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	604b      	str	r3, [r1, #4]
 8001cd6:	e025      	b.n	8001d24 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd8:	4a70      	ldr	r2, [pc, #448]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001cda:	4b70      	ldr	r3, [pc, #448]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f043 0308 	orr.w	r3, r3, #8
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	496d      	ldr	r1, [pc, #436]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001ce6:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1b      	ldr	r3, [r3, #32]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf6:	4969      	ldr	r1, [pc, #420]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001cf8:	4b68      	ldr	r3, [pc, #416]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	69db      	ldr	r3, [r3, #28]
 8001d04:	021b      	lsls	r3, r3, #8
 8001d06:	4313      	orrs	r3, r2
 8001d08:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d109      	bne.n	8001d24 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6a1b      	ldr	r3, [r3, #32]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f000 fcff 	bl	8002718 <RCC_SetFlashLatencyFromMSIRange>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e34d      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d24:	f000 fc36 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8001d28:	4601      	mov	r1, r0
 8001d2a:	4b5c      	ldr	r3, [pc, #368]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	4a5a      	ldr	r2, [pc, #360]	; (8001ea0 <HAL_RCC_OscConfig+0x29c>)
 8001d36:	5cd3      	ldrb	r3, [r2, r3]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	fa21 f303 	lsr.w	r3, r1, r3
 8001d40:	4a58      	ldr	r2, [pc, #352]	; (8001ea4 <HAL_RCC_OscConfig+0x2a0>)
 8001d42:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d44:	4b58      	ldr	r3, [pc, #352]	; (8001ea8 <HAL_RCC_OscConfig+0x2a4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7ff f94f 	bl	8000fec <HAL_InitTick>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d52:	7bfb      	ldrb	r3, [r7, #15]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d052      	beq.n	8001dfe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d58:	7bfb      	ldrb	r3, [r7, #15]
 8001d5a:	e331      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d032      	beq.n	8001dca <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d64:	4a4d      	ldr	r2, [pc, #308]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001d66:	4b4d      	ldr	r3, [pc, #308]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d70:	f7ff f98c 	bl	800108c <HAL_GetTick>
 8001d74:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d78:	f7ff f988 	bl	800108c <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e31a      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d8a:	4b44      	ldr	r3, [pc, #272]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d96:	4a41      	ldr	r2, [pc, #260]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001d98:	4b40      	ldr	r3, [pc, #256]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f043 0308 	orr.w	r3, r3, #8
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	493e      	ldr	r1, [pc, #248]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001da4:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	6a1b      	ldr	r3, [r3, #32]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001db4:	4939      	ldr	r1, [pc, #228]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001db6:	4b39      	ldr	r3, [pc, #228]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	69db      	ldr	r3, [r3, #28]
 8001dc2:	021b      	lsls	r3, r3, #8
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	604b      	str	r3, [r1, #4]
 8001dc8:	e01a      	b.n	8001e00 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dca:	4a34      	ldr	r2, [pc, #208]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001dcc:	4b33      	ldr	r3, [pc, #204]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f023 0301 	bic.w	r3, r3, #1
 8001dd4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dd6:	f7ff f959 	bl	800108c <HAL_GetTick>
 8001dda:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ddc:	e008      	b.n	8001df0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dde:	f7ff f955 	bl	800108c <HAL_GetTick>
 8001de2:	4602      	mov	r2, r0
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	1ad3      	subs	r3, r2, r3
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d901      	bls.n	8001df0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001dec:	2303      	movs	r3, #3
 8001dee:	e2e7      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001df0:	4b2a      	ldr	r3, [pc, #168]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1f0      	bne.n	8001dde <HAL_RCC_OscConfig+0x1da>
 8001dfc:	e000      	b.n	8001e00 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dfe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d074      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2b08      	cmp	r3, #8
 8001e10:	d005      	beq.n	8001e1e <HAL_RCC_OscConfig+0x21a>
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	2b0c      	cmp	r3, #12
 8001e16:	d10e      	bne.n	8001e36 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	2b03      	cmp	r3, #3
 8001e1c:	d10b      	bne.n	8001e36 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e1e:	4b1f      	ldr	r3, [pc, #124]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d064      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d160      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e2c4      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3e:	d106      	bne.n	8001e4e <HAL_RCC_OscConfig+0x24a>
 8001e40:	4a16      	ldr	r2, [pc, #88]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001e42:	4b16      	ldr	r3, [pc, #88]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e4a:	6013      	str	r3, [r2, #0]
 8001e4c:	e01d      	b.n	8001e8a <HAL_RCC_OscConfig+0x286>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e56:	d10c      	bne.n	8001e72 <HAL_RCC_OscConfig+0x26e>
 8001e58:	4a10      	ldr	r2, [pc, #64]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001e5a:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e62:	6013      	str	r3, [r2, #0]
 8001e64:	4a0d      	ldr	r2, [pc, #52]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001e66:	4b0d      	ldr	r3, [pc, #52]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e6e:	6013      	str	r3, [r2, #0]
 8001e70:	e00b      	b.n	8001e8a <HAL_RCC_OscConfig+0x286>
 8001e72:	4a0a      	ldr	r2, [pc, #40]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001e74:	4b09      	ldr	r3, [pc, #36]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7c:	6013      	str	r3, [r2, #0]
 8001e7e:	4a07      	ldr	r2, [pc, #28]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001e80:	4b06      	ldr	r3, [pc, #24]	; (8001e9c <HAL_RCC_OscConfig+0x298>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	685b      	ldr	r3, [r3, #4]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d01c      	beq.n	8001ecc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e92:	f7ff f8fb 	bl	800108c <HAL_GetTick>
 8001e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e98:	e011      	b.n	8001ebe <HAL_RCC_OscConfig+0x2ba>
 8001e9a:	bf00      	nop
 8001e9c:	40021000 	.word	0x40021000
 8001ea0:	08004ab4 	.word	0x08004ab4
 8001ea4:	20000000 	.word	0x20000000
 8001ea8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001eac:	f7ff f8ee 	bl	800108c <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	2b64      	cmp	r3, #100	; 0x64
 8001eb8:	d901      	bls.n	8001ebe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	e280      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ebe:	4baf      	ldr	r3, [pc, #700]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d0f0      	beq.n	8001eac <HAL_RCC_OscConfig+0x2a8>
 8001eca:	e014      	b.n	8001ef6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7ff f8de 	bl	800108c <HAL_GetTick>
 8001ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7ff f8da 	bl	800108c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b64      	cmp	r3, #100	; 0x64
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e26c      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ee6:	4ba5      	ldr	r3, [pc, #660]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1f0      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x2d0>
 8001ef2:	e000      	b.n	8001ef6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d060      	beq.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b04      	cmp	r3, #4
 8001f06:	d005      	beq.n	8001f14 <HAL_RCC_OscConfig+0x310>
 8001f08:	69bb      	ldr	r3, [r7, #24]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d119      	bne.n	8001f42 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d116      	bne.n	8001f42 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f14:	4b99      	ldr	r3, [pc, #612]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_RCC_OscConfig+0x328>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e249      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f2c:	4993      	ldr	r1, [pc, #588]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001f2e:	4b93      	ldr	r3, [pc, #588]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	691b      	ldr	r3, [r3, #16]
 8001f3a:	061b      	lsls	r3, r3, #24
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f40:	e040      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d023      	beq.n	8001f92 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f4a:	4a8c      	ldr	r2, [pc, #560]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001f4c:	4b8b      	ldr	r3, [pc, #556]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f56:	f7ff f899 	bl	800108c <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7ff f895 	bl	800108c <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e227      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f70:	4b82      	ldr	r3, [pc, #520]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	497f      	ldr	r1, [pc, #508]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001f7e:	4b7f      	ldr	r3, [pc, #508]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	061b      	lsls	r3, r3, #24
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	604b      	str	r3, [r1, #4]
 8001f90:	e018      	b.n	8001fc4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f92:	4a7a      	ldr	r2, [pc, #488]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001f94:	4b79      	ldr	r3, [pc, #484]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9e:	f7ff f875 	bl	800108c <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa4:	e008      	b.n	8001fb8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa6:	f7ff f871 	bl	800108c <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	2b02      	cmp	r3, #2
 8001fb2:	d901      	bls.n	8001fb8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fb4:	2303      	movs	r3, #3
 8001fb6:	e203      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb8:	4b70      	ldr	r3, [pc, #448]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0308 	and.w	r3, r3, #8
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d03c      	beq.n	800204a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d01c      	beq.n	8002012 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd8:	4a68      	ldr	r2, [pc, #416]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001fda:	4b68      	ldr	r3, [pc, #416]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8001fdc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fe0:	f043 0301 	orr.w	r3, r3, #1
 8001fe4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe8:	f7ff f850 	bl	800108c <HAL_GetTick>
 8001fec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fee:	e008      	b.n	8002002 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ff0:	f7ff f84c 	bl	800108c <HAL_GetTick>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	1ad3      	subs	r3, r2, r3
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d901      	bls.n	8002002 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e1de      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002002:	4b5e      	ldr	r3, [pc, #376]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8002004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002008:	f003 0302 	and.w	r3, r3, #2
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ef      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x3ec>
 8002010:	e01b      	b.n	800204a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002012:	4a5a      	ldr	r2, [pc, #360]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8002014:	4b59      	ldr	r3, [pc, #356]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8002016:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800201a:	f023 0301 	bic.w	r3, r3, #1
 800201e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002022:	f7ff f833 	bl	800108c <HAL_GetTick>
 8002026:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002028:	e008      	b.n	800203c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800202a:	f7ff f82f 	bl	800108c <HAL_GetTick>
 800202e:	4602      	mov	r2, r0
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	2b02      	cmp	r3, #2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e1c1      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800203c:	4b4f      	ldr	r3, [pc, #316]	; (800217c <HAL_RCC_OscConfig+0x578>)
 800203e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ef      	bne.n	800202a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f003 0304 	and.w	r3, r3, #4
 8002052:	2b00      	cmp	r3, #0
 8002054:	f000 80a6 	beq.w	80021a4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002058:	2300      	movs	r3, #0
 800205a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800205c:	4b47      	ldr	r3, [pc, #284]	; (800217c <HAL_RCC_OscConfig+0x578>)
 800205e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002060:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d10d      	bne.n	8002084 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002068:	4a44      	ldr	r2, [pc, #272]	; (800217c <HAL_RCC_OscConfig+0x578>)
 800206a:	4b44      	ldr	r3, [pc, #272]	; (800217c <HAL_RCC_OscConfig+0x578>)
 800206c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800206e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002072:	6593      	str	r3, [r2, #88]	; 0x58
 8002074:	4b41      	ldr	r3, [pc, #260]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002080:	2301      	movs	r3, #1
 8002082:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002084:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <HAL_RCC_OscConfig+0x57c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800208c:	2b00      	cmp	r3, #0
 800208e:	d118      	bne.n	80020c2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002090:	4a3b      	ldr	r2, [pc, #236]	; (8002180 <HAL_RCC_OscConfig+0x57c>)
 8002092:	4b3b      	ldr	r3, [pc, #236]	; (8002180 <HAL_RCC_OscConfig+0x57c>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800209c:	f7fe fff6 	bl	800108c <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a2:	e008      	b.n	80020b6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020a4:	f7fe fff2 	bl	800108c <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d901      	bls.n	80020b6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e184      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_RCC_OscConfig+0x57c>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d0f0      	beq.n	80020a4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d108      	bne.n	80020dc <HAL_RCC_OscConfig+0x4d8>
 80020ca:	4a2c      	ldr	r2, [pc, #176]	; (800217c <HAL_RCC_OscConfig+0x578>)
 80020cc:	4b2b      	ldr	r3, [pc, #172]	; (800217c <HAL_RCC_OscConfig+0x578>)
 80020ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020d2:	f043 0301 	orr.w	r3, r3, #1
 80020d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020da:	e024      	b.n	8002126 <HAL_RCC_OscConfig+0x522>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b05      	cmp	r3, #5
 80020e2:	d110      	bne.n	8002106 <HAL_RCC_OscConfig+0x502>
 80020e4:	4a25      	ldr	r2, [pc, #148]	; (800217c <HAL_RCC_OscConfig+0x578>)
 80020e6:	4b25      	ldr	r3, [pc, #148]	; (800217c <HAL_RCC_OscConfig+0x578>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ec:	f043 0304 	orr.w	r3, r3, #4
 80020f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f4:	4a21      	ldr	r2, [pc, #132]	; (800217c <HAL_RCC_OscConfig+0x578>)
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_RCC_OscConfig+0x578>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002104:	e00f      	b.n	8002126 <HAL_RCC_OscConfig+0x522>
 8002106:	4a1d      	ldr	r2, [pc, #116]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8002108:	4b1c      	ldr	r3, [pc, #112]	; (800217c <HAL_RCC_OscConfig+0x578>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	f023 0301 	bic.w	r3, r3, #1
 8002112:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002116:	4a19      	ldr	r2, [pc, #100]	; (800217c <HAL_RCC_OscConfig+0x578>)
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <HAL_RCC_OscConfig+0x578>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	f023 0304 	bic.w	r3, r3, #4
 8002122:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d016      	beq.n	800215c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800212e:	f7fe ffad 	bl	800108c <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002134:	e00a      	b.n	800214c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002136:	f7fe ffa9 	bl	800108c <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	f241 3288 	movw	r2, #5000	; 0x1388
 8002144:	4293      	cmp	r3, r2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e139      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214c:	4b0b      	ldr	r3, [pc, #44]	; (800217c <HAL_RCC_OscConfig+0x578>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	f003 0302 	and.w	r3, r3, #2
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0ed      	beq.n	8002136 <HAL_RCC_OscConfig+0x532>
 800215a:	e01a      	b.n	8002192 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215c:	f7fe ff96 	bl	800108c <HAL_GetTick>
 8002160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002162:	e00f      	b.n	8002184 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002164:	f7fe ff92 	bl	800108c <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	1ad3      	subs	r3, r2, r3
 800216e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002172:	4293      	cmp	r3, r2
 8002174:	d906      	bls.n	8002184 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e122      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
 800217a:	bf00      	nop
 800217c:	40021000 	.word	0x40021000
 8002180:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002184:	4b90      	ldr	r3, [pc, #576]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218a:	f003 0302 	and.w	r3, r3, #2
 800218e:	2b00      	cmp	r3, #0
 8002190:	d1e8      	bne.n	8002164 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002192:	7ffb      	ldrb	r3, [r7, #31]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d105      	bne.n	80021a4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002198:	4a8b      	ldr	r2, [pc, #556]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 800219a:	4b8b      	ldr	r3, [pc, #556]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021a2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	f000 8108 	beq.w	80023be <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	f040 80d0 	bne.w	8002358 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021b8:	4b83      	ldr	r3, [pc, #524]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d130      	bne.n	800222e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d6:	3b01      	subs	r3, #1
 80021d8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d127      	bne.n	800222e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d11f      	bne.n	800222e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021f8:	2a07      	cmp	r2, #7
 80021fa:	bf14      	ite	ne
 80021fc:	2201      	movne	r2, #1
 80021fe:	2200      	moveq	r2, #0
 8002200:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002202:	4293      	cmp	r3, r2
 8002204:	d113      	bne.n	800222e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002210:	085b      	lsrs	r3, r3, #1
 8002212:	3b01      	subs	r3, #1
 8002214:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d109      	bne.n	800222e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002224:	085b      	lsrs	r3, r3, #1
 8002226:	3b01      	subs	r3, #1
 8002228:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800222a:	429a      	cmp	r2, r3
 800222c:	d06e      	beq.n	800230c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	2b0c      	cmp	r3, #12
 8002232:	d069      	beq.n	8002308 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002234:	4b64      	ldr	r3, [pc, #400]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002240:	4b61      	ldr	r3, [pc, #388]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e0b7      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002250:	4a5d      	ldr	r2, [pc, #372]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002252:	4b5d      	ldr	r3, [pc, #372]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800225a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800225c:	f7fe ff16 	bl	800108c <HAL_GetTick>
 8002260:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002262:	e008      	b.n	8002276 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002264:	f7fe ff12 	bl	800108c <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	2b02      	cmp	r3, #2
 8002270:	d901      	bls.n	8002276 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002272:	2303      	movs	r3, #3
 8002274:	e0a4      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002276:	4b54      	ldr	r3, [pc, #336]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1f0      	bne.n	8002264 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002282:	4851      	ldr	r0, [pc, #324]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002284:	4b50      	ldr	r3, [pc, #320]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002286:	68da      	ldr	r2, [r3, #12]
 8002288:	4b50      	ldr	r3, [pc, #320]	; (80023cc <HAL_RCC_OscConfig+0x7c8>)
 800228a:	4013      	ands	r3, r2
 800228c:	687a      	ldr	r2, [r7, #4]
 800228e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002294:	3a01      	subs	r2, #1
 8002296:	0112      	lsls	r2, r2, #4
 8002298:	4311      	orrs	r1, r2
 800229a:	687a      	ldr	r2, [r7, #4]
 800229c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800229e:	0212      	lsls	r2, r2, #8
 80022a0:	4311      	orrs	r1, r2
 80022a2:	687a      	ldr	r2, [r7, #4]
 80022a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022a6:	0852      	lsrs	r2, r2, #1
 80022a8:	3a01      	subs	r2, #1
 80022aa:	0552      	lsls	r2, r2, #21
 80022ac:	4311      	orrs	r1, r2
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022b2:	0852      	lsrs	r2, r2, #1
 80022b4:	3a01      	subs	r2, #1
 80022b6:	0652      	lsls	r2, r2, #25
 80022b8:	4311      	orrs	r1, r2
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022be:	0912      	lsrs	r2, r2, #4
 80022c0:	0452      	lsls	r2, r2, #17
 80022c2:	430a      	orrs	r2, r1
 80022c4:	4313      	orrs	r3, r2
 80022c6:	60c3      	str	r3, [r0, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022c8:	4a3f      	ldr	r2, [pc, #252]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 80022ca:	4b3f      	ldr	r3, [pc, #252]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022d4:	4a3c      	ldr	r2, [pc, #240]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 80022d6:	4b3c      	ldr	r3, [pc, #240]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022e0:	f7fe fed4 	bl	800108c <HAL_GetTick>
 80022e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022e6:	e008      	b.n	80022fa <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e8:	f7fe fed0 	bl	800108c <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	2b02      	cmp	r3, #2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e062      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fa:	4b33      	ldr	r3, [pc, #204]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0f0      	beq.n	80022e8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002306:	e05a      	b.n	80023be <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e059      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800230c:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d152      	bne.n	80023be <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002318:	4a2b      	ldr	r2, [pc, #172]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 800231a:	4b2b      	ldr	r3, [pc, #172]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002322:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002324:	4a28      	ldr	r2, [pc, #160]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002326:	4b28      	ldr	r3, [pc, #160]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800232e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002330:	f7fe feac 	bl	800108c <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002338:	f7fe fea8 	bl	800108c <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b02      	cmp	r3, #2
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e03a      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234a:	4b1f      	ldr	r3, [pc, #124]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d0f0      	beq.n	8002338 <HAL_RCC_OscConfig+0x734>
 8002356:	e032      	b.n	80023be <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002358:	69bb      	ldr	r3, [r7, #24]
 800235a:	2b0c      	cmp	r3, #12
 800235c:	d02d      	beq.n	80023ba <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800235e:	4a1a      	ldr	r2, [pc, #104]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002360:	4b19      	ldr	r3, [pc, #100]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002368:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800236a:	4b17      	ldr	r3, [pc, #92]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d105      	bne.n	8002382 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002376:	4a14      	ldr	r2, [pc, #80]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	f023 0303 	bic.w	r3, r3, #3
 8002380:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002382:	4a11      	ldr	r2, [pc, #68]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800238c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002390:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002392:	f7fe fe7b 	bl	800108c <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002398:	e008      	b.n	80023ac <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239a:	f7fe fe77 	bl	800108c <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d901      	bls.n	80023ac <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e009      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_RCC_OscConfig+0x7c4>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d1f0      	bne.n	800239a <HAL_RCC_OscConfig+0x796>
 80023b8:	e001      	b.n	80023be <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3720      	adds	r7, #32
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40021000 	.word	0x40021000
 80023cc:	f99d808c 	.word	0xf99d808c

080023d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b084      	sub	sp, #16
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e0c8      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023e4:	4b66      	ldr	r3, [pc, #408]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0207 	and.w	r2, r3, #7
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d210      	bcs.n	8002414 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023f2:	4963      	ldr	r1, [pc, #396]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80023f4:	4b62      	ldr	r3, [pc, #392]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f023 0207 	bic.w	r2, r3, #7
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	4313      	orrs	r3, r2
 8002400:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002402:	4b5f      	ldr	r3, [pc, #380]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f003 0207 	and.w	r2, r3, #7
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	429a      	cmp	r2, r3
 800240e:	d001      	beq.n	8002414 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e0b0      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0301 	and.w	r3, r3, #1
 800241c:	2b00      	cmp	r3, #0
 800241e:	d04c      	beq.n	80024ba <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	2b03      	cmp	r3, #3
 8002426:	d107      	bne.n	8002438 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002428:	4b56      	ldr	r3, [pc, #344]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d121      	bne.n	8002478 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e09e      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b02      	cmp	r3, #2
 800243e:	d107      	bne.n	8002450 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002440:	4b50      	ldr	r3, [pc, #320]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d115      	bne.n	8002478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e092      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d107      	bne.n	8002468 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002458:	4b4a      	ldr	r3, [pc, #296]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d109      	bne.n	8002478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e086      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002468:	4b46      	ldr	r3, [pc, #280]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002470:	2b00      	cmp	r3, #0
 8002472:	d101      	bne.n	8002478 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e07e      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002478:	4942      	ldr	r1, [pc, #264]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 800247a:	4b42      	ldr	r3, [pc, #264]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f023 0203 	bic.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4313      	orrs	r3, r2
 8002488:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800248a:	f7fe fdff 	bl	800108c <HAL_GetTick>
 800248e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002490:	e00a      	b.n	80024a8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002492:	f7fe fdfb 	bl	800108c <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	f241 3288 	movw	r2, #5000	; 0x1388
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d901      	bls.n	80024a8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80024a4:	2303      	movs	r3, #3
 80024a6:	e066      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a8:	4b36      	ldr	r3, [pc, #216]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 020c 	and.w	r2, r3, #12
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d1eb      	bne.n	8002492 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d008      	beq.n	80024d8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c6:	492f      	ldr	r1, [pc, #188]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 80024c8:	4b2e      	ldr	r3, [pc, #184]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024d8:	4b29      	ldr	r3, [pc, #164]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0207 	and.w	r2, r3, #7
 80024e0:	683b      	ldr	r3, [r7, #0]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d910      	bls.n	8002508 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e6:	4926      	ldr	r1, [pc, #152]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80024e8:	4b25      	ldr	r3, [pc, #148]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 0207 	bic.w	r2, r3, #7
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f6:	4b22      	ldr	r3, [pc, #136]	; (8002580 <HAL_RCC_ClockConfig+0x1b0>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0207 	and.w	r2, r3, #7
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	429a      	cmp	r2, r3
 8002502:	d001      	beq.n	8002508 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e036      	b.n	8002576 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	2b00      	cmp	r3, #0
 8002512:	d008      	beq.n	8002526 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002514:	491b      	ldr	r1, [pc, #108]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 8002516:	4b1b      	ldr	r3, [pc, #108]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002532:	4914      	ldr	r1, [pc, #80]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 8002534:	4b13      	ldr	r3, [pc, #76]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	00db      	lsls	r3, r3, #3
 8002542:	4313      	orrs	r3, r2
 8002544:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002546:	f000 f825 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 800254a:	4601      	mov	r1, r0
 800254c:	4b0d      	ldr	r3, [pc, #52]	; (8002584 <HAL_RCC_ClockConfig+0x1b4>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	091b      	lsrs	r3, r3, #4
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	4a0c      	ldr	r2, [pc, #48]	; (8002588 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	5cd3      	ldrb	r3, [r2, r3]
 800255a:	f003 031f 	and.w	r3, r3, #31
 800255e:	fa21 f303 	lsr.w	r3, r1, r3
 8002562:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_RCC_ClockConfig+0x1bc>)
 8002564:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002566:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <HAL_RCC_ClockConfig+0x1c0>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fe fd3e 	bl	8000fec <HAL_InitTick>
 8002570:	4603      	mov	r3, r0
 8002572:	72fb      	strb	r3, [r7, #11]

  return status;
 8002574:	7afb      	ldrb	r3, [r7, #11]
}
 8002576:	4618      	mov	r0, r3
 8002578:	3710      	adds	r7, #16
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40022000 	.word	0x40022000
 8002584:	40021000 	.word	0x40021000
 8002588:	08004ab4 	.word	0x08004ab4
 800258c:	20000000 	.word	0x20000000
 8002590:	20000004 	.word	0x20000004

08002594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002594:	b480      	push	{r7}
 8002596:	b089      	sub	sp, #36	; 0x24
 8002598:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
 800259e:	2300      	movs	r3, #0
 80025a0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025a2:	4b3d      	ldr	r3, [pc, #244]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	f003 030c 	and.w	r3, r3, #12
 80025aa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025ac:	4b3a      	ldr	r3, [pc, #232]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	f003 0303 	and.w	r3, r3, #3
 80025b4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d005      	beq.n	80025c8 <HAL_RCC_GetSysClockFreq+0x34>
 80025bc:	693b      	ldr	r3, [r7, #16]
 80025be:	2b0c      	cmp	r3, #12
 80025c0:	d121      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d11e      	bne.n	8002606 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025c8:	4b33      	ldr	r3, [pc, #204]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d107      	bne.n	80025e4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025d4:	4b30      	ldr	r3, [pc, #192]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 80025d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025da:	0a1b      	lsrs	r3, r3, #8
 80025dc:	f003 030f 	and.w	r3, r3, #15
 80025e0:	61fb      	str	r3, [r7, #28]
 80025e2:	e005      	b.n	80025f0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025e4:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	091b      	lsrs	r3, r3, #4
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80025f0:	4a2a      	ldr	r2, [pc, #168]	; (800269c <HAL_RCC_GetSysClockFreq+0x108>)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025f8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d10d      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002604:	e00a      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	2b04      	cmp	r3, #4
 800260a:	d102      	bne.n	8002612 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800260c:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800260e:	61bb      	str	r3, [r7, #24]
 8002610:	e004      	b.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b08      	cmp	r3, #8
 8002616:	d101      	bne.n	800261c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002618:	4b22      	ldr	r3, [pc, #136]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x110>)
 800261a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	2b0c      	cmp	r3, #12
 8002620:	d133      	bne.n	800268a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002622:	4b1d      	ldr	r3, [pc, #116]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f003 0303 	and.w	r3, r3, #3
 800262a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d002      	beq.n	8002638 <HAL_RCC_GetSysClockFreq+0xa4>
 8002632:	2b03      	cmp	r3, #3
 8002634:	d003      	beq.n	800263e <HAL_RCC_GetSysClockFreq+0xaa>
 8002636:	e005      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002638:	4b19      	ldr	r3, [pc, #100]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x10c>)
 800263a:	617b      	str	r3, [r7, #20]
      break;
 800263c:	e005      	b.n	800264a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800263e:	4b19      	ldr	r3, [pc, #100]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x110>)
 8002640:	617b      	str	r3, [r7, #20]
      break;
 8002642:	e002      	b.n	800264a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	617b      	str	r3, [r7, #20]
      break;
 8002648:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800264a:	4b13      	ldr	r3, [pc, #76]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	091b      	lsrs	r3, r3, #4
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	3301      	adds	r3, #1
 8002656:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	0a1b      	lsrs	r3, r3, #8
 800265e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002662:	697a      	ldr	r2, [r7, #20]
 8002664:	fb02 f203 	mul.w	r2, r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	fbb2 f3f3 	udiv	r3, r2, r3
 800266e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002670:	4b09      	ldr	r3, [pc, #36]	; (8002698 <HAL_RCC_GetSysClockFreq+0x104>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	0e5b      	lsrs	r3, r3, #25
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800268a:	69bb      	ldr	r3, [r7, #24]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3724      	adds	r7, #36	; 0x24
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr
 8002698:	40021000 	.word	0x40021000
 800269c:	08004acc 	.word	0x08004acc
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	007a1200 	.word	0x007a1200

080026a8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000000 	.word	0x20000000

080026c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026c4:	f7ff fff0 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026c8:	4601      	mov	r1, r0
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4a04      	ldr	r2, [pc, #16]	; (80026e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026d6:	5cd3      	ldrb	r3, [r2, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	40021000 	.word	0x40021000
 80026e8:	08004ac4 	.word	0x08004ac4

080026ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80026f0:	f7ff ffda 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026f4:	4601      	mov	r1, r0
 80026f6:	4b06      	ldr	r3, [pc, #24]	; (8002710 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	0adb      	lsrs	r3, r3, #11
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	4a04      	ldr	r2, [pc, #16]	; (8002714 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002702:	5cd3      	ldrb	r3, [r2, r3]
 8002704:	f003 031f 	and.w	r3, r3, #31
 8002708:	fa21 f303 	lsr.w	r3, r1, r3
}
 800270c:	4618      	mov	r0, r3
 800270e:	bd80      	pop	{r7, pc}
 8002710:	40021000 	.word	0x40021000
 8002714:	08004ac4 	.word	0x08004ac4

08002718 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b086      	sub	sp, #24
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002720:	2300      	movs	r3, #0
 8002722:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002724:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002728:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d003      	beq.n	8002738 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002730:	f7ff fa04 	bl	8001b3c <HAL_PWREx_GetVoltageRange>
 8002734:	6178      	str	r0, [r7, #20]
 8002736:	e014      	b.n	8002762 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002738:	4a25      	ldr	r2, [pc, #148]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273a:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002742:	6593      	str	r3, [r2, #88]	; 0x58
 8002744:	4b22      	ldr	r3, [pc, #136]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800274c:	60fb      	str	r3, [r7, #12]
 800274e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002750:	f7ff f9f4 	bl	8001b3c <HAL_PWREx_GetVoltageRange>
 8002754:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002756:	4a1e      	ldr	r2, [pc, #120]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002758:	4b1d      	ldr	r3, [pc, #116]	; (80027d0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800275a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800275c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002760:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002768:	d10b      	bne.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2b80      	cmp	r3, #128	; 0x80
 800276e:	d919      	bls.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2ba0      	cmp	r3, #160	; 0xa0
 8002774:	d902      	bls.n	800277c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002776:	2302      	movs	r3, #2
 8002778:	613b      	str	r3, [r7, #16]
 800277a:	e013      	b.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800277c:	2301      	movs	r3, #1
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	e010      	b.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	d902      	bls.n	800278e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002788:	2303      	movs	r3, #3
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	e00a      	b.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b80      	cmp	r3, #128	; 0x80
 8002792:	d102      	bne.n	800279a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002794:	2302      	movs	r3, #2
 8002796:	613b      	str	r3, [r7, #16]
 8002798:	e004      	b.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2b70      	cmp	r3, #112	; 0x70
 800279e:	d101      	bne.n	80027a4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027a0:	2301      	movs	r3, #1
 80027a2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027a4:	490b      	ldr	r1, [pc, #44]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a6:	4b0b      	ldr	r3, [pc, #44]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f023 0207 	bic.w	r2, r3, #7
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027b4:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0207 	and.w	r2, r3, #7
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	429a      	cmp	r2, r3
 80027c0:	d001      	beq.n	80027c6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e000      	b.n	80027c8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3718      	adds	r7, #24
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}
 80027d0:	40021000 	.word	0x40021000
 80027d4:	40022000 	.word	0x40022000

080027d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027e0:	2300      	movs	r3, #0
 80027e2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027e4:	2300      	movs	r3, #0
 80027e6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d03f      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027fc:	d01c      	beq.n	8002838 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80027fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002802:	d802      	bhi.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00e      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8002808:	e01f      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800280a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800280e:	d003      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002810:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002814:	d01c      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002816:	e018      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002818:	4a85      	ldr	r2, [pc, #532]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281a:	4b85      	ldr	r3, [pc, #532]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002822:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002824:	e015      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	2100      	movs	r1, #0
 800282c:	4618      	mov	r0, r3
 800282e:	f000 fab9 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002836:	e00c      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3320      	adds	r3, #32
 800283c:	2100      	movs	r1, #0
 800283e:	4618      	mov	r0, r3
 8002840:	f000 fba0 	bl	8002f84 <RCCEx_PLLSAI2_Config>
 8002844:	4603      	mov	r3, r0
 8002846:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002848:	e003      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	74fb      	strb	r3, [r7, #19]
      break;
 800284e:	e000      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8002850:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002852:	7cfb      	ldrb	r3, [r7, #19]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d10b      	bne.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002858:	4975      	ldr	r1, [pc, #468]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800285a:	4b75      	ldr	r3, [pc, #468]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800285c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002860:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002868:	4313      	orrs	r3, r2
 800286a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800286e:	e001      	b.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002870:	7cfb      	ldrb	r3, [r7, #19]
 8002872:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287c:	2b00      	cmp	r3, #0
 800287e:	d03f      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002884:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002888:	d01c      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800288a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800288e:	d802      	bhi.n	8002896 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00e      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002894:	e01f      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002896:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800289a:	d003      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 800289c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80028a0:	d01c      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x104>
 80028a2:	e018      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028a4:	4a62      	ldr	r2, [pc, #392]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028a6:	4b62      	ldr	r3, [pc, #392]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028b0:	e015      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fa73 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028c2:	e00c      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3320      	adds	r3, #32
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fb5a 	bl	8002f84 <RCCEx_PLLSAI2_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028d4:	e003      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	74fb      	strb	r3, [r7, #19]
      break;
 80028da:	e000      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80028dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10b      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028e4:	4952      	ldr	r1, [pc, #328]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028e6:	4b52      	ldr	r3, [pc, #328]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80028e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028fa:	e001      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002908:	2b00      	cmp	r3, #0
 800290a:	f000 80a0 	beq.w	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290e:	2300      	movs	r3, #0
 8002910:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002912:	4b47      	ldr	r3, [pc, #284]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800291a:	2b00      	cmp	r3, #0
 800291c:	d101      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002922:	2300      	movs	r3, #0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00d      	beq.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002928:	4a41      	ldr	r2, [pc, #260]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800292a:	4b41      	ldr	r3, [pc, #260]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800292c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800292e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002932:	6593      	str	r3, [r2, #88]	; 0x58
 8002934:	4b3e      	ldr	r3, [pc, #248]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800293c:	60bb      	str	r3, [r7, #8]
 800293e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002940:	2301      	movs	r3, #1
 8002942:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002944:	4a3b      	ldr	r2, [pc, #236]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002946:	4b3b      	ldr	r3, [pc, #236]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002950:	f7fe fb9c 	bl	800108c <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002956:	e009      	b.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002958:	f7fe fb98 	bl	800108c <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d902      	bls.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	74fb      	strb	r3, [r7, #19]
        break;
 800296a:	e005      	b.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800296c:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ef      	beq.n	8002958 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002978:	7cfb      	ldrb	r3, [r7, #19]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d15c      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800297e:	4b2c      	ldr	r3, [pc, #176]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002984:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002988:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800298a:	697b      	ldr	r3, [r7, #20]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01f      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	429a      	cmp	r2, r3
 800299a:	d019      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800299c:	4b24      	ldr	r3, [pc, #144]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800299e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029a8:	4a21      	ldr	r2, [pc, #132]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029b8:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ba:	4b1d      	ldr	r3, [pc, #116]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029c8:	4a19      	ldr	r2, [pc, #100]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d016      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029da:	f7fe fb57 	bl	800108c <HAL_GetTick>
 80029de:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029e0:	e00b      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e2:	f7fe fb53 	bl	800108c <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d902      	bls.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	74fb      	strb	r3, [r7, #19]
            break;
 80029f8:	e006      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ec      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d10c      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0e:	4908      	ldr	r1, [pc, #32]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a26:	e009      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a28:	7cfb      	ldrb	r3, [r7, #19]
 8002a2a:	74bb      	strb	r3, [r7, #18]
 8002a2c:	e006      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x264>
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a38:	7cfb      	ldrb	r3, [r7, #19]
 8002a3a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a3c:	7c7b      	ldrb	r3, [r7, #17]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d105      	bne.n	8002a4e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a42:	4a9e      	ldr	r2, [pc, #632]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a44:	4b9d      	ldr	r3, [pc, #628]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00a      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a5a:	4998      	ldr	r1, [pc, #608]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5c:	4b97      	ldr	r3, [pc, #604]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a62:	f023 0203 	bic.w	r2, r3, #3
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d00a      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a7c:	498f      	ldr	r1, [pc, #572]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a7e:	4b8f      	ldr	r3, [pc, #572]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a84:	f023 020c 	bic.w	r2, r3, #12
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0304 	and.w	r3, r3, #4
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d00a      	beq.n	8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a9e:	4987      	ldr	r1, [pc, #540]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa0:	4b86      	ldr	r3, [pc, #536]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002aa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0308 	and.w	r3, r3, #8
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d00a      	beq.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ac0:	497e      	ldr	r1, [pc, #504]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ac2:	4b7e      	ldr	r3, [pc, #504]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0310 	and.w	r3, r3, #16
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ae2:	4976      	ldr	r1, [pc, #472]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae4:	4b75      	ldr	r3, [pc, #468]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0320 	and.w	r3, r3, #32
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b04:	496d      	ldr	r1, [pc, #436]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b06:	4b6d      	ldr	r3, [pc, #436]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b26:	4965      	ldr	r1, [pc, #404]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b28:	4b64      	ldr	r3, [pc, #400]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b48:	495c      	ldr	r1, [pc, #368]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b4a:	4b5c      	ldr	r3, [pc, #368]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b50:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b6a:	4954      	ldr	r1, [pc, #336]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b6c:	4b53      	ldr	r3, [pc, #332]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b72:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b8c:	494b      	ldr	r1, [pc, #300]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b8e:	4b4b      	ldr	r3, [pc, #300]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002b90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b94:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bae:	4943      	ldr	r1, [pc, #268]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb0:	4b42      	ldr	r3, [pc, #264]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d028      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bd0:	493a      	ldr	r1, [pc, #232]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd2:	4b3a      	ldr	r3, [pc, #232]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bee:	d106      	bne.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bf0:	4a32      	ldr	r2, [pc, #200]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bf2:	4b32      	ldr	r3, [pc, #200]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002bf4:	68db      	ldr	r3, [r3, #12]
 8002bf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bfa:	60d3      	str	r3, [r2, #12]
 8002bfc:	e011      	b.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c02:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c06:	d10c      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3304      	adds	r3, #4
 8002c0c:	2101      	movs	r1, #1
 8002c0e:	4618      	mov	r0, r3
 8002c10:	f000 f8c8 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002c14:	4603      	mov	r3, r0
 8002c16:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8002c1e:	7cfb      	ldrb	r3, [r7, #19]
 8002c20:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d028      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c2e:	4923      	ldr	r1, [pc, #140]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c30:	4b22      	ldr	r3, [pc, #136]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c36:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c48:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c4c:	d106      	bne.n	8002c5c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c4e:	4a1b      	ldr	r2, [pc, #108]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c50:	4b1a      	ldr	r3, [pc, #104]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c58:	60d3      	str	r3, [r2, #12]
 8002c5a:	e011      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c64:	d10c      	bne.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3304      	adds	r3, #4
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f000 f899 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002c72:	4603      	mov	r3, r0
 8002c74:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c76:	7cfb      	ldrb	r3, [r7, #19]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002c7c:	7cfb      	ldrb	r3, [r7, #19]
 8002c7e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d02b      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c8c:	490b      	ldr	r1, [pc, #44]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c8e:	4b0b      	ldr	r3, [pc, #44]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c94:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002caa:	d109      	bne.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cac:	4a03      	ldr	r2, [pc, #12]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cae:	4b03      	ldr	r3, [pc, #12]	; (8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb6:	60d3      	str	r3, [r2, #12]
 8002cb8:	e014      	b.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002cba:	bf00      	nop
 8002cbc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc8:	d10c      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	3304      	adds	r3, #4
 8002cce:	2101      	movs	r1, #1
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 f867 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cda:	7cfb      	ldrb	r3, [r7, #19]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8002ce0:	7cfb      	ldrb	r3, [r7, #19]
 8002ce2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d02f      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cf0:	492b      	ldr	r1, [pc, #172]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cf2:	4b2b      	ldr	r3, [pc, #172]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d0e:	d10d      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3304      	adds	r3, #4
 8002d14:	2102      	movs	r1, #2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 f844 	bl	8002da4 <RCCEx_PLLSAI1_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d20:	7cfb      	ldrb	r3, [r7, #19]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d014      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002d26:	7cfb      	ldrb	r3, [r7, #19]
 8002d28:	74bb      	strb	r3, [r7, #18]
 8002d2a:	e011      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d34:	d10c      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	3320      	adds	r3, #32
 8002d3a:	2102      	movs	r1, #2
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f000 f921 	bl	8002f84 <RCCEx_PLLSAI2_Config>
 8002d42:	4603      	mov	r3, r0
 8002d44:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d46:	7cfb      	ldrb	r3, [r7, #19]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002d4c:	7cfb      	ldrb	r3, [r7, #19]
 8002d4e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d5c:	4910      	ldr	r1, [pc, #64]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d5e:	4b10      	ldr	r3, [pc, #64]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d64:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00b      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d7e:	4908      	ldr	r1, [pc, #32]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d80:	4b07      	ldr	r3, [pc, #28]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d96:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	40021000 	.word	0x40021000

08002da4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b084      	sub	sp, #16
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002db2:	4b73      	ldr	r3, [pc, #460]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0303 	and.w	r3, r3, #3
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d018      	beq.n	8002df0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dbe:	4b70      	ldr	r3, [pc, #448]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dc0:	68db      	ldr	r3, [r3, #12]
 8002dc2:	f003 0203 	and.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d10d      	bne.n	8002dea <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
       ||
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d009      	beq.n	8002dea <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dd6:	4b6a      	ldr	r3, [pc, #424]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	091b      	lsrs	r3, r3, #4
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
       ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d044      	beq.n	8002e74 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	73fb      	strb	r3, [r7, #15]
 8002dee:	e041      	b.n	8002e74 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b02      	cmp	r3, #2
 8002df6:	d00c      	beq.n	8002e12 <RCCEx_PLLSAI1_Config+0x6e>
 8002df8:	2b03      	cmp	r3, #3
 8002dfa:	d013      	beq.n	8002e24 <RCCEx_PLLSAI1_Config+0x80>
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d120      	bne.n	8002e42 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e00:	4b5f      	ldr	r3, [pc, #380]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0302 	and.w	r3, r3, #2
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d11d      	bne.n	8002e48 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e10:	e01a      	b.n	8002e48 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e12:	4b5b      	ldr	r3, [pc, #364]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d116      	bne.n	8002e4c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e22:	e013      	b.n	8002e4c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e24:	4b56      	ldr	r3, [pc, #344]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d10f      	bne.n	8002e50 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e30:	4b53      	ldr	r3, [pc, #332]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e40:	e006      	b.n	8002e50 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	73fb      	strb	r3, [r7, #15]
      break;
 8002e46:	e004      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e48:	bf00      	nop
 8002e4a:	e002      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e4c:	bf00      	nop
 8002e4e:	e000      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002e50:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e52:	7bfb      	ldrb	r3, [r7, #15]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d10d      	bne.n	8002e74 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e58:	4849      	ldr	r0, [pc, #292]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5a:	4b49      	ldr	r3, [pc, #292]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	4313      	orrs	r3, r2
 8002e72:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e74:	7bfb      	ldrb	r3, [r7, #15]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d17d      	bne.n	8002f76 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e7a:	4a41      	ldr	r2, [pc, #260]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e7c:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e84:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e86:	f7fe f901 	bl	800108c <HAL_GetTick>
 8002e8a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e8c:	e009      	b.n	8002ea2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e8e:	f7fe f8fd 	bl	800108c <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d902      	bls.n	8002ea2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	73fb      	strb	r3, [r7, #15]
        break;
 8002ea0:	e005      	b.n	8002eae <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ea2:	4b37      	ldr	r3, [pc, #220]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1ef      	bne.n	8002e8e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002eae:	7bfb      	ldrb	r3, [r7, #15]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d160      	bne.n	8002f76 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d111      	bne.n	8002ede <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002eba:	4831      	ldr	r0, [pc, #196]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ebc:	4b30      	ldr	r3, [pc, #192]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6892      	ldr	r2, [r2, #8]
 8002ecc:	0211      	lsls	r1, r2, #8
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68d2      	ldr	r2, [r2, #12]
 8002ed2:	0912      	lsrs	r2, r2, #4
 8002ed4:	0452      	lsls	r2, r2, #17
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	6103      	str	r3, [r0, #16]
 8002edc:	e027      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d112      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ee4:	4826      	ldr	r0, [pc, #152]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002eee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6892      	ldr	r2, [r2, #8]
 8002ef6:	0211      	lsls	r1, r2, #8
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6912      	ldr	r2, [r2, #16]
 8002efc:	0852      	lsrs	r2, r2, #1
 8002efe:	3a01      	subs	r2, #1
 8002f00:	0552      	lsls	r2, r2, #21
 8002f02:	430a      	orrs	r2, r1
 8002f04:	4313      	orrs	r3, r2
 8002f06:	6103      	str	r3, [r0, #16]
 8002f08:	e011      	b.n	8002f2e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f0a:	481d      	ldr	r0, [pc, #116]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f0c:	4b1c      	ldr	r3, [pc, #112]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6892      	ldr	r2, [r2, #8]
 8002f1c:	0211      	lsls	r1, r2, #8
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6952      	ldr	r2, [r2, #20]
 8002f22:	0852      	lsrs	r2, r2, #1
 8002f24:	3a01      	subs	r2, #1
 8002f26:	0652      	lsls	r2, r2, #25
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	6103      	str	r3, [r0, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f2e:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f30:	4b13      	ldr	r3, [pc, #76]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f38:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3a:	f7fe f8a7 	bl	800108c <HAL_GetTick>
 8002f3e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f40:	e009      	b.n	8002f56 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f42:	f7fe f8a3 	bl	800108c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d902      	bls.n	8002f56 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	73fb      	strb	r3, [r7, #15]
          break;
 8002f54:	e005      	b.n	8002f62 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f56:	4b0a      	ldr	r3, [pc, #40]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d0ef      	beq.n	8002f42 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002f62:	7bfb      	ldrb	r3, [r7, #15]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d106      	bne.n	8002f76 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f68:	4905      	ldr	r1, [pc, #20]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f6a:	4b05      	ldr	r3, [pc, #20]	; (8002f80 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3710      	adds	r7, #16
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}
 8002f80:	40021000 	.word	0x40021000

08002f84 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f92:	4b68      	ldr	r3, [pc, #416]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	f003 0303 	and.w	r3, r3, #3
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d018      	beq.n	8002fd0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002f9e:	4b65      	ldr	r3, [pc, #404]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fa0:	68db      	ldr	r3, [r3, #12]
 8002fa2:	f003 0203 	and.w	r2, r3, #3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d10d      	bne.n	8002fca <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
       ||
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d009      	beq.n	8002fca <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fb6:	4b5f      	ldr	r3, [pc, #380]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	1c5a      	adds	r2, r3, #1
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	685b      	ldr	r3, [r3, #4]
       ||
 8002fc6:	429a      	cmp	r2, r3
 8002fc8:	d044      	beq.n	8003054 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	73fb      	strb	r3, [r7, #15]
 8002fce:	e041      	b.n	8003054 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d00c      	beq.n	8002ff2 <RCCEx_PLLSAI2_Config+0x6e>
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d013      	beq.n	8003004 <RCCEx_PLLSAI2_Config+0x80>
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d120      	bne.n	8003022 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fe0:	4b54      	ldr	r3, [pc, #336]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0302 	and.w	r3, r3, #2
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d11d      	bne.n	8003028 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002fec:	2301      	movs	r3, #1
 8002fee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ff0:	e01a      	b.n	8003028 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ff2:	4b50      	ldr	r3, [pc, #320]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d116      	bne.n	800302c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003002:	e013      	b.n	800302c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003004:	4b4b      	ldr	r3, [pc, #300]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10f      	bne.n	8003030 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003010:	4b48      	ldr	r3, [pc, #288]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d109      	bne.n	8003030 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003020:	e006      	b.n	8003030 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	73fb      	strb	r3, [r7, #15]
      break;
 8003026:	e004      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003028:	bf00      	nop
 800302a:	e002      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800302c:	bf00      	nop
 800302e:	e000      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8003030:	bf00      	nop
    }

    if(status == HAL_OK)
 8003032:	7bfb      	ldrb	r3, [r7, #15]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003038:	483e      	ldr	r0, [pc, #248]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800303a:	4b3e      	ldr	r3, [pc, #248]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	3b01      	subs	r3, #1
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	430b      	orrs	r3, r1
 8003050:	4313      	orrs	r3, r2
 8003052:	60c3      	str	r3, [r0, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003054:	7bfb      	ldrb	r3, [r7, #15]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d167      	bne.n	800312a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800305a:	4a36      	ldr	r2, [pc, #216]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800305c:	4b35      	ldr	r3, [pc, #212]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003066:	f7fe f811 	bl	800108c <HAL_GetTick>
 800306a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800306c:	e009      	b.n	8003082 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800306e:	f7fe f80d 	bl	800108c <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	2b02      	cmp	r3, #2
 800307a:	d902      	bls.n	8003082 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	73fb      	strb	r3, [r7, #15]
        break;
 8003080:	e005      	b.n	800308e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003082:	4b2c      	ldr	r3, [pc, #176]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1ef      	bne.n	800306e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800308e:	7bfb      	ldrb	r3, [r7, #15]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d14a      	bne.n	800312a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d111      	bne.n	80030be <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800309a:	4826      	ldr	r0, [pc, #152]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800309c:	4b25      	ldr	r3, [pc, #148]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800309e:	695b      	ldr	r3, [r3, #20]
 80030a0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6892      	ldr	r2, [r2, #8]
 80030ac:	0211      	lsls	r1, r2, #8
 80030ae:	687a      	ldr	r2, [r7, #4]
 80030b0:	68d2      	ldr	r2, [r2, #12]
 80030b2:	0912      	lsrs	r2, r2, #4
 80030b4:	0452      	lsls	r2, r2, #17
 80030b6:	430a      	orrs	r2, r1
 80030b8:	4313      	orrs	r3, r2
 80030ba:	6143      	str	r3, [r0, #20]
 80030bc:	e011      	b.n	80030e2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030be:	481d      	ldr	r0, [pc, #116]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030c0:	4b1c      	ldr	r3, [pc, #112]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030c2:	695b      	ldr	r3, [r3, #20]
 80030c4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	6892      	ldr	r2, [r2, #8]
 80030d0:	0211      	lsls	r1, r2, #8
 80030d2:	687a      	ldr	r2, [r7, #4]
 80030d4:	6912      	ldr	r2, [r2, #16]
 80030d6:	0852      	lsrs	r2, r2, #1
 80030d8:	3a01      	subs	r2, #1
 80030da:	0652      	lsls	r2, r2, #25
 80030dc:	430a      	orrs	r2, r1
 80030de:	4313      	orrs	r3, r2
 80030e0:	6143      	str	r3, [r0, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030e2:	4a14      	ldr	r2, [pc, #80]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030e4:	4b13      	ldr	r3, [pc, #76]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ec:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030ee:	f7fd ffcd 	bl	800108c <HAL_GetTick>
 80030f2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030f4:	e009      	b.n	800310a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80030f6:	f7fd ffc9 	bl	800108c <HAL_GetTick>
 80030fa:	4602      	mov	r2, r0
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	2b02      	cmp	r3, #2
 8003102:	d902      	bls.n	800310a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8003104:	2303      	movs	r3, #3
 8003106:	73fb      	strb	r3, [r7, #15]
          break;
 8003108:	e005      	b.n	8003116 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800310a:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0ef      	beq.n	80030f6 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8003116:	7bfb      	ldrb	r3, [r7, #15]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800311c:	4905      	ldr	r1, [pc, #20]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 800311e:	4b05      	ldr	r3, [pc, #20]	; (8003134 <RCCEx_PLLSAI2_Config+0x1b0>)
 8003120:	695a      	ldr	r2, [r3, #20]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	4313      	orrs	r3, r2
 8003128:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800312a:	7bfb      	ldrb	r3, [r7, #15]
}
 800312c:	4618      	mov	r0, r3
 800312e:	3710      	adds	r7, #16
 8003130:	46bd      	mov	sp, r7
 8003132:	bd80      	pop	{r7, pc}
 8003134:	40021000 	.word	0x40021000

08003138 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e040      	b.n	80031cc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fd fdf2 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2224      	movs	r2, #36	; 0x24
 8003164:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	6812      	ldr	r2, [r2, #0]
 800316e:	6812      	ldr	r2, [r2, #0]
 8003170:	f022 0201 	bic.w	r2, r2, #1
 8003174:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 fae8 	bl	800374c <UART_SetConfig>
 800317c:	4603      	mov	r3, r0
 800317e:	2b01      	cmp	r3, #1
 8003180:	d101      	bne.n	8003186 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e022      	b.n	80031cc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318a:	2b00      	cmp	r3, #0
 800318c:	d002      	beq.n	8003194 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fd60 	bl	8003c54 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	687a      	ldr	r2, [r7, #4]
 800319a:	6812      	ldr	r2, [r2, #0]
 800319c:	6852      	ldr	r2, [r2, #4]
 800319e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	6812      	ldr	r2, [r2, #0]
 80031ac:	6892      	ldr	r2, [r2, #8]
 80031ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	687a      	ldr	r2, [r7, #4]
 80031ba:	6812      	ldr	r2, [r2, #0]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f000 fde7 	bl	8003d98 <UART_CheckIdleState>
 80031ca:	4603      	mov	r3, r0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08a      	sub	sp, #40	; 0x28
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	603b      	str	r3, [r7, #0]
 80031e0:	4613      	mov	r3, r2
 80031e2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e8:	2b20      	cmp	r3, #32
 80031ea:	f040 8081 	bne.w	80032f0 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d002      	beq.n	80031fa <HAL_UART_Transmit+0x26>
 80031f4:	88fb      	ldrh	r3, [r7, #6]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e079      	b.n	80032f2 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_UART_Transmit+0x38>
 8003208:	2302      	movs	r3, #2
 800320a:	e072      	b.n	80032f2 <HAL_UART_Transmit+0x11e>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2221      	movs	r2, #33	; 0x21
 800321e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003220:	f7fd ff34 	bl	800108c <HAL_GetTick>
 8003224:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	88fa      	ldrh	r2, [r7, #6]
 800322a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	88fa      	ldrh	r2, [r7, #6]
 8003232:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323e:	d108      	bne.n	8003252 <HAL_UART_Transmit+0x7e>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d104      	bne.n	8003252 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003248:	2300      	movs	r3, #0
 800324a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	61bb      	str	r3, [r7, #24]
 8003250:	e003      	b.n	800325a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003256:	2300      	movs	r3, #0
 8003258:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003262:	e02d      	b.n	80032c0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2200      	movs	r2, #0
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fdd7 	bl	8003e22 <UART_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e039      	b.n	80032f2 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d10b      	bne.n	800329c <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	8812      	ldrh	r2, [r2, #0]
 800328c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003290:	b292      	uxth	r2, r2
 8003292:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	3302      	adds	r3, #2
 8003298:	61bb      	str	r3, [r7, #24]
 800329a:	e008      	b.n	80032ae <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	69fa      	ldr	r2, [r7, #28]
 80032a2:	7812      	ldrb	r2, [r2, #0]
 80032a4:	b292      	uxth	r2, r2
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	3301      	adds	r3, #1
 80032ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032b4:	b29b      	uxth	r3, r3
 80032b6:	3b01      	subs	r3, #1
 80032b8:	b29a      	uxth	r2, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1cb      	bne.n	8003264 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2200      	movs	r2, #0
 80032d4:	2140      	movs	r1, #64	; 0x40
 80032d6:	68f8      	ldr	r0, [r7, #12]
 80032d8:	f000 fda3 	bl	8003e22 <UART_WaitOnFlagUntilTimeout>
 80032dc:	4603      	mov	r3, r0
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80032e2:	2303      	movs	r3, #3
 80032e4:	e005      	b.n	80032f2 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	2220      	movs	r2, #32
 80032ea:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e000      	b.n	80032f2 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80032f0:	2302      	movs	r3, #2
  }
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3720      	adds	r7, #32
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b08a      	sub	sp, #40	; 0x28
 80032fe:	af02      	add	r7, sp, #8
 8003300:	60f8      	str	r0, [r7, #12]
 8003302:	60b9      	str	r1, [r7, #8]
 8003304:	603b      	str	r3, [r7, #0]
 8003306:	4613      	mov	r3, r2
 8003308:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800330e:	2b20      	cmp	r3, #32
 8003310:	f040 80bb 	bne.w	800348a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d002      	beq.n	8003320 <HAL_UART_Receive+0x26>
 800331a:	88fb      	ldrh	r3, [r7, #6]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0b3      	b.n	800348c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800332a:	2b01      	cmp	r3, #1
 800332c:	d101      	bne.n	8003332 <HAL_UART_Receive+0x38>
 800332e:	2302      	movs	r3, #2
 8003330:	e0ac      	b.n	800348c <HAL_UART_Receive+0x192>
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	2201      	movs	r2, #1
 8003336:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	2200      	movs	r2, #0
 800333e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2222      	movs	r2, #34	; 0x22
 8003344:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003346:	f7fd fea1 	bl	800108c <HAL_GetTick>
 800334a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	88fa      	ldrh	r2, [r7, #6]
 8003350:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	88fa      	ldrh	r2, [r7, #6]
 8003358:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003364:	d10e      	bne.n	8003384 <HAL_UART_Receive+0x8a>
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d105      	bne.n	800337a <HAL_UART_Receive+0x80>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003374:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003378:	e02d      	b.n	80033d6 <HAL_UART_Receive+0xdc>
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	22ff      	movs	r2, #255	; 0xff
 800337e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003382:	e028      	b.n	80033d6 <HAL_UART_Receive+0xdc>
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d10d      	bne.n	80033a8 <HAL_UART_Receive+0xae>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <HAL_UART_Receive+0xa4>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	22ff      	movs	r2, #255	; 0xff
 8003398:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800339c:	e01b      	b.n	80033d6 <HAL_UART_Receive+0xdc>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	227f      	movs	r2, #127	; 0x7f
 80033a2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033a6:	e016      	b.n	80033d6 <HAL_UART_Receive+0xdc>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80033b0:	d10d      	bne.n	80033ce <HAL_UART_Receive+0xd4>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d104      	bne.n	80033c4 <HAL_UART_Receive+0xca>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	227f      	movs	r2, #127	; 0x7f
 80033be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033c2:	e008      	b.n	80033d6 <HAL_UART_Receive+0xdc>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	223f      	movs	r2, #63	; 0x3f
 80033c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033cc:	e003      	b.n	80033d6 <HAL_UART_Receive+0xdc>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80033dc:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033e6:	d108      	bne.n	80033fa <HAL_UART_Receive+0x100>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d104      	bne.n	80033fa <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	61bb      	str	r3, [r7, #24]
 80033f8:	e003      	b.n	8003402 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800340a:	e033      	b.n	8003474 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	2200      	movs	r2, #0
 8003414:	2120      	movs	r1, #32
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fd03 	bl	8003e22 <UART_WaitOnFlagUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e032      	b.n	800348c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d10c      	bne.n	8003446 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003432:	b29a      	uxth	r2, r3
 8003434:	8a7b      	ldrh	r3, [r7, #18]
 8003436:	4013      	ands	r3, r2
 8003438:	b29a      	uxth	r2, r3
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	3302      	adds	r3, #2
 8003442:	61bb      	str	r3, [r7, #24]
 8003444:	e00d      	b.n	8003462 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800344c:	b29b      	uxth	r3, r3
 800344e:	b2da      	uxtb	r2, r3
 8003450:	8a7b      	ldrh	r3, [r7, #18]
 8003452:	b2db      	uxtb	r3, r3
 8003454:	4013      	ands	r3, r2
 8003456:	b2da      	uxtb	r2, r3
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	3301      	adds	r3, #1
 8003460:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003468:	b29b      	uxth	r3, r3
 800346a:	3b01      	subs	r3, #1
 800346c:	b29a      	uxth	r2, r3
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1c5      	bne.n	800340c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2220      	movs	r2, #32
 8003484:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 800348a:	2302      	movs	r3, #2
  }
}
 800348c:	4618      	mov	r0, r3
 800348e:	3720      	adds	r7, #32
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	69db      	ldr	r3, [r3, #28]
 80034a2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80034b4:	69fa      	ldr	r2, [r7, #28]
 80034b6:	f640 030f 	movw	r3, #2063	; 0x80f
 80034ba:	4013      	ands	r3, r2
 80034bc:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d113      	bne.n	80034ec <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	f003 0320 	and.w	r3, r3, #32
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00e      	beq.n	80034ec <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034ce:	69bb      	ldr	r3, [r7, #24]
 80034d0:	f003 0320 	and.w	r3, r3, #32
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f000 8114 	beq.w	800370a <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	4798      	blx	r3
      }
      return;
 80034ea:	e10e      	b.n	800370a <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80034ec:	693b      	ldr	r3, [r7, #16]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 80d6 	beq.w	80036a0 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d105      	bne.n	800350a <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4b86      	ldr	r3, [pc, #536]	; (800371c <HAL_UART_IRQHandler+0x288>)
 8003502:	4013      	ands	r3, r2
 8003504:	2b00      	cmp	r3, #0
 8003506:	f000 80cb 	beq.w	80036a0 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0301 	and.w	r3, r3, #1
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00e      	beq.n	8003532 <HAL_UART_IRQHandler+0x9e>
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800351a:	2b00      	cmp	r3, #0
 800351c:	d009      	beq.n	8003532 <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2201      	movs	r2, #1
 8003524:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800352a:	f043 0201 	orr.w	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	f003 0302 	and.w	r3, r3, #2
 8003538:	2b00      	cmp	r3, #0
 800353a:	d00e      	beq.n	800355a <HAL_UART_IRQHandler+0xc6>
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	f003 0301 	and.w	r3, r3, #1
 8003542:	2b00      	cmp	r3, #0
 8003544:	d009      	beq.n	800355a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2202      	movs	r2, #2
 800354c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003552:	f043 0204 	orr.w	r2, r3, #4
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d00e      	beq.n	8003582 <HAL_UART_IRQHandler+0xee>
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d009      	beq.n	8003582 <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2204      	movs	r2, #4
 8003574:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800357a:	f043 0202 	orr.w	r2, r3, #2
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	f003 0308 	and.w	r3, r3, #8
 8003588:	2b00      	cmp	r3, #0
 800358a:	d013      	beq.n	80035b4 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	f003 0320 	and.w	r3, r3, #32
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800359c:	2b00      	cmp	r3, #0
 800359e:	d009      	beq.n	80035b4 <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2208      	movs	r2, #8
 80035a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035ac:	f043 0208 	orr.w	r2, r3, #8
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00f      	beq.n	80035de <HAL_UART_IRQHandler+0x14a>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d00a      	beq.n	80035de <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035d6:	f043 0220 	orr.w	r2, r3, #32
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 8093 	beq.w	800370e <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 0320 	and.w	r3, r3, #32
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00c      	beq.n	800360c <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80035f2:	69bb      	ldr	r3, [r7, #24]
 80035f4:	f003 0320 	and.w	r3, r3, #32
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003610:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800361c:	2b40      	cmp	r3, #64	; 0x40
 800361e:	d004      	beq.n	800362a <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003626:	2b00      	cmp	r3, #0
 8003628:	d031      	beq.n	800368e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800362a:	6878      	ldr	r0, [r7, #4]
 800362c:	f000 fc74 	bl	8003f18 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d123      	bne.n	8003686 <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	6812      	ldr	r2, [r2, #0]
 8003646:	6892      	ldr	r2, [r2, #8]
 8003648:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800364c:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003652:	2b00      	cmp	r3, #0
 8003654:	d013      	beq.n	800367e <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800365a:	4a31      	ldr	r2, [pc, #196]	; (8003720 <HAL_UART_IRQHandler+0x28c>)
 800365c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003662:	4618      	mov	r0, r3
 8003664:	f7fe f844 	bl	80016f0 <HAL_DMA_Abort_IT>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d016      	beq.n	800369c <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003678:	4610      	mov	r0, r2
 800367a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800367c:	e00e      	b.n	800369c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 f85a 	bl	8003738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003684:	e00a      	b.n	800369c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 f856 	bl	8003738 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800368c:	e006      	b.n	800369c <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f852 	bl	8003738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800369a:	e038      	b.n	800370e <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800369c:	bf00      	nop
    return;
 800369e:	e036      	b.n	800370e <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00d      	beq.n	80036c6 <HAL_UART_IRQHandler+0x232>
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d008      	beq.n	80036c6 <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80036bc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 fc79 	bl	8003fb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036c4:	e026      	b.n	8003714 <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d00d      	beq.n	80036ec <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d008      	beq.n	80036ec <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d017      	beq.n	8003712 <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	4798      	blx	r3
    }
    return;
 80036ea:	e012      	b.n	8003712 <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00e      	beq.n	8003714 <HAL_UART_IRQHandler+0x280>
 80036f6:	69bb      	ldr	r3, [r7, #24]
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d009      	beq.n	8003714 <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f000 fc3f 	bl	8003f84 <UART_EndTransmit_IT>
    return;
 8003706:	bf00      	nop
 8003708:	e004      	b.n	8003714 <HAL_UART_IRQHandler+0x280>
      return;
 800370a:	bf00      	nop
 800370c:	e002      	b.n	8003714 <HAL_UART_IRQHandler+0x280>
    return;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <HAL_UART_IRQHandler+0x280>
    return;
 8003712:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003714:	3720      	adds	r7, #32
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	04000120 	.word	0x04000120
 8003720:	08003f59 	.word	0x08003f59

08003724 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800374c:	b5b0      	push	{r4, r5, r7, lr}
 800374e:	b088      	sub	sp, #32
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689a      	ldr	r2, [r3, #8]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	691b      	ldr	r3, [r3, #16]
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	695b      	ldr	r3, [r3, #20]
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	4313      	orrs	r3, r2
 800376e:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6819      	ldr	r1, [r3, #0]
 800377a:	4bac      	ldr	r3, [pc, #688]	; (8003a2c <UART_SetConfig+0x2e0>)
 800377c:	400b      	ands	r3, r1
 800377e:	69f9      	ldr	r1, [r7, #28]
 8003780:	430b      	orrs	r3, r1
 8003782:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	6812      	ldr	r2, [r2, #0]
 800378c:	6852      	ldr	r2, [r2, #4]
 800378e:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8003792:	687a      	ldr	r2, [r7, #4]
 8003794:	68d2      	ldr	r2, [r2, #12]
 8003796:	430a      	orrs	r2, r1
 8003798:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4aa2      	ldr	r2, [pc, #648]	; (8003a30 <UART_SetConfig+0x2e4>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d004      	beq.n	80037b4 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a1b      	ldr	r3, [r3, #32]
 80037ae:	69fa      	ldr	r2, [r7, #28]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	6812      	ldr	r2, [r2, #0]
 80037bc:	6892      	ldr	r2, [r2, #8]
 80037be:	f422 6130 	bic.w	r1, r2, #2816	; 0xb00
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	430a      	orrs	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a99      	ldr	r2, [pc, #612]	; (8003a34 <UART_SetConfig+0x2e8>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d122      	bne.n	8003818 <UART_SetConfig+0xcc>
 80037d2:	4b99      	ldr	r3, [pc, #612]	; (8003a38 <UART_SetConfig+0x2ec>)
 80037d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d8:	f003 0303 	and.w	r3, r3, #3
 80037dc:	2b03      	cmp	r3, #3
 80037de:	d817      	bhi.n	8003810 <UART_SetConfig+0xc4>
 80037e0:	a201      	add	r2, pc, #4	; (adr r2, 80037e8 <UART_SetConfig+0x9c>)
 80037e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037e6:	bf00      	nop
 80037e8:	080037f9 	.word	0x080037f9
 80037ec:	08003805 	.word	0x08003805
 80037f0:	080037ff 	.word	0x080037ff
 80037f4:	0800380b 	.word	0x0800380b
 80037f8:	2301      	movs	r3, #1
 80037fa:	76fb      	strb	r3, [r7, #27]
 80037fc:	e0e8      	b.n	80039d0 <UART_SetConfig+0x284>
 80037fe:	2302      	movs	r3, #2
 8003800:	76fb      	strb	r3, [r7, #27]
 8003802:	e0e5      	b.n	80039d0 <UART_SetConfig+0x284>
 8003804:	2304      	movs	r3, #4
 8003806:	76fb      	strb	r3, [r7, #27]
 8003808:	e0e2      	b.n	80039d0 <UART_SetConfig+0x284>
 800380a:	2308      	movs	r3, #8
 800380c:	76fb      	strb	r3, [r7, #27]
 800380e:	e0df      	b.n	80039d0 <UART_SetConfig+0x284>
 8003810:	2310      	movs	r3, #16
 8003812:	76fb      	strb	r3, [r7, #27]
 8003814:	bf00      	nop
 8003816:	e0db      	b.n	80039d0 <UART_SetConfig+0x284>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a87      	ldr	r2, [pc, #540]	; (8003a3c <UART_SetConfig+0x2f0>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d134      	bne.n	800388c <UART_SetConfig+0x140>
 8003822:	4b85      	ldr	r3, [pc, #532]	; (8003a38 <UART_SetConfig+0x2ec>)
 8003824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003828:	f003 030c 	and.w	r3, r3, #12
 800382c:	2b0c      	cmp	r3, #12
 800382e:	d829      	bhi.n	8003884 <UART_SetConfig+0x138>
 8003830:	a201      	add	r2, pc, #4	; (adr r2, 8003838 <UART_SetConfig+0xec>)
 8003832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003836:	bf00      	nop
 8003838:	0800386d 	.word	0x0800386d
 800383c:	08003885 	.word	0x08003885
 8003840:	08003885 	.word	0x08003885
 8003844:	08003885 	.word	0x08003885
 8003848:	08003879 	.word	0x08003879
 800384c:	08003885 	.word	0x08003885
 8003850:	08003885 	.word	0x08003885
 8003854:	08003885 	.word	0x08003885
 8003858:	08003873 	.word	0x08003873
 800385c:	08003885 	.word	0x08003885
 8003860:	08003885 	.word	0x08003885
 8003864:	08003885 	.word	0x08003885
 8003868:	0800387f 	.word	0x0800387f
 800386c:	2300      	movs	r3, #0
 800386e:	76fb      	strb	r3, [r7, #27]
 8003870:	e0ae      	b.n	80039d0 <UART_SetConfig+0x284>
 8003872:	2302      	movs	r3, #2
 8003874:	76fb      	strb	r3, [r7, #27]
 8003876:	e0ab      	b.n	80039d0 <UART_SetConfig+0x284>
 8003878:	2304      	movs	r3, #4
 800387a:	76fb      	strb	r3, [r7, #27]
 800387c:	e0a8      	b.n	80039d0 <UART_SetConfig+0x284>
 800387e:	2308      	movs	r3, #8
 8003880:	76fb      	strb	r3, [r7, #27]
 8003882:	e0a5      	b.n	80039d0 <UART_SetConfig+0x284>
 8003884:	2310      	movs	r3, #16
 8003886:	76fb      	strb	r3, [r7, #27]
 8003888:	bf00      	nop
 800388a:	e0a1      	b.n	80039d0 <UART_SetConfig+0x284>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a6b      	ldr	r2, [pc, #428]	; (8003a40 <UART_SetConfig+0x2f4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d120      	bne.n	80038d8 <UART_SetConfig+0x18c>
 8003896:	4b68      	ldr	r3, [pc, #416]	; (8003a38 <UART_SetConfig+0x2ec>)
 8003898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800389c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d00f      	beq.n	80038c4 <UART_SetConfig+0x178>
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d802      	bhi.n	80038ae <UART_SetConfig+0x162>
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d005      	beq.n	80038b8 <UART_SetConfig+0x16c>
 80038ac:	e010      	b.n	80038d0 <UART_SetConfig+0x184>
 80038ae:	2b20      	cmp	r3, #32
 80038b0:	d005      	beq.n	80038be <UART_SetConfig+0x172>
 80038b2:	2b30      	cmp	r3, #48	; 0x30
 80038b4:	d009      	beq.n	80038ca <UART_SetConfig+0x17e>
 80038b6:	e00b      	b.n	80038d0 <UART_SetConfig+0x184>
 80038b8:	2300      	movs	r3, #0
 80038ba:	76fb      	strb	r3, [r7, #27]
 80038bc:	e088      	b.n	80039d0 <UART_SetConfig+0x284>
 80038be:	2302      	movs	r3, #2
 80038c0:	76fb      	strb	r3, [r7, #27]
 80038c2:	e085      	b.n	80039d0 <UART_SetConfig+0x284>
 80038c4:	2304      	movs	r3, #4
 80038c6:	76fb      	strb	r3, [r7, #27]
 80038c8:	e082      	b.n	80039d0 <UART_SetConfig+0x284>
 80038ca:	2308      	movs	r3, #8
 80038cc:	76fb      	strb	r3, [r7, #27]
 80038ce:	e07f      	b.n	80039d0 <UART_SetConfig+0x284>
 80038d0:	2310      	movs	r3, #16
 80038d2:	76fb      	strb	r3, [r7, #27]
 80038d4:	bf00      	nop
 80038d6:	e07b      	b.n	80039d0 <UART_SetConfig+0x284>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a59      	ldr	r2, [pc, #356]	; (8003a44 <UART_SetConfig+0x2f8>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d120      	bne.n	8003924 <UART_SetConfig+0x1d8>
 80038e2:	4b55      	ldr	r3, [pc, #340]	; (8003a38 <UART_SetConfig+0x2ec>)
 80038e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80038ec:	2b40      	cmp	r3, #64	; 0x40
 80038ee:	d00f      	beq.n	8003910 <UART_SetConfig+0x1c4>
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d802      	bhi.n	80038fa <UART_SetConfig+0x1ae>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d005      	beq.n	8003904 <UART_SetConfig+0x1b8>
 80038f8:	e010      	b.n	800391c <UART_SetConfig+0x1d0>
 80038fa:	2b80      	cmp	r3, #128	; 0x80
 80038fc:	d005      	beq.n	800390a <UART_SetConfig+0x1be>
 80038fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003900:	d009      	beq.n	8003916 <UART_SetConfig+0x1ca>
 8003902:	e00b      	b.n	800391c <UART_SetConfig+0x1d0>
 8003904:	2300      	movs	r3, #0
 8003906:	76fb      	strb	r3, [r7, #27]
 8003908:	e062      	b.n	80039d0 <UART_SetConfig+0x284>
 800390a:	2302      	movs	r3, #2
 800390c:	76fb      	strb	r3, [r7, #27]
 800390e:	e05f      	b.n	80039d0 <UART_SetConfig+0x284>
 8003910:	2304      	movs	r3, #4
 8003912:	76fb      	strb	r3, [r7, #27]
 8003914:	e05c      	b.n	80039d0 <UART_SetConfig+0x284>
 8003916:	2308      	movs	r3, #8
 8003918:	76fb      	strb	r3, [r7, #27]
 800391a:	e059      	b.n	80039d0 <UART_SetConfig+0x284>
 800391c:	2310      	movs	r3, #16
 800391e:	76fb      	strb	r3, [r7, #27]
 8003920:	bf00      	nop
 8003922:	e055      	b.n	80039d0 <UART_SetConfig+0x284>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a47      	ldr	r2, [pc, #284]	; (8003a48 <UART_SetConfig+0x2fc>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d124      	bne.n	8003978 <UART_SetConfig+0x22c>
 800392e:	4b42      	ldr	r3, [pc, #264]	; (8003a38 <UART_SetConfig+0x2ec>)
 8003930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003934:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003938:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800393c:	d012      	beq.n	8003964 <UART_SetConfig+0x218>
 800393e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003942:	d802      	bhi.n	800394a <UART_SetConfig+0x1fe>
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <UART_SetConfig+0x20c>
 8003948:	e012      	b.n	8003970 <UART_SetConfig+0x224>
 800394a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800394e:	d006      	beq.n	800395e <UART_SetConfig+0x212>
 8003950:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003954:	d009      	beq.n	800396a <UART_SetConfig+0x21e>
 8003956:	e00b      	b.n	8003970 <UART_SetConfig+0x224>
 8003958:	2300      	movs	r3, #0
 800395a:	76fb      	strb	r3, [r7, #27]
 800395c:	e038      	b.n	80039d0 <UART_SetConfig+0x284>
 800395e:	2302      	movs	r3, #2
 8003960:	76fb      	strb	r3, [r7, #27]
 8003962:	e035      	b.n	80039d0 <UART_SetConfig+0x284>
 8003964:	2304      	movs	r3, #4
 8003966:	76fb      	strb	r3, [r7, #27]
 8003968:	e032      	b.n	80039d0 <UART_SetConfig+0x284>
 800396a:	2308      	movs	r3, #8
 800396c:	76fb      	strb	r3, [r7, #27]
 800396e:	e02f      	b.n	80039d0 <UART_SetConfig+0x284>
 8003970:	2310      	movs	r3, #16
 8003972:	76fb      	strb	r3, [r7, #27]
 8003974:	bf00      	nop
 8003976:	e02b      	b.n	80039d0 <UART_SetConfig+0x284>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a2c      	ldr	r2, [pc, #176]	; (8003a30 <UART_SetConfig+0x2e4>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d124      	bne.n	80039cc <UART_SetConfig+0x280>
 8003982:	4b2d      	ldr	r3, [pc, #180]	; (8003a38 <UART_SetConfig+0x2ec>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800398c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003990:	d012      	beq.n	80039b8 <UART_SetConfig+0x26c>
 8003992:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003996:	d802      	bhi.n	800399e <UART_SetConfig+0x252>
 8003998:	2b00      	cmp	r3, #0
 800399a:	d007      	beq.n	80039ac <UART_SetConfig+0x260>
 800399c:	e012      	b.n	80039c4 <UART_SetConfig+0x278>
 800399e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039a2:	d006      	beq.n	80039b2 <UART_SetConfig+0x266>
 80039a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039a8:	d009      	beq.n	80039be <UART_SetConfig+0x272>
 80039aa:	e00b      	b.n	80039c4 <UART_SetConfig+0x278>
 80039ac:	2300      	movs	r3, #0
 80039ae:	76fb      	strb	r3, [r7, #27]
 80039b0:	e00e      	b.n	80039d0 <UART_SetConfig+0x284>
 80039b2:	2302      	movs	r3, #2
 80039b4:	76fb      	strb	r3, [r7, #27]
 80039b6:	e00b      	b.n	80039d0 <UART_SetConfig+0x284>
 80039b8:	2304      	movs	r3, #4
 80039ba:	76fb      	strb	r3, [r7, #27]
 80039bc:	e008      	b.n	80039d0 <UART_SetConfig+0x284>
 80039be:	2308      	movs	r3, #8
 80039c0:	76fb      	strb	r3, [r7, #27]
 80039c2:	e005      	b.n	80039d0 <UART_SetConfig+0x284>
 80039c4:	2310      	movs	r3, #16
 80039c6:	76fb      	strb	r3, [r7, #27]
 80039c8:	bf00      	nop
 80039ca:	e001      	b.n	80039d0 <UART_SetConfig+0x284>
 80039cc:	2310      	movs	r3, #16
 80039ce:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a16      	ldr	r2, [pc, #88]	; (8003a30 <UART_SetConfig+0x2e4>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	f040 8080 	bne.w	8003adc <UART_SetConfig+0x390>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80039dc:	7efb      	ldrb	r3, [r7, #27]
 80039de:	2b08      	cmp	r3, #8
 80039e0:	d836      	bhi.n	8003a50 <UART_SetConfig+0x304>
 80039e2:	a201      	add	r2, pc, #4	; (adr r2, 80039e8 <UART_SetConfig+0x29c>)
 80039e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039e8:	08003a0d 	.word	0x08003a0d
 80039ec:	08003a51 	.word	0x08003a51
 80039f0:	08003a15 	.word	0x08003a15
 80039f4:	08003a51 	.word	0x08003a51
 80039f8:	08003a1b 	.word	0x08003a1b
 80039fc:	08003a51 	.word	0x08003a51
 8003a00:	08003a51 	.word	0x08003a51
 8003a04:	08003a51 	.word	0x08003a51
 8003a08:	08003a23 	.word	0x08003a23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a0c:	f7fe fe58 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8003a10:	6178      	str	r0, [r7, #20]
        break;
 8003a12:	e022      	b.n	8003a5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a14:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <UART_SetConfig+0x300>)
 8003a16:	617b      	str	r3, [r7, #20]
        break;
 8003a18:	e01f      	b.n	8003a5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a1a:	f7fe fdbb 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8003a1e:	6178      	str	r0, [r7, #20]
        break;
 8003a20:	e01b      	b.n	8003a5a <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a26:	617b      	str	r3, [r7, #20]
        break;
 8003a28:	e017      	b.n	8003a5a <UART_SetConfig+0x30e>
 8003a2a:	bf00      	nop
 8003a2c:	efff69f3 	.word	0xefff69f3
 8003a30:	40008000 	.word	0x40008000
 8003a34:	40013800 	.word	0x40013800
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	40004400 	.word	0x40004400
 8003a40:	40004800 	.word	0x40004800
 8003a44:	40004c00 	.word	0x40004c00
 8003a48:	40005000 	.word	0x40005000
 8003a4c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003a50:	2300      	movs	r3, #0
 8003a52:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	76bb      	strb	r3, [r7, #26]
        break;
 8003a58:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80eb 	beq.w	8003c38 <UART_SetConfig+0x4ec>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	005b      	lsls	r3, r3, #1
 8003a6a:	441a      	add	r2, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d805      	bhi.n	8003a7e <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	031a      	lsls	r2, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d202      	bcs.n	8003a84 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	76bb      	strb	r3, [r7, #26]
 8003a82:	e0d9      	b.n	8003c38 <UART_SetConfig+0x4ec>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003a84:	697b      	ldr	r3, [r7, #20]
 8003a86:	461a      	mov	r2, r3
 8003a88:	f04f 0300 	mov.w	r3, #0
 8003a8c:	021d      	lsls	r5, r3, #8
 8003a8e:	ea45 6512 	orr.w	r5, r5, r2, lsr #24
 8003a92:	0214      	lsls	r4, r2, #8
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	085b      	lsrs	r3, r3, #1
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	f04f 0300 	mov.w	r3, #0
 8003aa0:	18a0      	adds	r0, r4, r2
 8003aa2:	eb45 0103 	adc.w	r1, r5, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f04f 0400 	mov.w	r4, #0
 8003aae:	461a      	mov	r2, r3
 8003ab0:	4623      	mov	r3, r4
 8003ab2:	f7fc fbe5 	bl	8000280 <__aeabi_uldivmod>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	460c      	mov	r4, r1
 8003aba:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ac2:	d308      	bcc.n	8003ad6 <UART_SetConfig+0x38a>
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aca:	d204      	bcs.n	8003ad6 <UART_SetConfig+0x38a>
        {
          huart->Instance->BRR = usartdiv;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	60da      	str	r2, [r3, #12]
 8003ad4:	e0b0      	b.n	8003c38 <UART_SetConfig+0x4ec>
        }
        else
        {
          ret = HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	76bb      	strb	r3, [r7, #26]
 8003ada:	e0ad      	b.n	8003c38 <UART_SetConfig+0x4ec>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	69db      	ldr	r3, [r3, #28]
 8003ae0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae4:	d15c      	bne.n	8003ba0 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 8003ae6:	7efb      	ldrb	r3, [r7, #27]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d828      	bhi.n	8003b3e <UART_SetConfig+0x3f2>
 8003aec:	a201      	add	r2, pc, #4	; (adr r2, 8003af4 <UART_SetConfig+0x3a8>)
 8003aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af2:	bf00      	nop
 8003af4:	08003b19 	.word	0x08003b19
 8003af8:	08003b21 	.word	0x08003b21
 8003afc:	08003b29 	.word	0x08003b29
 8003b00:	08003b3f 	.word	0x08003b3f
 8003b04:	08003b2f 	.word	0x08003b2f
 8003b08:	08003b3f 	.word	0x08003b3f
 8003b0c:	08003b3f 	.word	0x08003b3f
 8003b10:	08003b3f 	.word	0x08003b3f
 8003b14:	08003b37 	.word	0x08003b37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b18:	f7fe fdd2 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8003b1c:	6178      	str	r0, [r7, #20]
        break;
 8003b1e:	e013      	b.n	8003b48 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b20:	f7fe fde4 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8003b24:	6178      	str	r0, [r7, #20]
        break;
 8003b26:	e00f      	b.n	8003b48 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b28:	4b49      	ldr	r3, [pc, #292]	; (8003c50 <UART_SetConfig+0x504>)
 8003b2a:	617b      	str	r3, [r7, #20]
        break;
 8003b2c:	e00c      	b.n	8003b48 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b2e:	f7fe fd31 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8003b32:	6178      	str	r0, [r7, #20]
        break;
 8003b34:	e008      	b.n	8003b48 <UART_SetConfig+0x3fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b3a:	617b      	str	r3, [r7, #20]
        break;
 8003b3c:	e004      	b.n	8003b48 <UART_SetConfig+0x3fc>
      default:
        pclk = 0U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	76bb      	strb	r3, [r7, #26]
        break;
 8003b46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d074      	beq.n	8003c38 <UART_SetConfig+0x4ec>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	005a      	lsls	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	441a      	add	r2, r3
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b62:	b29b      	uxth	r3, r3
 8003b64:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	2b0f      	cmp	r3, #15
 8003b6a:	d916      	bls.n	8003b9a <UART_SetConfig+0x44e>
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b72:	d212      	bcs.n	8003b9a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	f023 030f 	bic.w	r3, r3, #15
 8003b7c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	085b      	lsrs	r3, r3, #1
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	89fb      	ldrh	r3, [r7, #14]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	89fa      	ldrh	r2, [r7, #14]
 8003b96:	60da      	str	r2, [r3, #12]
 8003b98:	e04e      	b.n	8003c38 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	76bb      	strb	r3, [r7, #26]
 8003b9e:	e04b      	b.n	8003c38 <UART_SetConfig+0x4ec>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003ba0:	7efb      	ldrb	r3, [r7, #27]
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d827      	bhi.n	8003bf6 <UART_SetConfig+0x4aa>
 8003ba6:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <UART_SetConfig+0x460>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003bd1 	.word	0x08003bd1
 8003bb0:	08003bd9 	.word	0x08003bd9
 8003bb4:	08003be1 	.word	0x08003be1
 8003bb8:	08003bf7 	.word	0x08003bf7
 8003bbc:	08003be7 	.word	0x08003be7
 8003bc0:	08003bf7 	.word	0x08003bf7
 8003bc4:	08003bf7 	.word	0x08003bf7
 8003bc8:	08003bf7 	.word	0x08003bf7
 8003bcc:	08003bef 	.word	0x08003bef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bd0:	f7fe fd76 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 8003bd4:	6178      	str	r0, [r7, #20]
        break;
 8003bd6:	e013      	b.n	8003c00 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bd8:	f7fe fd88 	bl	80026ec <HAL_RCC_GetPCLK2Freq>
 8003bdc:	6178      	str	r0, [r7, #20]
        break;
 8003bde:	e00f      	b.n	8003c00 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003be0:	4b1b      	ldr	r3, [pc, #108]	; (8003c50 <UART_SetConfig+0x504>)
 8003be2:	617b      	str	r3, [r7, #20]
        break;
 8003be4:	e00c      	b.n	8003c00 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be6:	f7fe fcd5 	bl	8002594 <HAL_RCC_GetSysClockFreq>
 8003bea:	6178      	str	r0, [r7, #20]
        break;
 8003bec:	e008      	b.n	8003c00 <UART_SetConfig+0x4b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bf2:	617b      	str	r3, [r7, #20]
        break;
 8003bf4:	e004      	b.n	8003c00 <UART_SetConfig+0x4b4>
      default:
        pclk = 0U;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	76bb      	strb	r3, [r7, #26]
        break;
 8003bfe:	bf00      	nop
    }

    if (pclk != 0U)
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d018      	beq.n	8003c38 <UART_SetConfig+0x4ec>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	085a      	lsrs	r2, r3, #1
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	441a      	add	r2, r3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	2b0f      	cmp	r3, #15
 8003c20:	d908      	bls.n	8003c34 <UART_SetConfig+0x4e8>
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c28:	d204      	bcs.n	8003c34 <UART_SetConfig+0x4e8>
      {
        huart->Instance->BRR = usartdiv;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	e001      	b.n	8003c38 <UART_SetConfig+0x4ec>
      }
      else
      {
        ret = HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003c44:	7ebb      	ldrb	r3, [r7, #26]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bdb0      	pop	{r4, r5, r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	00f42400 	.word	0x00f42400

08003c54 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c60:	f003 0301 	and.w	r3, r3, #1
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d00a      	beq.n	8003c7e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	6812      	ldr	r2, [r2, #0]
 8003c70:	6852      	ldr	r2, [r2, #4]
 8003c72:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003c7a:	430a      	orrs	r2, r1
 8003c7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c82:	f003 0302 	and.w	r3, r3, #2
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	687a      	ldr	r2, [r7, #4]
 8003c90:	6812      	ldr	r2, [r2, #0]
 8003c92:	6852      	ldr	r2, [r2, #4]
 8003c94:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003c9c:	430a      	orrs	r2, r1
 8003c9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca4:	f003 0304 	and.w	r3, r3, #4
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d00a      	beq.n	8003cc2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	687a      	ldr	r2, [r7, #4]
 8003cb2:	6812      	ldr	r2, [r2, #0]
 8003cb4:	6852      	ldr	r2, [r2, #4]
 8003cb6:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003cbe:	430a      	orrs	r2, r1
 8003cc0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc6:	f003 0308 	and.w	r3, r3, #8
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d00a      	beq.n	8003ce4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6812      	ldr	r2, [r2, #0]
 8003cd6:	6852      	ldr	r2, [r2, #4]
 8003cd8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	f003 0310 	and.w	r3, r3, #16
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00a      	beq.n	8003d06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6812      	ldr	r2, [r2, #0]
 8003cf8:	6892      	ldr	r2, [r2, #8]
 8003cfa:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d02:	430a      	orrs	r2, r1
 8003d04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	6892      	ldr	r2, [r2, #8]
 8003d1c:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8003d20:	687a      	ldr	r2, [r7, #4]
 8003d22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003d24:	430a      	orrs	r2, r1
 8003d26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d01a      	beq.n	8003d6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	6812      	ldr	r2, [r2, #0]
 8003d3c:	6852      	ldr	r2, [r2, #4]
 8003d3e:	f422 1180 	bic.w	r1, r2, #1048576	; 0x100000
 8003d42:	687a      	ldr	r2, [r7, #4]
 8003d44:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d52:	d10a      	bne.n	8003d6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	6852      	ldr	r2, [r2, #4]
 8003d5e:	f422 01c0 	bic.w	r1, r2, #6291456	; 0x600000
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003d66:	430a      	orrs	r2, r1
 8003d68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00a      	beq.n	8003d8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	6812      	ldr	r2, [r2, #0]
 8003d7e:	6852      	ldr	r2, [r2, #4]
 8003d80:	f422 2100 	bic.w	r1, r2, #524288	; 0x80000
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	605a      	str	r2, [r3, #4]
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr

08003d98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af02      	add	r7, sp, #8
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003da6:	f7fd f971 	bl	800108c <HAL_GetTick>
 8003daa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0308 	and.w	r3, r3, #8
 8003db6:	2b08      	cmp	r3, #8
 8003db8:	d10e      	bne.n	8003dd8 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dbe:	9300      	str	r3, [sp, #0]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 f82a 	bl	8003e22 <UART_WaitOnFlagUntilTimeout>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d001      	beq.n	8003dd8 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e020      	b.n	8003e1a <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b04      	cmp	r3, #4
 8003de4:	d10e      	bne.n	8003e04 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003de6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dea:	9300      	str	r3, [sp, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f814 	bl	8003e22 <UART_WaitOnFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e00a      	b.n	8003e1a <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2220      	movs	r2, #32
 8003e08:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003e18:	2300      	movs	r3, #0
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e22:	b580      	push	{r7, lr}
 8003e24:	b084      	sub	sp, #16
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	60f8      	str	r0, [r7, #12]
 8003e2a:	60b9      	str	r1, [r7, #8]
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	4613      	mov	r3, r2
 8003e30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e32:	e05d      	b.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d059      	beq.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e3c:	f7fd f926 	bl	800108c <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	1ad2      	subs	r2, r2, r3
 8003e46:	69bb      	ldr	r3, [r7, #24]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d802      	bhi.n	8003e52 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d11b      	bne.n	8003e8a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	6812      	ldr	r2, [r2, #0]
 8003e5a:	6812      	ldr	r2, [r2, #0]
 8003e5c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e60:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68fa      	ldr	r2, [r7, #12]
 8003e68:	6812      	ldr	r2, [r2, #0]
 8003e6a:	6892      	ldr	r2, [r2, #8]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2220      	movs	r2, #32
 8003e76:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003e86:	2303      	movs	r3, #3
 8003e88:	e042      	b.n	8003f10 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0304 	and.w	r3, r3, #4
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d02b      	beq.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ea6:	d123      	bne.n	8003ef0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003eb0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	6812      	ldr	r2, [r2, #0]
 8003eba:	6812      	ldr	r2, [r2, #0]
 8003ebc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003ec0:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68fa      	ldr	r2, [r7, #12]
 8003ec8:	6812      	ldr	r2, [r2, #0]
 8003eca:	6892      	ldr	r2, [r2, #8]
 8003ecc:	f022 0201 	bic.w	r2, r2, #1
 8003ed0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2220      	movs	r2, #32
 8003ed6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2220      	movs	r2, #32
 8003edc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2220      	movs	r2, #32
 8003ee2:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e00f      	b.n	8003f10 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	69da      	ldr	r2, [r3, #28]
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	401a      	ands	r2, r3
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	bf0c      	ite	eq
 8003f00:	2301      	moveq	r3, #1
 8003f02:	2300      	movne	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	461a      	mov	r2, r3
 8003f08:	79fb      	ldrb	r3, [r7, #7]
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d092      	beq.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	687a      	ldr	r2, [r7, #4]
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	6812      	ldr	r2, [r2, #0]
 8003f2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003f2e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	6812      	ldr	r2, [r2, #0]
 8003f38:	6892      	ldr	r2, [r2, #8]
 8003f3a:	f022 0201 	bic.w	r2, r2, #1
 8003f3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2220      	movs	r2, #32
 8003f44:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	661a      	str	r2, [r3, #96]	; 0x60
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f64:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f76:	68f8      	ldr	r0, [r7, #12]
 8003f78:	f7ff fbde 	bl	8003738 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b082      	sub	sp, #8
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	6812      	ldr	r2, [r2, #0]
 8003f94:	6812      	ldr	r2, [r2, #0]
 8003f96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f9a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff fbbb 	bl	8003724 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fae:	bf00      	nop
 8003fb0:	3708      	adds	r7, #8
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bd80      	pop	{r7, pc}

08003fb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003fb6:	b480      	push	{r7}
 8003fb8:	b083      	sub	sp, #12
 8003fba:	af00      	add	r7, sp, #0
 8003fbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
	...

08003fcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003fcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004004 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fd0:	f7fc ffb6 	bl	8000f40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fd6:	e003      	b.n	8003fe0 <LoopCopyDataInit>

08003fd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	; (8004008 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003fda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003fdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003fde:	3104      	adds	r1, #4

08003fe0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003fe0:	480a      	ldr	r0, [pc, #40]	; (800400c <LoopForever+0xa>)
	ldr	r3, =_edata
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003fe4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003fe6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003fe8:	d3f6      	bcc.n	8003fd8 <CopyDataInit>
	ldr	r2, =_sbss
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003fec:	e002      	b.n	8003ff4 <LoopFillZerobss>

08003fee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003fee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003ff0:	f842 3b04 	str.w	r3, [r2], #4

08003ff4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003ff4:	4b08      	ldr	r3, [pc, #32]	; (8004018 <LoopForever+0x16>)
	cmp	r2, r3
 8003ff6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ff8:	d3f9      	bcc.n	8003fee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ffa:	f000 f817 	bl	800402c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ffe:	f7fc fac7 	bl	8000590 <main>

08004002 <LoopForever>:

LoopForever:
    b LoopForever
 8004002:	e7fe      	b.n	8004002 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004004:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004008:	08004b40 	.word	0x08004b40
	ldr	r0, =_sdata
 800400c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004010:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8004014:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8004018:	20000290 	.word	0x20000290

0800401c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800401c:	e7fe      	b.n	800401c <ADC1_2_IRQHandler>
	...

08004020 <__errno>:
 8004020:	4b01      	ldr	r3, [pc, #4]	; (8004028 <__errno+0x8>)
 8004022:	6818      	ldr	r0, [r3, #0]
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	2000000c 	.word	0x2000000c

0800402c <__libc_init_array>:
 800402c:	b570      	push	{r4, r5, r6, lr}
 800402e:	4e0d      	ldr	r6, [pc, #52]	; (8004064 <__libc_init_array+0x38>)
 8004030:	4c0d      	ldr	r4, [pc, #52]	; (8004068 <__libc_init_array+0x3c>)
 8004032:	1ba4      	subs	r4, r4, r6
 8004034:	10a4      	asrs	r4, r4, #2
 8004036:	2500      	movs	r5, #0
 8004038:	42a5      	cmp	r5, r4
 800403a:	d109      	bne.n	8004050 <__libc_init_array+0x24>
 800403c:	4e0b      	ldr	r6, [pc, #44]	; (800406c <__libc_init_array+0x40>)
 800403e:	4c0c      	ldr	r4, [pc, #48]	; (8004070 <__libc_init_array+0x44>)
 8004040:	f000 fc3c 	bl	80048bc <_init>
 8004044:	1ba4      	subs	r4, r4, r6
 8004046:	10a4      	asrs	r4, r4, #2
 8004048:	2500      	movs	r5, #0
 800404a:	42a5      	cmp	r5, r4
 800404c:	d105      	bne.n	800405a <__libc_init_array+0x2e>
 800404e:	bd70      	pop	{r4, r5, r6, pc}
 8004050:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004054:	4798      	blx	r3
 8004056:	3501      	adds	r5, #1
 8004058:	e7ee      	b.n	8004038 <__libc_init_array+0xc>
 800405a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800405e:	4798      	blx	r3
 8004060:	3501      	adds	r5, #1
 8004062:	e7f2      	b.n	800404a <__libc_init_array+0x1e>
 8004064:	08004b38 	.word	0x08004b38
 8004068:	08004b38 	.word	0x08004b38
 800406c:	08004b38 	.word	0x08004b38
 8004070:	08004b3c 	.word	0x08004b3c

08004074 <memset>:
 8004074:	4402      	add	r2, r0
 8004076:	4603      	mov	r3, r0
 8004078:	4293      	cmp	r3, r2
 800407a:	d100      	bne.n	800407e <memset+0xa>
 800407c:	4770      	bx	lr
 800407e:	f803 1b01 	strb.w	r1, [r3], #1
 8004082:	e7f9      	b.n	8004078 <memset+0x4>

08004084 <_vsiprintf_r>:
 8004084:	b510      	push	{r4, lr}
 8004086:	b09a      	sub	sp, #104	; 0x68
 8004088:	f44f 7402 	mov.w	r4, #520	; 0x208
 800408c:	9100      	str	r1, [sp, #0]
 800408e:	9104      	str	r1, [sp, #16]
 8004090:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004094:	9102      	str	r1, [sp, #8]
 8004096:	9105      	str	r1, [sp, #20]
 8004098:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800409c:	f8ad 100e 	strh.w	r1, [sp, #14]
 80040a0:	4669      	mov	r1, sp
 80040a2:	f8ad 400c 	strh.w	r4, [sp, #12]
 80040a6:	f000 f86b 	bl	8004180 <_svfiprintf_r>
 80040aa:	9b00      	ldr	r3, [sp, #0]
 80040ac:	2200      	movs	r2, #0
 80040ae:	701a      	strb	r2, [r3, #0]
 80040b0:	b01a      	add	sp, #104	; 0x68
 80040b2:	bd10      	pop	{r4, pc}

080040b4 <vsiprintf>:
 80040b4:	4613      	mov	r3, r2
 80040b6:	460a      	mov	r2, r1
 80040b8:	4601      	mov	r1, r0
 80040ba:	4802      	ldr	r0, [pc, #8]	; (80040c4 <vsiprintf+0x10>)
 80040bc:	6800      	ldr	r0, [r0, #0]
 80040be:	f7ff bfe1 	b.w	8004084 <_vsiprintf_r>
 80040c2:	bf00      	nop
 80040c4:	2000000c 	.word	0x2000000c

080040c8 <__ssputs_r>:
 80040c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040cc:	688e      	ldr	r6, [r1, #8]
 80040ce:	429e      	cmp	r6, r3
 80040d0:	4682      	mov	sl, r0
 80040d2:	460c      	mov	r4, r1
 80040d4:	4691      	mov	r9, r2
 80040d6:	4698      	mov	r8, r3
 80040d8:	d835      	bhi.n	8004146 <__ssputs_r+0x7e>
 80040da:	898a      	ldrh	r2, [r1, #12]
 80040dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040e0:	d031      	beq.n	8004146 <__ssputs_r+0x7e>
 80040e2:	6825      	ldr	r5, [r4, #0]
 80040e4:	6909      	ldr	r1, [r1, #16]
 80040e6:	1a6f      	subs	r7, r5, r1
 80040e8:	6965      	ldr	r5, [r4, #20]
 80040ea:	2302      	movs	r3, #2
 80040ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040f0:	fb95 f5f3 	sdiv	r5, r5, r3
 80040f4:	f108 0301 	add.w	r3, r8, #1
 80040f8:	443b      	add	r3, r7
 80040fa:	429d      	cmp	r5, r3
 80040fc:	bf38      	it	cc
 80040fe:	461d      	movcc	r5, r3
 8004100:	0553      	lsls	r3, r2, #21
 8004102:	d531      	bpl.n	8004168 <__ssputs_r+0xa0>
 8004104:	4629      	mov	r1, r5
 8004106:	f000 fb39 	bl	800477c <_malloc_r>
 800410a:	4606      	mov	r6, r0
 800410c:	b950      	cbnz	r0, 8004124 <__ssputs_r+0x5c>
 800410e:	230c      	movs	r3, #12
 8004110:	f8ca 3000 	str.w	r3, [sl]
 8004114:	89a3      	ldrh	r3, [r4, #12]
 8004116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800411a:	81a3      	strh	r3, [r4, #12]
 800411c:	f04f 30ff 	mov.w	r0, #4294967295
 8004120:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004124:	463a      	mov	r2, r7
 8004126:	6921      	ldr	r1, [r4, #16]
 8004128:	f000 fab4 	bl	8004694 <memcpy>
 800412c:	89a3      	ldrh	r3, [r4, #12]
 800412e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004132:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004136:	81a3      	strh	r3, [r4, #12]
 8004138:	6126      	str	r6, [r4, #16]
 800413a:	6165      	str	r5, [r4, #20]
 800413c:	443e      	add	r6, r7
 800413e:	1bed      	subs	r5, r5, r7
 8004140:	6026      	str	r6, [r4, #0]
 8004142:	60a5      	str	r5, [r4, #8]
 8004144:	4646      	mov	r6, r8
 8004146:	4546      	cmp	r6, r8
 8004148:	bf28      	it	cs
 800414a:	4646      	movcs	r6, r8
 800414c:	4632      	mov	r2, r6
 800414e:	4649      	mov	r1, r9
 8004150:	6820      	ldr	r0, [r4, #0]
 8004152:	f000 faaa 	bl	80046aa <memmove>
 8004156:	68a3      	ldr	r3, [r4, #8]
 8004158:	1b9b      	subs	r3, r3, r6
 800415a:	60a3      	str	r3, [r4, #8]
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	441e      	add	r6, r3
 8004160:	6026      	str	r6, [r4, #0]
 8004162:	2000      	movs	r0, #0
 8004164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004168:	462a      	mov	r2, r5
 800416a:	f000 fb65 	bl	8004838 <_realloc_r>
 800416e:	4606      	mov	r6, r0
 8004170:	2800      	cmp	r0, #0
 8004172:	d1e1      	bne.n	8004138 <__ssputs_r+0x70>
 8004174:	6921      	ldr	r1, [r4, #16]
 8004176:	4650      	mov	r0, sl
 8004178:	f000 fab2 	bl	80046e0 <_free_r>
 800417c:	e7c7      	b.n	800410e <__ssputs_r+0x46>
	...

08004180 <_svfiprintf_r>:
 8004180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004184:	b09d      	sub	sp, #116	; 0x74
 8004186:	4680      	mov	r8, r0
 8004188:	9303      	str	r3, [sp, #12]
 800418a:	898b      	ldrh	r3, [r1, #12]
 800418c:	061c      	lsls	r4, r3, #24
 800418e:	460d      	mov	r5, r1
 8004190:	4616      	mov	r6, r2
 8004192:	d50f      	bpl.n	80041b4 <_svfiprintf_r+0x34>
 8004194:	690b      	ldr	r3, [r1, #16]
 8004196:	b96b      	cbnz	r3, 80041b4 <_svfiprintf_r+0x34>
 8004198:	2140      	movs	r1, #64	; 0x40
 800419a:	f000 faef 	bl	800477c <_malloc_r>
 800419e:	6028      	str	r0, [r5, #0]
 80041a0:	6128      	str	r0, [r5, #16]
 80041a2:	b928      	cbnz	r0, 80041b0 <_svfiprintf_r+0x30>
 80041a4:	230c      	movs	r3, #12
 80041a6:	f8c8 3000 	str.w	r3, [r8]
 80041aa:	f04f 30ff 	mov.w	r0, #4294967295
 80041ae:	e0c5      	b.n	800433c <_svfiprintf_r+0x1bc>
 80041b0:	2340      	movs	r3, #64	; 0x40
 80041b2:	616b      	str	r3, [r5, #20]
 80041b4:	2300      	movs	r3, #0
 80041b6:	9309      	str	r3, [sp, #36]	; 0x24
 80041b8:	2320      	movs	r3, #32
 80041ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041be:	2330      	movs	r3, #48	; 0x30
 80041c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041c4:	f04f 0b01 	mov.w	fp, #1
 80041c8:	4637      	mov	r7, r6
 80041ca:	463c      	mov	r4, r7
 80041cc:	f814 3b01 	ldrb.w	r3, [r4], #1
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d13c      	bne.n	800424e <_svfiprintf_r+0xce>
 80041d4:	ebb7 0a06 	subs.w	sl, r7, r6
 80041d8:	d00b      	beq.n	80041f2 <_svfiprintf_r+0x72>
 80041da:	4653      	mov	r3, sl
 80041dc:	4632      	mov	r2, r6
 80041de:	4629      	mov	r1, r5
 80041e0:	4640      	mov	r0, r8
 80041e2:	f7ff ff71 	bl	80040c8 <__ssputs_r>
 80041e6:	3001      	adds	r0, #1
 80041e8:	f000 80a3 	beq.w	8004332 <_svfiprintf_r+0x1b2>
 80041ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041ee:	4453      	add	r3, sl
 80041f0:	9309      	str	r3, [sp, #36]	; 0x24
 80041f2:	783b      	ldrb	r3, [r7, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 809c 	beq.w	8004332 <_svfiprintf_r+0x1b2>
 80041fa:	2300      	movs	r3, #0
 80041fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004200:	9304      	str	r3, [sp, #16]
 8004202:	9307      	str	r3, [sp, #28]
 8004204:	9205      	str	r2, [sp, #20]
 8004206:	9306      	str	r3, [sp, #24]
 8004208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800420c:	931a      	str	r3, [sp, #104]	; 0x68
 800420e:	2205      	movs	r2, #5
 8004210:	7821      	ldrb	r1, [r4, #0]
 8004212:	4850      	ldr	r0, [pc, #320]	; (8004354 <_svfiprintf_r+0x1d4>)
 8004214:	f7fb ffe4 	bl	80001e0 <memchr>
 8004218:	1c67      	adds	r7, r4, #1
 800421a:	9b04      	ldr	r3, [sp, #16]
 800421c:	b9d8      	cbnz	r0, 8004256 <_svfiprintf_r+0xd6>
 800421e:	06d9      	lsls	r1, r3, #27
 8004220:	bf44      	itt	mi
 8004222:	2220      	movmi	r2, #32
 8004224:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004228:	071a      	lsls	r2, r3, #28
 800422a:	bf44      	itt	mi
 800422c:	222b      	movmi	r2, #43	; 0x2b
 800422e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004232:	7822      	ldrb	r2, [r4, #0]
 8004234:	2a2a      	cmp	r2, #42	; 0x2a
 8004236:	d016      	beq.n	8004266 <_svfiprintf_r+0xe6>
 8004238:	9a07      	ldr	r2, [sp, #28]
 800423a:	2100      	movs	r1, #0
 800423c:	200a      	movs	r0, #10
 800423e:	4627      	mov	r7, r4
 8004240:	3401      	adds	r4, #1
 8004242:	783b      	ldrb	r3, [r7, #0]
 8004244:	3b30      	subs	r3, #48	; 0x30
 8004246:	2b09      	cmp	r3, #9
 8004248:	d951      	bls.n	80042ee <_svfiprintf_r+0x16e>
 800424a:	b1c9      	cbz	r1, 8004280 <_svfiprintf_r+0x100>
 800424c:	e011      	b.n	8004272 <_svfiprintf_r+0xf2>
 800424e:	2b25      	cmp	r3, #37	; 0x25
 8004250:	d0c0      	beq.n	80041d4 <_svfiprintf_r+0x54>
 8004252:	4627      	mov	r7, r4
 8004254:	e7b9      	b.n	80041ca <_svfiprintf_r+0x4a>
 8004256:	4a3f      	ldr	r2, [pc, #252]	; (8004354 <_svfiprintf_r+0x1d4>)
 8004258:	1a80      	subs	r0, r0, r2
 800425a:	fa0b f000 	lsl.w	r0, fp, r0
 800425e:	4318      	orrs	r0, r3
 8004260:	9004      	str	r0, [sp, #16]
 8004262:	463c      	mov	r4, r7
 8004264:	e7d3      	b.n	800420e <_svfiprintf_r+0x8e>
 8004266:	9a03      	ldr	r2, [sp, #12]
 8004268:	1d11      	adds	r1, r2, #4
 800426a:	6812      	ldr	r2, [r2, #0]
 800426c:	9103      	str	r1, [sp, #12]
 800426e:	2a00      	cmp	r2, #0
 8004270:	db01      	blt.n	8004276 <_svfiprintf_r+0xf6>
 8004272:	9207      	str	r2, [sp, #28]
 8004274:	e004      	b.n	8004280 <_svfiprintf_r+0x100>
 8004276:	4252      	negs	r2, r2
 8004278:	f043 0302 	orr.w	r3, r3, #2
 800427c:	9207      	str	r2, [sp, #28]
 800427e:	9304      	str	r3, [sp, #16]
 8004280:	783b      	ldrb	r3, [r7, #0]
 8004282:	2b2e      	cmp	r3, #46	; 0x2e
 8004284:	d10e      	bne.n	80042a4 <_svfiprintf_r+0x124>
 8004286:	787b      	ldrb	r3, [r7, #1]
 8004288:	2b2a      	cmp	r3, #42	; 0x2a
 800428a:	f107 0101 	add.w	r1, r7, #1
 800428e:	d132      	bne.n	80042f6 <_svfiprintf_r+0x176>
 8004290:	9b03      	ldr	r3, [sp, #12]
 8004292:	1d1a      	adds	r2, r3, #4
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	9203      	str	r2, [sp, #12]
 8004298:	2b00      	cmp	r3, #0
 800429a:	bfb8      	it	lt
 800429c:	f04f 33ff 	movlt.w	r3, #4294967295
 80042a0:	3702      	adds	r7, #2
 80042a2:	9305      	str	r3, [sp, #20]
 80042a4:	4c2c      	ldr	r4, [pc, #176]	; (8004358 <_svfiprintf_r+0x1d8>)
 80042a6:	7839      	ldrb	r1, [r7, #0]
 80042a8:	2203      	movs	r2, #3
 80042aa:	4620      	mov	r0, r4
 80042ac:	f7fb ff98 	bl	80001e0 <memchr>
 80042b0:	b138      	cbz	r0, 80042c2 <_svfiprintf_r+0x142>
 80042b2:	2340      	movs	r3, #64	; 0x40
 80042b4:	1b00      	subs	r0, r0, r4
 80042b6:	fa03 f000 	lsl.w	r0, r3, r0
 80042ba:	9b04      	ldr	r3, [sp, #16]
 80042bc:	4303      	orrs	r3, r0
 80042be:	9304      	str	r3, [sp, #16]
 80042c0:	3701      	adds	r7, #1
 80042c2:	7839      	ldrb	r1, [r7, #0]
 80042c4:	4825      	ldr	r0, [pc, #148]	; (800435c <_svfiprintf_r+0x1dc>)
 80042c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042ca:	2206      	movs	r2, #6
 80042cc:	1c7e      	adds	r6, r7, #1
 80042ce:	f7fb ff87 	bl	80001e0 <memchr>
 80042d2:	2800      	cmp	r0, #0
 80042d4:	d035      	beq.n	8004342 <_svfiprintf_r+0x1c2>
 80042d6:	4b22      	ldr	r3, [pc, #136]	; (8004360 <_svfiprintf_r+0x1e0>)
 80042d8:	b9fb      	cbnz	r3, 800431a <_svfiprintf_r+0x19a>
 80042da:	9b03      	ldr	r3, [sp, #12]
 80042dc:	3307      	adds	r3, #7
 80042de:	f023 0307 	bic.w	r3, r3, #7
 80042e2:	3308      	adds	r3, #8
 80042e4:	9303      	str	r3, [sp, #12]
 80042e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e8:	444b      	add	r3, r9
 80042ea:	9309      	str	r3, [sp, #36]	; 0x24
 80042ec:	e76c      	b.n	80041c8 <_svfiprintf_r+0x48>
 80042ee:	fb00 3202 	mla	r2, r0, r2, r3
 80042f2:	2101      	movs	r1, #1
 80042f4:	e7a3      	b.n	800423e <_svfiprintf_r+0xbe>
 80042f6:	2300      	movs	r3, #0
 80042f8:	9305      	str	r3, [sp, #20]
 80042fa:	4618      	mov	r0, r3
 80042fc:	240a      	movs	r4, #10
 80042fe:	460f      	mov	r7, r1
 8004300:	3101      	adds	r1, #1
 8004302:	783a      	ldrb	r2, [r7, #0]
 8004304:	3a30      	subs	r2, #48	; 0x30
 8004306:	2a09      	cmp	r2, #9
 8004308:	d903      	bls.n	8004312 <_svfiprintf_r+0x192>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0ca      	beq.n	80042a4 <_svfiprintf_r+0x124>
 800430e:	9005      	str	r0, [sp, #20]
 8004310:	e7c8      	b.n	80042a4 <_svfiprintf_r+0x124>
 8004312:	fb04 2000 	mla	r0, r4, r0, r2
 8004316:	2301      	movs	r3, #1
 8004318:	e7f1      	b.n	80042fe <_svfiprintf_r+0x17e>
 800431a:	ab03      	add	r3, sp, #12
 800431c:	9300      	str	r3, [sp, #0]
 800431e:	462a      	mov	r2, r5
 8004320:	4b10      	ldr	r3, [pc, #64]	; (8004364 <_svfiprintf_r+0x1e4>)
 8004322:	a904      	add	r1, sp, #16
 8004324:	4640      	mov	r0, r8
 8004326:	f3af 8000 	nop.w
 800432a:	f1b0 3fff 	cmp.w	r0, #4294967295
 800432e:	4681      	mov	r9, r0
 8004330:	d1d9      	bne.n	80042e6 <_svfiprintf_r+0x166>
 8004332:	89ab      	ldrh	r3, [r5, #12]
 8004334:	065b      	lsls	r3, r3, #25
 8004336:	f53f af38 	bmi.w	80041aa <_svfiprintf_r+0x2a>
 800433a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800433c:	b01d      	add	sp, #116	; 0x74
 800433e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004342:	ab03      	add	r3, sp, #12
 8004344:	9300      	str	r3, [sp, #0]
 8004346:	462a      	mov	r2, r5
 8004348:	4b06      	ldr	r3, [pc, #24]	; (8004364 <_svfiprintf_r+0x1e4>)
 800434a:	a904      	add	r1, sp, #16
 800434c:	4640      	mov	r0, r8
 800434e:	f000 f881 	bl	8004454 <_printf_i>
 8004352:	e7ea      	b.n	800432a <_svfiprintf_r+0x1aa>
 8004354:	08004afc 	.word	0x08004afc
 8004358:	08004b02 	.word	0x08004b02
 800435c:	08004b06 	.word	0x08004b06
 8004360:	00000000 	.word	0x00000000
 8004364:	080040c9 	.word	0x080040c9

08004368 <_printf_common>:
 8004368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800436c:	4691      	mov	r9, r2
 800436e:	461f      	mov	r7, r3
 8004370:	688a      	ldr	r2, [r1, #8]
 8004372:	690b      	ldr	r3, [r1, #16]
 8004374:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004378:	4293      	cmp	r3, r2
 800437a:	bfb8      	it	lt
 800437c:	4613      	movlt	r3, r2
 800437e:	f8c9 3000 	str.w	r3, [r9]
 8004382:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004386:	4606      	mov	r6, r0
 8004388:	460c      	mov	r4, r1
 800438a:	b112      	cbz	r2, 8004392 <_printf_common+0x2a>
 800438c:	3301      	adds	r3, #1
 800438e:	f8c9 3000 	str.w	r3, [r9]
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	0699      	lsls	r1, r3, #26
 8004396:	bf42      	ittt	mi
 8004398:	f8d9 3000 	ldrmi.w	r3, [r9]
 800439c:	3302      	addmi	r3, #2
 800439e:	f8c9 3000 	strmi.w	r3, [r9]
 80043a2:	6825      	ldr	r5, [r4, #0]
 80043a4:	f015 0506 	ands.w	r5, r5, #6
 80043a8:	d107      	bne.n	80043ba <_printf_common+0x52>
 80043aa:	f104 0a19 	add.w	sl, r4, #25
 80043ae:	68e3      	ldr	r3, [r4, #12]
 80043b0:	f8d9 2000 	ldr.w	r2, [r9]
 80043b4:	1a9b      	subs	r3, r3, r2
 80043b6:	429d      	cmp	r5, r3
 80043b8:	db29      	blt.n	800440e <_printf_common+0xa6>
 80043ba:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80043be:	6822      	ldr	r2, [r4, #0]
 80043c0:	3300      	adds	r3, #0
 80043c2:	bf18      	it	ne
 80043c4:	2301      	movne	r3, #1
 80043c6:	0692      	lsls	r2, r2, #26
 80043c8:	d42e      	bmi.n	8004428 <_printf_common+0xc0>
 80043ca:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043ce:	4639      	mov	r1, r7
 80043d0:	4630      	mov	r0, r6
 80043d2:	47c0      	blx	r8
 80043d4:	3001      	adds	r0, #1
 80043d6:	d021      	beq.n	800441c <_printf_common+0xb4>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	68e5      	ldr	r5, [r4, #12]
 80043dc:	f8d9 2000 	ldr.w	r2, [r9]
 80043e0:	f003 0306 	and.w	r3, r3, #6
 80043e4:	2b04      	cmp	r3, #4
 80043e6:	bf08      	it	eq
 80043e8:	1aad      	subeq	r5, r5, r2
 80043ea:	68a3      	ldr	r3, [r4, #8]
 80043ec:	6922      	ldr	r2, [r4, #16]
 80043ee:	bf0c      	ite	eq
 80043f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043f4:	2500      	movne	r5, #0
 80043f6:	4293      	cmp	r3, r2
 80043f8:	bfc4      	itt	gt
 80043fa:	1a9b      	subgt	r3, r3, r2
 80043fc:	18ed      	addgt	r5, r5, r3
 80043fe:	f04f 0900 	mov.w	r9, #0
 8004402:	341a      	adds	r4, #26
 8004404:	454d      	cmp	r5, r9
 8004406:	d11b      	bne.n	8004440 <_printf_common+0xd8>
 8004408:	2000      	movs	r0, #0
 800440a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440e:	2301      	movs	r3, #1
 8004410:	4652      	mov	r2, sl
 8004412:	4639      	mov	r1, r7
 8004414:	4630      	mov	r0, r6
 8004416:	47c0      	blx	r8
 8004418:	3001      	adds	r0, #1
 800441a:	d103      	bne.n	8004424 <_printf_common+0xbc>
 800441c:	f04f 30ff 	mov.w	r0, #4294967295
 8004420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004424:	3501      	adds	r5, #1
 8004426:	e7c2      	b.n	80043ae <_printf_common+0x46>
 8004428:	18e1      	adds	r1, r4, r3
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	2030      	movs	r0, #48	; 0x30
 800442e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004432:	4422      	add	r2, r4
 8004434:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004438:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800443c:	3302      	adds	r3, #2
 800443e:	e7c4      	b.n	80043ca <_printf_common+0x62>
 8004440:	2301      	movs	r3, #1
 8004442:	4622      	mov	r2, r4
 8004444:	4639      	mov	r1, r7
 8004446:	4630      	mov	r0, r6
 8004448:	47c0      	blx	r8
 800444a:	3001      	adds	r0, #1
 800444c:	d0e6      	beq.n	800441c <_printf_common+0xb4>
 800444e:	f109 0901 	add.w	r9, r9, #1
 8004452:	e7d7      	b.n	8004404 <_printf_common+0x9c>

08004454 <_printf_i>:
 8004454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004458:	4617      	mov	r7, r2
 800445a:	7e0a      	ldrb	r2, [r1, #24]
 800445c:	b085      	sub	sp, #20
 800445e:	2a6e      	cmp	r2, #110	; 0x6e
 8004460:	4698      	mov	r8, r3
 8004462:	4606      	mov	r6, r0
 8004464:	460c      	mov	r4, r1
 8004466:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004468:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800446c:	f000 80bc 	beq.w	80045e8 <_printf_i+0x194>
 8004470:	d81a      	bhi.n	80044a8 <_printf_i+0x54>
 8004472:	2a63      	cmp	r2, #99	; 0x63
 8004474:	d02e      	beq.n	80044d4 <_printf_i+0x80>
 8004476:	d80a      	bhi.n	800448e <_printf_i+0x3a>
 8004478:	2a00      	cmp	r2, #0
 800447a:	f000 80c8 	beq.w	800460e <_printf_i+0x1ba>
 800447e:	2a58      	cmp	r2, #88	; 0x58
 8004480:	f000 808a 	beq.w	8004598 <_printf_i+0x144>
 8004484:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004488:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800448c:	e02a      	b.n	80044e4 <_printf_i+0x90>
 800448e:	2a64      	cmp	r2, #100	; 0x64
 8004490:	d001      	beq.n	8004496 <_printf_i+0x42>
 8004492:	2a69      	cmp	r2, #105	; 0x69
 8004494:	d1f6      	bne.n	8004484 <_printf_i+0x30>
 8004496:	6821      	ldr	r1, [r4, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800449e:	d023      	beq.n	80044e8 <_printf_i+0x94>
 80044a0:	1d11      	adds	r1, r2, #4
 80044a2:	6019      	str	r1, [r3, #0]
 80044a4:	6813      	ldr	r3, [r2, #0]
 80044a6:	e027      	b.n	80044f8 <_printf_i+0xa4>
 80044a8:	2a73      	cmp	r2, #115	; 0x73
 80044aa:	f000 80b4 	beq.w	8004616 <_printf_i+0x1c2>
 80044ae:	d808      	bhi.n	80044c2 <_printf_i+0x6e>
 80044b0:	2a6f      	cmp	r2, #111	; 0x6f
 80044b2:	d02a      	beq.n	800450a <_printf_i+0xb6>
 80044b4:	2a70      	cmp	r2, #112	; 0x70
 80044b6:	d1e5      	bne.n	8004484 <_printf_i+0x30>
 80044b8:	680a      	ldr	r2, [r1, #0]
 80044ba:	f042 0220 	orr.w	r2, r2, #32
 80044be:	600a      	str	r2, [r1, #0]
 80044c0:	e003      	b.n	80044ca <_printf_i+0x76>
 80044c2:	2a75      	cmp	r2, #117	; 0x75
 80044c4:	d021      	beq.n	800450a <_printf_i+0xb6>
 80044c6:	2a78      	cmp	r2, #120	; 0x78
 80044c8:	d1dc      	bne.n	8004484 <_printf_i+0x30>
 80044ca:	2278      	movs	r2, #120	; 0x78
 80044cc:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 80044d0:	496e      	ldr	r1, [pc, #440]	; (800468c <_printf_i+0x238>)
 80044d2:	e064      	b.n	800459e <_printf_i+0x14a>
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	f101 0542 	add.w	r5, r1, #66	; 0x42
 80044da:	1d11      	adds	r1, r2, #4
 80044dc:	6019      	str	r1, [r3, #0]
 80044de:	6813      	ldr	r3, [r2, #0]
 80044e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044e4:	2301      	movs	r3, #1
 80044e6:	e0a3      	b.n	8004630 <_printf_i+0x1dc>
 80044e8:	f011 0f40 	tst.w	r1, #64	; 0x40
 80044ec:	f102 0104 	add.w	r1, r2, #4
 80044f0:	6019      	str	r1, [r3, #0]
 80044f2:	d0d7      	beq.n	80044a4 <_printf_i+0x50>
 80044f4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	da03      	bge.n	8004504 <_printf_i+0xb0>
 80044fc:	222d      	movs	r2, #45	; 0x2d
 80044fe:	425b      	negs	r3, r3
 8004500:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004504:	4962      	ldr	r1, [pc, #392]	; (8004690 <_printf_i+0x23c>)
 8004506:	220a      	movs	r2, #10
 8004508:	e017      	b.n	800453a <_printf_i+0xe6>
 800450a:	6820      	ldr	r0, [r4, #0]
 800450c:	6819      	ldr	r1, [r3, #0]
 800450e:	f010 0f80 	tst.w	r0, #128	; 0x80
 8004512:	d003      	beq.n	800451c <_printf_i+0xc8>
 8004514:	1d08      	adds	r0, r1, #4
 8004516:	6018      	str	r0, [r3, #0]
 8004518:	680b      	ldr	r3, [r1, #0]
 800451a:	e006      	b.n	800452a <_printf_i+0xd6>
 800451c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004520:	f101 0004 	add.w	r0, r1, #4
 8004524:	6018      	str	r0, [r3, #0]
 8004526:	d0f7      	beq.n	8004518 <_printf_i+0xc4>
 8004528:	880b      	ldrh	r3, [r1, #0]
 800452a:	4959      	ldr	r1, [pc, #356]	; (8004690 <_printf_i+0x23c>)
 800452c:	2a6f      	cmp	r2, #111	; 0x6f
 800452e:	bf14      	ite	ne
 8004530:	220a      	movne	r2, #10
 8004532:	2208      	moveq	r2, #8
 8004534:	2000      	movs	r0, #0
 8004536:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 800453a:	6865      	ldr	r5, [r4, #4]
 800453c:	60a5      	str	r5, [r4, #8]
 800453e:	2d00      	cmp	r5, #0
 8004540:	f2c0 809c 	blt.w	800467c <_printf_i+0x228>
 8004544:	6820      	ldr	r0, [r4, #0]
 8004546:	f020 0004 	bic.w	r0, r0, #4
 800454a:	6020      	str	r0, [r4, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d13f      	bne.n	80045d0 <_printf_i+0x17c>
 8004550:	2d00      	cmp	r5, #0
 8004552:	f040 8095 	bne.w	8004680 <_printf_i+0x22c>
 8004556:	4675      	mov	r5, lr
 8004558:	2a08      	cmp	r2, #8
 800455a:	d10b      	bne.n	8004574 <_printf_i+0x120>
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	07da      	lsls	r2, r3, #31
 8004560:	d508      	bpl.n	8004574 <_printf_i+0x120>
 8004562:	6923      	ldr	r3, [r4, #16]
 8004564:	6862      	ldr	r2, [r4, #4]
 8004566:	429a      	cmp	r2, r3
 8004568:	bfde      	ittt	le
 800456a:	2330      	movle	r3, #48	; 0x30
 800456c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004570:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004574:	ebae 0305 	sub.w	r3, lr, r5
 8004578:	6123      	str	r3, [r4, #16]
 800457a:	f8cd 8000 	str.w	r8, [sp]
 800457e:	463b      	mov	r3, r7
 8004580:	aa03      	add	r2, sp, #12
 8004582:	4621      	mov	r1, r4
 8004584:	4630      	mov	r0, r6
 8004586:	f7ff feef 	bl	8004368 <_printf_common>
 800458a:	3001      	adds	r0, #1
 800458c:	d155      	bne.n	800463a <_printf_i+0x1e6>
 800458e:	f04f 30ff 	mov.w	r0, #4294967295
 8004592:	b005      	add	sp, #20
 8004594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004598:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800459c:	493c      	ldr	r1, [pc, #240]	; (8004690 <_printf_i+0x23c>)
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	f012 0f80 	tst.w	r2, #128	; 0x80
 80045a6:	f100 0504 	add.w	r5, r0, #4
 80045aa:	601d      	str	r5, [r3, #0]
 80045ac:	d001      	beq.n	80045b2 <_printf_i+0x15e>
 80045ae:	6803      	ldr	r3, [r0, #0]
 80045b0:	e002      	b.n	80045b8 <_printf_i+0x164>
 80045b2:	0655      	lsls	r5, r2, #25
 80045b4:	d5fb      	bpl.n	80045ae <_printf_i+0x15a>
 80045b6:	8803      	ldrh	r3, [r0, #0]
 80045b8:	07d0      	lsls	r0, r2, #31
 80045ba:	bf44      	itt	mi
 80045bc:	f042 0220 	orrmi.w	r2, r2, #32
 80045c0:	6022      	strmi	r2, [r4, #0]
 80045c2:	b91b      	cbnz	r3, 80045cc <_printf_i+0x178>
 80045c4:	6822      	ldr	r2, [r4, #0]
 80045c6:	f022 0220 	bic.w	r2, r2, #32
 80045ca:	6022      	str	r2, [r4, #0]
 80045cc:	2210      	movs	r2, #16
 80045ce:	e7b1      	b.n	8004534 <_printf_i+0xe0>
 80045d0:	4675      	mov	r5, lr
 80045d2:	fbb3 f0f2 	udiv	r0, r3, r2
 80045d6:	fb02 3310 	mls	r3, r2, r0, r3
 80045da:	5ccb      	ldrb	r3, [r1, r3]
 80045dc:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045e0:	4603      	mov	r3, r0
 80045e2:	2800      	cmp	r0, #0
 80045e4:	d1f5      	bne.n	80045d2 <_printf_i+0x17e>
 80045e6:	e7b7      	b.n	8004558 <_printf_i+0x104>
 80045e8:	6808      	ldr	r0, [r1, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	6949      	ldr	r1, [r1, #20]
 80045ee:	f010 0f80 	tst.w	r0, #128	; 0x80
 80045f2:	d004      	beq.n	80045fe <_printf_i+0x1aa>
 80045f4:	1d10      	adds	r0, r2, #4
 80045f6:	6018      	str	r0, [r3, #0]
 80045f8:	6813      	ldr	r3, [r2, #0]
 80045fa:	6019      	str	r1, [r3, #0]
 80045fc:	e007      	b.n	800460e <_printf_i+0x1ba>
 80045fe:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004602:	f102 0004 	add.w	r0, r2, #4
 8004606:	6018      	str	r0, [r3, #0]
 8004608:	6813      	ldr	r3, [r2, #0]
 800460a:	d0f6      	beq.n	80045fa <_printf_i+0x1a6>
 800460c:	8019      	strh	r1, [r3, #0]
 800460e:	2300      	movs	r3, #0
 8004610:	6123      	str	r3, [r4, #16]
 8004612:	4675      	mov	r5, lr
 8004614:	e7b1      	b.n	800457a <_printf_i+0x126>
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	1d11      	adds	r1, r2, #4
 800461a:	6019      	str	r1, [r3, #0]
 800461c:	6815      	ldr	r5, [r2, #0]
 800461e:	6862      	ldr	r2, [r4, #4]
 8004620:	2100      	movs	r1, #0
 8004622:	4628      	mov	r0, r5
 8004624:	f7fb fddc 	bl	80001e0 <memchr>
 8004628:	b108      	cbz	r0, 800462e <_printf_i+0x1da>
 800462a:	1b40      	subs	r0, r0, r5
 800462c:	6060      	str	r0, [r4, #4]
 800462e:	6863      	ldr	r3, [r4, #4]
 8004630:	6123      	str	r3, [r4, #16]
 8004632:	2300      	movs	r3, #0
 8004634:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004638:	e79f      	b.n	800457a <_printf_i+0x126>
 800463a:	6923      	ldr	r3, [r4, #16]
 800463c:	462a      	mov	r2, r5
 800463e:	4639      	mov	r1, r7
 8004640:	4630      	mov	r0, r6
 8004642:	47c0      	blx	r8
 8004644:	3001      	adds	r0, #1
 8004646:	d0a2      	beq.n	800458e <_printf_i+0x13a>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	079b      	lsls	r3, r3, #30
 800464c:	d507      	bpl.n	800465e <_printf_i+0x20a>
 800464e:	2500      	movs	r5, #0
 8004650:	f104 0919 	add.w	r9, r4, #25
 8004654:	68e3      	ldr	r3, [r4, #12]
 8004656:	9a03      	ldr	r2, [sp, #12]
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	429d      	cmp	r5, r3
 800465c:	db05      	blt.n	800466a <_printf_i+0x216>
 800465e:	68e0      	ldr	r0, [r4, #12]
 8004660:	9b03      	ldr	r3, [sp, #12]
 8004662:	4298      	cmp	r0, r3
 8004664:	bfb8      	it	lt
 8004666:	4618      	movlt	r0, r3
 8004668:	e793      	b.n	8004592 <_printf_i+0x13e>
 800466a:	2301      	movs	r3, #1
 800466c:	464a      	mov	r2, r9
 800466e:	4639      	mov	r1, r7
 8004670:	4630      	mov	r0, r6
 8004672:	47c0      	blx	r8
 8004674:	3001      	adds	r0, #1
 8004676:	d08a      	beq.n	800458e <_printf_i+0x13a>
 8004678:	3501      	adds	r5, #1
 800467a:	e7eb      	b.n	8004654 <_printf_i+0x200>
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1a7      	bne.n	80045d0 <_printf_i+0x17c>
 8004680:	780b      	ldrb	r3, [r1, #0]
 8004682:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004686:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800468a:	e765      	b.n	8004558 <_printf_i+0x104>
 800468c:	08004b1e 	.word	0x08004b1e
 8004690:	08004b0d 	.word	0x08004b0d

08004694 <memcpy>:
 8004694:	b510      	push	{r4, lr}
 8004696:	1e43      	subs	r3, r0, #1
 8004698:	440a      	add	r2, r1
 800469a:	4291      	cmp	r1, r2
 800469c:	d100      	bne.n	80046a0 <memcpy+0xc>
 800469e:	bd10      	pop	{r4, pc}
 80046a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046a8:	e7f7      	b.n	800469a <memcpy+0x6>

080046aa <memmove>:
 80046aa:	4288      	cmp	r0, r1
 80046ac:	b510      	push	{r4, lr}
 80046ae:	eb01 0302 	add.w	r3, r1, r2
 80046b2:	d803      	bhi.n	80046bc <memmove+0x12>
 80046b4:	1e42      	subs	r2, r0, #1
 80046b6:	4299      	cmp	r1, r3
 80046b8:	d10c      	bne.n	80046d4 <memmove+0x2a>
 80046ba:	bd10      	pop	{r4, pc}
 80046bc:	4298      	cmp	r0, r3
 80046be:	d2f9      	bcs.n	80046b4 <memmove+0xa>
 80046c0:	1881      	adds	r1, r0, r2
 80046c2:	1ad2      	subs	r2, r2, r3
 80046c4:	42d3      	cmn	r3, r2
 80046c6:	d100      	bne.n	80046ca <memmove+0x20>
 80046c8:	bd10      	pop	{r4, pc}
 80046ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80046ce:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80046d2:	e7f7      	b.n	80046c4 <memmove+0x1a>
 80046d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80046dc:	e7eb      	b.n	80046b6 <memmove+0xc>
	...

080046e0 <_free_r>:
 80046e0:	b538      	push	{r3, r4, r5, lr}
 80046e2:	4605      	mov	r5, r0
 80046e4:	2900      	cmp	r1, #0
 80046e6:	d045      	beq.n	8004774 <_free_r+0x94>
 80046e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046ec:	1f0c      	subs	r4, r1, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	bfb8      	it	lt
 80046f2:	18e4      	addlt	r4, r4, r3
 80046f4:	f000 f8d6 	bl	80048a4 <__malloc_lock>
 80046f8:	4a1f      	ldr	r2, [pc, #124]	; (8004778 <_free_r+0x98>)
 80046fa:	6813      	ldr	r3, [r2, #0]
 80046fc:	4610      	mov	r0, r2
 80046fe:	b933      	cbnz	r3, 800470e <_free_r+0x2e>
 8004700:	6063      	str	r3, [r4, #4]
 8004702:	6014      	str	r4, [r2, #0]
 8004704:	4628      	mov	r0, r5
 8004706:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800470a:	f000 b8cc 	b.w	80048a6 <__malloc_unlock>
 800470e:	42a3      	cmp	r3, r4
 8004710:	d90c      	bls.n	800472c <_free_r+0x4c>
 8004712:	6821      	ldr	r1, [r4, #0]
 8004714:	1862      	adds	r2, r4, r1
 8004716:	4293      	cmp	r3, r2
 8004718:	bf04      	itt	eq
 800471a:	681a      	ldreq	r2, [r3, #0]
 800471c:	685b      	ldreq	r3, [r3, #4]
 800471e:	6063      	str	r3, [r4, #4]
 8004720:	bf04      	itt	eq
 8004722:	1852      	addeq	r2, r2, r1
 8004724:	6022      	streq	r2, [r4, #0]
 8004726:	6004      	str	r4, [r0, #0]
 8004728:	e7ec      	b.n	8004704 <_free_r+0x24>
 800472a:	4613      	mov	r3, r2
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	b10a      	cbz	r2, 8004734 <_free_r+0x54>
 8004730:	42a2      	cmp	r2, r4
 8004732:	d9fa      	bls.n	800472a <_free_r+0x4a>
 8004734:	6819      	ldr	r1, [r3, #0]
 8004736:	1858      	adds	r0, r3, r1
 8004738:	42a0      	cmp	r0, r4
 800473a:	d10b      	bne.n	8004754 <_free_r+0x74>
 800473c:	6820      	ldr	r0, [r4, #0]
 800473e:	4401      	add	r1, r0
 8004740:	1858      	adds	r0, r3, r1
 8004742:	4282      	cmp	r2, r0
 8004744:	6019      	str	r1, [r3, #0]
 8004746:	d1dd      	bne.n	8004704 <_free_r+0x24>
 8004748:	6810      	ldr	r0, [r2, #0]
 800474a:	6852      	ldr	r2, [r2, #4]
 800474c:	605a      	str	r2, [r3, #4]
 800474e:	4401      	add	r1, r0
 8004750:	6019      	str	r1, [r3, #0]
 8004752:	e7d7      	b.n	8004704 <_free_r+0x24>
 8004754:	d902      	bls.n	800475c <_free_r+0x7c>
 8004756:	230c      	movs	r3, #12
 8004758:	602b      	str	r3, [r5, #0]
 800475a:	e7d3      	b.n	8004704 <_free_r+0x24>
 800475c:	6820      	ldr	r0, [r4, #0]
 800475e:	1821      	adds	r1, r4, r0
 8004760:	428a      	cmp	r2, r1
 8004762:	bf04      	itt	eq
 8004764:	6811      	ldreq	r1, [r2, #0]
 8004766:	6852      	ldreq	r2, [r2, #4]
 8004768:	6062      	str	r2, [r4, #4]
 800476a:	bf04      	itt	eq
 800476c:	1809      	addeq	r1, r1, r0
 800476e:	6021      	streq	r1, [r4, #0]
 8004770:	605c      	str	r4, [r3, #4]
 8004772:	e7c7      	b.n	8004704 <_free_r+0x24>
 8004774:	bd38      	pop	{r3, r4, r5, pc}
 8004776:	bf00      	nop
 8004778:	20000094 	.word	0x20000094

0800477c <_malloc_r>:
 800477c:	b570      	push	{r4, r5, r6, lr}
 800477e:	1ccd      	adds	r5, r1, #3
 8004780:	f025 0503 	bic.w	r5, r5, #3
 8004784:	3508      	adds	r5, #8
 8004786:	2d0c      	cmp	r5, #12
 8004788:	bf38      	it	cc
 800478a:	250c      	movcc	r5, #12
 800478c:	2d00      	cmp	r5, #0
 800478e:	4606      	mov	r6, r0
 8004790:	db01      	blt.n	8004796 <_malloc_r+0x1a>
 8004792:	42a9      	cmp	r1, r5
 8004794:	d903      	bls.n	800479e <_malloc_r+0x22>
 8004796:	230c      	movs	r3, #12
 8004798:	6033      	str	r3, [r6, #0]
 800479a:	2000      	movs	r0, #0
 800479c:	bd70      	pop	{r4, r5, r6, pc}
 800479e:	f000 f881 	bl	80048a4 <__malloc_lock>
 80047a2:	4a23      	ldr	r2, [pc, #140]	; (8004830 <_malloc_r+0xb4>)
 80047a4:	6814      	ldr	r4, [r2, #0]
 80047a6:	4621      	mov	r1, r4
 80047a8:	b991      	cbnz	r1, 80047d0 <_malloc_r+0x54>
 80047aa:	4c22      	ldr	r4, [pc, #136]	; (8004834 <_malloc_r+0xb8>)
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	b91b      	cbnz	r3, 80047b8 <_malloc_r+0x3c>
 80047b0:	4630      	mov	r0, r6
 80047b2:	f000 f867 	bl	8004884 <_sbrk_r>
 80047b6:	6020      	str	r0, [r4, #0]
 80047b8:	4629      	mov	r1, r5
 80047ba:	4630      	mov	r0, r6
 80047bc:	f000 f862 	bl	8004884 <_sbrk_r>
 80047c0:	1c43      	adds	r3, r0, #1
 80047c2:	d126      	bne.n	8004812 <_malloc_r+0x96>
 80047c4:	230c      	movs	r3, #12
 80047c6:	6033      	str	r3, [r6, #0]
 80047c8:	4630      	mov	r0, r6
 80047ca:	f000 f86c 	bl	80048a6 <__malloc_unlock>
 80047ce:	e7e4      	b.n	800479a <_malloc_r+0x1e>
 80047d0:	680b      	ldr	r3, [r1, #0]
 80047d2:	1b5b      	subs	r3, r3, r5
 80047d4:	d41a      	bmi.n	800480c <_malloc_r+0x90>
 80047d6:	2b0b      	cmp	r3, #11
 80047d8:	d90f      	bls.n	80047fa <_malloc_r+0x7e>
 80047da:	600b      	str	r3, [r1, #0]
 80047dc:	50cd      	str	r5, [r1, r3]
 80047de:	18cc      	adds	r4, r1, r3
 80047e0:	4630      	mov	r0, r6
 80047e2:	f000 f860 	bl	80048a6 <__malloc_unlock>
 80047e6:	f104 000b 	add.w	r0, r4, #11
 80047ea:	1d23      	adds	r3, r4, #4
 80047ec:	f020 0007 	bic.w	r0, r0, #7
 80047f0:	1ac3      	subs	r3, r0, r3
 80047f2:	d01b      	beq.n	800482c <_malloc_r+0xb0>
 80047f4:	425a      	negs	r2, r3
 80047f6:	50e2      	str	r2, [r4, r3]
 80047f8:	bd70      	pop	{r4, r5, r6, pc}
 80047fa:	428c      	cmp	r4, r1
 80047fc:	bf0d      	iteet	eq
 80047fe:	6863      	ldreq	r3, [r4, #4]
 8004800:	684b      	ldrne	r3, [r1, #4]
 8004802:	6063      	strne	r3, [r4, #4]
 8004804:	6013      	streq	r3, [r2, #0]
 8004806:	bf18      	it	ne
 8004808:	460c      	movne	r4, r1
 800480a:	e7e9      	b.n	80047e0 <_malloc_r+0x64>
 800480c:	460c      	mov	r4, r1
 800480e:	6849      	ldr	r1, [r1, #4]
 8004810:	e7ca      	b.n	80047a8 <_malloc_r+0x2c>
 8004812:	1cc4      	adds	r4, r0, #3
 8004814:	f024 0403 	bic.w	r4, r4, #3
 8004818:	42a0      	cmp	r0, r4
 800481a:	d005      	beq.n	8004828 <_malloc_r+0xac>
 800481c:	1a21      	subs	r1, r4, r0
 800481e:	4630      	mov	r0, r6
 8004820:	f000 f830 	bl	8004884 <_sbrk_r>
 8004824:	3001      	adds	r0, #1
 8004826:	d0cd      	beq.n	80047c4 <_malloc_r+0x48>
 8004828:	6025      	str	r5, [r4, #0]
 800482a:	e7d9      	b.n	80047e0 <_malloc_r+0x64>
 800482c:	bd70      	pop	{r4, r5, r6, pc}
 800482e:	bf00      	nop
 8004830:	20000094 	.word	0x20000094
 8004834:	20000098 	.word	0x20000098

08004838 <_realloc_r>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	4607      	mov	r7, r0
 800483c:	4614      	mov	r4, r2
 800483e:	460e      	mov	r6, r1
 8004840:	b921      	cbnz	r1, 800484c <_realloc_r+0x14>
 8004842:	4611      	mov	r1, r2
 8004844:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004848:	f7ff bf98 	b.w	800477c <_malloc_r>
 800484c:	b922      	cbnz	r2, 8004858 <_realloc_r+0x20>
 800484e:	f7ff ff47 	bl	80046e0 <_free_r>
 8004852:	4625      	mov	r5, r4
 8004854:	4628      	mov	r0, r5
 8004856:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004858:	f000 f826 	bl	80048a8 <_malloc_usable_size_r>
 800485c:	4284      	cmp	r4, r0
 800485e:	d90f      	bls.n	8004880 <_realloc_r+0x48>
 8004860:	4621      	mov	r1, r4
 8004862:	4638      	mov	r0, r7
 8004864:	f7ff ff8a 	bl	800477c <_malloc_r>
 8004868:	4605      	mov	r5, r0
 800486a:	2800      	cmp	r0, #0
 800486c:	d0f2      	beq.n	8004854 <_realloc_r+0x1c>
 800486e:	4631      	mov	r1, r6
 8004870:	4622      	mov	r2, r4
 8004872:	f7ff ff0f 	bl	8004694 <memcpy>
 8004876:	4631      	mov	r1, r6
 8004878:	4638      	mov	r0, r7
 800487a:	f7ff ff31 	bl	80046e0 <_free_r>
 800487e:	e7e9      	b.n	8004854 <_realloc_r+0x1c>
 8004880:	4635      	mov	r5, r6
 8004882:	e7e7      	b.n	8004854 <_realloc_r+0x1c>

08004884 <_sbrk_r>:
 8004884:	b538      	push	{r3, r4, r5, lr}
 8004886:	4c06      	ldr	r4, [pc, #24]	; (80048a0 <_sbrk_r+0x1c>)
 8004888:	2300      	movs	r3, #0
 800488a:	4605      	mov	r5, r0
 800488c:	4608      	mov	r0, r1
 800488e:	6023      	str	r3, [r4, #0]
 8004890:	f7fc fb2a 	bl	8000ee8 <_sbrk>
 8004894:	1c43      	adds	r3, r0, #1
 8004896:	d102      	bne.n	800489e <_sbrk_r+0x1a>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	b103      	cbz	r3, 800489e <_sbrk_r+0x1a>
 800489c:	602b      	str	r3, [r5, #0]
 800489e:	bd38      	pop	{r3, r4, r5, pc}
 80048a0:	2000028c 	.word	0x2000028c

080048a4 <__malloc_lock>:
 80048a4:	4770      	bx	lr

080048a6 <__malloc_unlock>:
 80048a6:	4770      	bx	lr

080048a8 <_malloc_usable_size_r>:
 80048a8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80048ac:	2800      	cmp	r0, #0
 80048ae:	f1a0 0004 	sub.w	r0, r0, #4
 80048b2:	bfbc      	itt	lt
 80048b4:	580b      	ldrlt	r3, [r1, r0]
 80048b6:	18c0      	addlt	r0, r0, r3
 80048b8:	4770      	bx	lr
	...

080048bc <_init>:
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	bf00      	nop
 80048c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048c2:	bc08      	pop	{r3}
 80048c4:	469e      	mov	lr, r3
 80048c6:	4770      	bx	lr

080048c8 <_fini>:
 80048c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048ca:	bf00      	nop
 80048cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80048ce:	bc08      	pop	{r3}
 80048d0:	469e      	mov	lr, r3
 80048d2:	4770      	bx	lr
